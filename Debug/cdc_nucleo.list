
cdc_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f28  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d4  0800a1d4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d4  0800a1d4  0001a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1dc  0800a1dc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1dc  0800a1dc  0001a1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b20  200001ec  0800a3d0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d0c  0800a3d0  00021d0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0e1  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ba  00000000  00000000  0003e2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00042ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00043d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f95  00000000  00000000  00044e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018243  00000000  00000000  00066e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3947  00000000  00000000  0007f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000b28  00000000  00000000  0014298f  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  00000086  00000000  00000000  001434b7  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000008  00000000  00000000  00143540  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00004570  00000000  00000000  00143548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001ec 	.word	0x200001ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009fcc 	.word	0x08009fcc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f0 	.word	0x200001f0
 8000100:	08009fcc 	.word	0x08009fcc

08000104 <USBPD_CAD_Init>:
 8000104:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000106:	0007      	movs	r7, r0
 8000108:	000c      	movs	r4, r1
 800010a:	0015      	movs	r5, r2
 800010c:	001e      	movs	r6, r3
 800010e:	2802      	cmp	r0, #2
 8000110:	d220      	bcs.n	8000154 <USBPD_CAD_Init+0x50>
 8000112:	200c      	movs	r0, #12
 8000114:	f009 fec6 	bl	8009ea4 <malloc>
 8000118:	4932      	ldr	r1, [pc, #200]	; (80001e4 <.text_6>)
 800011a:	00ba      	lsls	r2, r7, #2
 800011c:	188a      	adds	r2, r1, r2
 800011e:	6050      	str	r0, [r2, #4]
 8000120:	2800      	cmp	r0, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x24>
 8000124:	2003      	movs	r0, #3
 8000126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000128:	9600      	str	r6, [sp, #0]
 800012a:	9501      	str	r5, [sp, #4]
 800012c:	2300      	movs	r3, #0
 800012e:	2500      	movs	r5, #0
 8000130:	2600      	movs	r6, #0
 8000132:	c068      	stmia	r0!, {r3, r5, r6}
 8000134:	7808      	ldrb	r0, [r1, #0]
 8000136:	1c40      	adds	r0, r0, #1
 8000138:	7008      	strb	r0, [r1, #0]
 800013a:	6850      	ldr	r0, [r2, #4]
 800013c:	9900      	ldr	r1, [sp, #0]
 800013e:	6001      	str	r1, [r0, #0]
 8000140:	7203      	strb	r3, [r0, #8]
 8000142:	6044      	str	r4, [r0, #4]
 8000144:	6863      	ldr	r3, [r4, #4]
 8000146:	9a00      	ldr	r2, [sp, #0]
 8000148:	9901      	ldr	r1, [sp, #4]
 800014a:	0038      	movs	r0, r7
 800014c:	f006 feb8 	bl	8006ec0 <CAD_Init>
 8000150:	2000      	movs	r0, #0
 8000152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000154:	2001      	movs	r0, #1
 8000156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000158 <USBPD_CAD_PortEnable>:
 8000158:	2802      	cmp	r0, #2
 800015a:	d204      	bcs.n	8000166 <USBPD_CAD_PortEnable+0xe>
 800015c:	4a21      	ldr	r2, [pc, #132]	; (80001e4 <.text_6>)
 800015e:	0080      	lsls	r0, r0, #2
 8000160:	1810      	adds	r0, r2, r0
 8000162:	6840      	ldr	r0, [r0, #4]
 8000164:	7201      	strb	r1, [r0, #8]
 8000166:	4770      	bx	lr

08000168 <USBPD_CAD_Process>:
 8000168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800016a:	b084      	sub	sp, #16
 800016c:	2400      	movs	r4, #0
 800016e:	4f1d      	ldr	r7, [pc, #116]	; (80001e4 <.text_6>)
 8000170:	7838      	ldrb	r0, [r7, #0]
 8000172:	4284      	cmp	r4, r0
 8000174:	da32      	bge.n	80001dc <USBPD_CAD_Process+0x74>
 8000176:	00a5      	lsls	r5, r4, #2
 8000178:	2002      	movs	r0, #2
 800017a:	a901      	add	r1, sp, #4
 800017c:	5148      	str	r0, [r1, r5]
 800017e:	1d38      	adds	r0, r7, #4
 8000180:	1946      	adds	r6, r0, r5
 8000182:	6830      	ldr	r0, [r6, #0]
 8000184:	7a00      	ldrb	r0, [r0, #8]
 8000186:	2801      	cmp	r0, #1
 8000188:	d11e      	bne.n	80001c8 <USBPD_CAD_Process+0x60>
 800018a:	aa03      	add	r2, sp, #12
 800018c:	4669      	mov	r1, sp
 800018e:	0020      	movs	r0, r4
 8000190:	f006 ff80 	bl	8007094 <CAD_StateMachine>
 8000194:	a901      	add	r1, sp, #4
 8000196:	5148      	str	r0, [r1, r5]
 8000198:	4668      	mov	r0, sp
 800019a:	7800      	ldrb	r0, [r0, #0]
 800019c:	2800      	cmp	r0, #0
 800019e:	d013      	beq.n	80001c8 <USBPD_CAD_Process+0x60>
 80001a0:	6833      	ldr	r3, [r6, #0]
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	6801      	ldr	r1, [r0, #0]
 80001a6:	074a      	lsls	r2, r1, #29
 80001a8:	0fd2      	lsrs	r2, r2, #31
 80001aa:	d003      	beq.n	80001b4 <USBPD_CAD_Process+0x4c>
 80001ac:	2208      	movs	r2, #8
 80001ae:	430a      	orrs	r2, r1
 80001b0:	6002      	str	r2, [r0, #0]
 80001b2:	e002      	b.n	80001ba <USBPD_CAD_Process+0x52>
 80001b4:	2208      	movs	r2, #8
 80001b6:	4391      	bics	r1, r2
 80001b8:	6001      	str	r1, [r0, #0]
 80001ba:	9a03      	ldr	r2, [sp, #12]
 80001bc:	4668      	mov	r0, sp
 80001be:	7801      	ldrb	r1, [r0, #0]
 80001c0:	0020      	movs	r0, r4
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4798      	blx	r3
 80001c8:	1c64      	adds	r4, r4, #1
 80001ca:	b2e4      	uxtb	r4, r4
 80001cc:	e7d0      	b.n	8000170 <USBPD_CAD_Process+0x8>
 80001ce:	9802      	ldr	r0, [sp, #8]
 80001d0:	9901      	ldr	r1, [sp, #4]
 80001d2:	4288      	cmp	r0, r1
 80001d4:	d300      	bcc.n	80001d8 <USBPD_CAD_Process+0x70>
 80001d6:	4608      	mov	r0, r1
 80001d8:	b005      	add	sp, #20
 80001da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80001dc:	2801      	cmp	r0, #1
 80001de:	d1f6      	bne.n	80001ce <USBPD_CAD_Process+0x66>
 80001e0:	9801      	ldr	r0, [sp, #4]
 80001e2:	e7f9      	b.n	80001d8 <USBPD_CAD_Process+0x70>

080001e4 <.text_6>:
 80001e4:	20000208 	.word	0x20000208

080001e8 <USBPD_CAD_AssertRd>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	0004      	movs	r4, r0
 80001ec:	f007 f910 	bl	8007410 <USBPDM1_DeAssertRp>
 80001f0:	0020      	movs	r0, r4
 80001f2:	f007 f917 	bl	8007424 <USBPDM1_AssertRd>
 80001f6:	bd10      	pop	{r4, pc}

080001f8 <USBPD_CAD_AssertRp>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	0004      	movs	r4, r0
 80001fc:	f007 f9b8 	bl	8007570 <USBPDM1_DeAssertRd>
 8000200:	0020      	movs	r0, r4
 8000202:	f007 f84d 	bl	80072a0 <USBPDM1_AssertRp>
 8000206:	bd10      	pop	{r4, pc}

08000208 <USBPD_CAD_EnterErrorRecovery>:
 8000208:	b580      	push	{r7, lr}
 800020a:	f006 ff19 	bl	8007040 <CAD_Enter_ErrorRecovery>
 800020e:	bd01      	pop	{r0, pc}

08000210 <USBPD_CAD_GetMemoryConsumption>:
 8000210:	2018      	movs	r0, #24
 8000212:	4770      	bx	lr

08000214 <USBPD_PE_SetTrace>:
 8000214:	0001      	movs	r1, r0
 8000216:	d100      	bne.n	800021a <USBPD_PE_SetTrace+0x6>
 8000218:	4805      	ldr	r0, [pc, #20]	; (8000230 <.text_5>)
 800021a:	4906      	ldr	r1, [pc, #24]	; (8000234 <.text_6>)
 800021c:	6008      	str	r0, [r1, #0]
 800021e:	4770      	bx	lr

08000220 <USBPD_PE_CheckLIB>:
 8000220:	4905      	ldr	r1, [pc, #20]	; (8000238 <.text_7>)
 8000222:	4288      	cmp	r0, r1
 8000224:	d101      	bne.n	800022a <USBPD_PE_CheckLIB+0xa>
 8000226:	2001      	movs	r0, #1
 8000228:	4770      	bx	lr
 800022a:	2000      	movs	r0, #0
 800022c:	4770      	bx	lr
	...

08000230 <.text_5>:
 8000230:	08000245 	.word	0x08000245

08000234 <.text_6>:
 8000234:	20000000 	.word	0x20000000

08000238 <.text_7>:
 8000238:	00320100 	.word	0x00320100

0800023c <USBPD_PE_GetMemoryConsumption>:
 800023c:	b580      	push	{r7, lr}
 800023e:	f7ff ffe7 	bl	8000210 <USBPD_CAD_GetMemoryConsumption>
 8000242:	bd02      	pop	{r1, pc}

08000244 <PE_Trace_Empty>:
 8000244:	4770      	bx	lr
	...

08000248 <__udivsi3>:
 8000248:	2200      	movs	r2, #0
 800024a:	0843      	lsrs	r3, r0, #1
 800024c:	428b      	cmp	r3, r1
 800024e:	d374      	bcc.n	800033a <__udivsi3+0xf2>
 8000250:	0903      	lsrs	r3, r0, #4
 8000252:	428b      	cmp	r3, r1
 8000254:	d35f      	bcc.n	8000316 <__udivsi3+0xce>
 8000256:	0a03      	lsrs	r3, r0, #8
 8000258:	428b      	cmp	r3, r1
 800025a:	d344      	bcc.n	80002e6 <__udivsi3+0x9e>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d328      	bcc.n	80002b4 <__udivsi3+0x6c>
 8000262:	0c03      	lsrs	r3, r0, #16
 8000264:	428b      	cmp	r3, r1
 8000266:	d30d      	bcc.n	8000284 <__udivsi3+0x3c>
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	0209      	lsls	r1, r1, #8
 800026c:	ba12      	rev	r2, r2
 800026e:	0c03      	lsrs	r3, r0, #16
 8000270:	428b      	cmp	r3, r1
 8000272:	d302      	bcc.n	800027a <__udivsi3+0x32>
 8000274:	1212      	asrs	r2, r2, #8
 8000276:	0209      	lsls	r1, r1, #8
 8000278:	d065      	beq.n	8000346 <__udivsi3+0xfe>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d319      	bcc.n	80002b4 <__udivsi3+0x6c>
 8000280:	e000      	b.n	8000284 <__udivsi3+0x3c>
 8000282:	0a09      	lsrs	r1, r1, #8
 8000284:	0bc3      	lsrs	r3, r0, #15
 8000286:	428b      	cmp	r3, r1
 8000288:	d301      	bcc.n	800028e <__udivsi3+0x46>
 800028a:	03cb      	lsls	r3, r1, #15
 800028c:	1ac0      	subs	r0, r0, r3
 800028e:	4152      	adcs	r2, r2
 8000290:	0b83      	lsrs	r3, r0, #14
 8000292:	428b      	cmp	r3, r1
 8000294:	d301      	bcc.n	800029a <__udivsi3+0x52>
 8000296:	038b      	lsls	r3, r1, #14
 8000298:	1ac0      	subs	r0, r0, r3
 800029a:	4152      	adcs	r2, r2
 800029c:	0b43      	lsrs	r3, r0, #13
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__udivsi3+0x5e>
 80002a2:	034b      	lsls	r3, r1, #13
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	0b03      	lsrs	r3, r0, #12
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d301      	bcc.n	80002b2 <__udivsi3+0x6a>
 80002ae:	030b      	lsls	r3, r1, #12
 80002b0:	1ac0      	subs	r0, r0, r3
 80002b2:	4152      	adcs	r2, r2
 80002b4:	0ac3      	lsrs	r3, r0, #11
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d301      	bcc.n	80002be <__udivsi3+0x76>
 80002ba:	02cb      	lsls	r3, r1, #11
 80002bc:	1ac0      	subs	r0, r0, r3
 80002be:	4152      	adcs	r2, r2
 80002c0:	0a83      	lsrs	r3, r0, #10
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__udivsi3+0x82>
 80002c6:	028b      	lsls	r3, r1, #10
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0a43      	lsrs	r3, r0, #9
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__udivsi3+0x8e>
 80002d2:	024b      	lsls	r3, r1, #9
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0a03      	lsrs	r3, r0, #8
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__udivsi3+0x9a>
 80002de:	020b      	lsls	r3, r1, #8
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	d2cd      	bcs.n	8000282 <__udivsi3+0x3a>
 80002e6:	09c3      	lsrs	r3, r0, #7
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__udivsi3+0xa8>
 80002ec:	01cb      	lsls	r3, r1, #7
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0983      	lsrs	r3, r0, #6
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__udivsi3+0xb4>
 80002f8:	018b      	lsls	r3, r1, #6
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0943      	lsrs	r3, r0, #5
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__udivsi3+0xc0>
 8000304:	014b      	lsls	r3, r1, #5
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0903      	lsrs	r3, r0, #4
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__udivsi3+0xcc>
 8000310:	010b      	lsls	r3, r1, #4
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	08c3      	lsrs	r3, r0, #3
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__udivsi3+0xd8>
 800031c:	00cb      	lsls	r3, r1, #3
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0883      	lsrs	r3, r0, #2
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__udivsi3+0xe4>
 8000328:	008b      	lsls	r3, r1, #2
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0843      	lsrs	r3, r0, #1
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__udivsi3+0xf0>
 8000334:	004b      	lsls	r3, r1, #1
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	1a41      	subs	r1, r0, r1
 800033c:	d200      	bcs.n	8000340 <__udivsi3+0xf8>
 800033e:	4601      	mov	r1, r0
 8000340:	4152      	adcs	r2, r2
 8000342:	4610      	mov	r0, r2
 8000344:	4770      	bx	lr
 8000346:	e7ff      	b.n	8000348 <__udivsi3+0x100>
 8000348:	b501      	push	{r0, lr}
 800034a:	2000      	movs	r0, #0
 800034c:	f000 f8f0 	bl	8000530 <__aeabi_idiv0>
 8000350:	bd02      	pop	{r1, pc}
 8000352:	46c0      	nop			; (mov r8, r8)

08000354 <__aeabi_uidivmod>:
 8000354:	2900      	cmp	r1, #0
 8000356:	d0f7      	beq.n	8000348 <__udivsi3+0x100>
 8000358:	e776      	b.n	8000248 <__udivsi3>
 800035a:	4770      	bx	lr

0800035c <__divsi3>:
 800035c:	4603      	mov	r3, r0
 800035e:	430b      	orrs	r3, r1
 8000360:	d47f      	bmi.n	8000462 <__divsi3+0x106>
 8000362:	2200      	movs	r2, #0
 8000364:	0843      	lsrs	r3, r0, #1
 8000366:	428b      	cmp	r3, r1
 8000368:	d374      	bcc.n	8000454 <__divsi3+0xf8>
 800036a:	0903      	lsrs	r3, r0, #4
 800036c:	428b      	cmp	r3, r1
 800036e:	d35f      	bcc.n	8000430 <__divsi3+0xd4>
 8000370:	0a03      	lsrs	r3, r0, #8
 8000372:	428b      	cmp	r3, r1
 8000374:	d344      	bcc.n	8000400 <__divsi3+0xa4>
 8000376:	0b03      	lsrs	r3, r0, #12
 8000378:	428b      	cmp	r3, r1
 800037a:	d328      	bcc.n	80003ce <__divsi3+0x72>
 800037c:	0c03      	lsrs	r3, r0, #16
 800037e:	428b      	cmp	r3, r1
 8000380:	d30d      	bcc.n	800039e <__divsi3+0x42>
 8000382:	22ff      	movs	r2, #255	; 0xff
 8000384:	0209      	lsls	r1, r1, #8
 8000386:	ba12      	rev	r2, r2
 8000388:	0c03      	lsrs	r3, r0, #16
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__divsi3+0x38>
 800038e:	1212      	asrs	r2, r2, #8
 8000390:	0209      	lsls	r1, r1, #8
 8000392:	d065      	beq.n	8000460 <__divsi3+0x104>
 8000394:	0b03      	lsrs	r3, r0, #12
 8000396:	428b      	cmp	r3, r1
 8000398:	d319      	bcc.n	80003ce <__divsi3+0x72>
 800039a:	e000      	b.n	800039e <__divsi3+0x42>
 800039c:	0a09      	lsrs	r1, r1, #8
 800039e:	0bc3      	lsrs	r3, r0, #15
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x4c>
 80003a4:	03cb      	lsls	r3, r1, #15
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0b83      	lsrs	r3, r0, #14
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x58>
 80003b0:	038b      	lsls	r3, r1, #14
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0b43      	lsrs	r3, r0, #13
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x64>
 80003bc:	034b      	lsls	r3, r1, #13
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0b03      	lsrs	r3, r0, #12
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x70>
 80003c8:	030b      	lsls	r3, r1, #12
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0ac3      	lsrs	r3, r0, #11
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x7c>
 80003d4:	02cb      	lsls	r3, r1, #11
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0a83      	lsrs	r3, r0, #10
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x88>
 80003e0:	028b      	lsls	r3, r1, #10
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0a43      	lsrs	r3, r0, #9
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x94>
 80003ec:	024b      	lsls	r3, r1, #9
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	0a03      	lsrs	r3, r0, #8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0xa0>
 80003f8:	020b      	lsls	r3, r1, #8
 80003fa:	1ac0      	subs	r0, r0, r3
 80003fc:	4152      	adcs	r2, r2
 80003fe:	d2cd      	bcs.n	800039c <__divsi3+0x40>
 8000400:	09c3      	lsrs	r3, r0, #7
 8000402:	428b      	cmp	r3, r1
 8000404:	d301      	bcc.n	800040a <__divsi3+0xae>
 8000406:	01cb      	lsls	r3, r1, #7
 8000408:	1ac0      	subs	r0, r0, r3
 800040a:	4152      	adcs	r2, r2
 800040c:	0983      	lsrs	r3, r0, #6
 800040e:	428b      	cmp	r3, r1
 8000410:	d301      	bcc.n	8000416 <__divsi3+0xba>
 8000412:	018b      	lsls	r3, r1, #6
 8000414:	1ac0      	subs	r0, r0, r3
 8000416:	4152      	adcs	r2, r2
 8000418:	0943      	lsrs	r3, r0, #5
 800041a:	428b      	cmp	r3, r1
 800041c:	d301      	bcc.n	8000422 <__divsi3+0xc6>
 800041e:	014b      	lsls	r3, r1, #5
 8000420:	1ac0      	subs	r0, r0, r3
 8000422:	4152      	adcs	r2, r2
 8000424:	0903      	lsrs	r3, r0, #4
 8000426:	428b      	cmp	r3, r1
 8000428:	d301      	bcc.n	800042e <__divsi3+0xd2>
 800042a:	010b      	lsls	r3, r1, #4
 800042c:	1ac0      	subs	r0, r0, r3
 800042e:	4152      	adcs	r2, r2
 8000430:	08c3      	lsrs	r3, r0, #3
 8000432:	428b      	cmp	r3, r1
 8000434:	d301      	bcc.n	800043a <__divsi3+0xde>
 8000436:	00cb      	lsls	r3, r1, #3
 8000438:	1ac0      	subs	r0, r0, r3
 800043a:	4152      	adcs	r2, r2
 800043c:	0883      	lsrs	r3, r0, #2
 800043e:	428b      	cmp	r3, r1
 8000440:	d301      	bcc.n	8000446 <__divsi3+0xea>
 8000442:	008b      	lsls	r3, r1, #2
 8000444:	1ac0      	subs	r0, r0, r3
 8000446:	4152      	adcs	r2, r2
 8000448:	0843      	lsrs	r3, r0, #1
 800044a:	428b      	cmp	r3, r1
 800044c:	d301      	bcc.n	8000452 <__divsi3+0xf6>
 800044e:	004b      	lsls	r3, r1, #1
 8000450:	1ac0      	subs	r0, r0, r3
 8000452:	4152      	adcs	r2, r2
 8000454:	1a41      	subs	r1, r0, r1
 8000456:	d200      	bcs.n	800045a <__divsi3+0xfe>
 8000458:	4601      	mov	r1, r0
 800045a:	4152      	adcs	r2, r2
 800045c:	4610      	mov	r0, r2
 800045e:	4770      	bx	lr
 8000460:	e05d      	b.n	800051e <__divsi3+0x1c2>
 8000462:	0fca      	lsrs	r2, r1, #31
 8000464:	d000      	beq.n	8000468 <__divsi3+0x10c>
 8000466:	4249      	negs	r1, r1
 8000468:	1003      	asrs	r3, r0, #32
 800046a:	d300      	bcc.n	800046e <__divsi3+0x112>
 800046c:	4240      	negs	r0, r0
 800046e:	4053      	eors	r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	469c      	mov	ip, r3
 8000474:	0903      	lsrs	r3, r0, #4
 8000476:	428b      	cmp	r3, r1
 8000478:	d32d      	bcc.n	80004d6 <__divsi3+0x17a>
 800047a:	0a03      	lsrs	r3, r0, #8
 800047c:	428b      	cmp	r3, r1
 800047e:	d312      	bcc.n	80004a6 <__divsi3+0x14a>
 8000480:	22fc      	movs	r2, #252	; 0xfc
 8000482:	0189      	lsls	r1, r1, #6
 8000484:	ba12      	rev	r2, r2
 8000486:	0a03      	lsrs	r3, r0, #8
 8000488:	428b      	cmp	r3, r1
 800048a:	d30c      	bcc.n	80004a6 <__divsi3+0x14a>
 800048c:	0189      	lsls	r1, r1, #6
 800048e:	1192      	asrs	r2, r2, #6
 8000490:	428b      	cmp	r3, r1
 8000492:	d308      	bcc.n	80004a6 <__divsi3+0x14a>
 8000494:	0189      	lsls	r1, r1, #6
 8000496:	1192      	asrs	r2, r2, #6
 8000498:	428b      	cmp	r3, r1
 800049a:	d304      	bcc.n	80004a6 <__divsi3+0x14a>
 800049c:	0189      	lsls	r1, r1, #6
 800049e:	d03a      	beq.n	8000516 <__divsi3+0x1ba>
 80004a0:	1192      	asrs	r2, r2, #6
 80004a2:	e000      	b.n	80004a6 <__divsi3+0x14a>
 80004a4:	0989      	lsrs	r1, r1, #6
 80004a6:	09c3      	lsrs	r3, r0, #7
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d301      	bcc.n	80004b0 <__divsi3+0x154>
 80004ac:	01cb      	lsls	r3, r1, #7
 80004ae:	1ac0      	subs	r0, r0, r3
 80004b0:	4152      	adcs	r2, r2
 80004b2:	0983      	lsrs	r3, r0, #6
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d301      	bcc.n	80004bc <__divsi3+0x160>
 80004b8:	018b      	lsls	r3, r1, #6
 80004ba:	1ac0      	subs	r0, r0, r3
 80004bc:	4152      	adcs	r2, r2
 80004be:	0943      	lsrs	r3, r0, #5
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d301      	bcc.n	80004c8 <__divsi3+0x16c>
 80004c4:	014b      	lsls	r3, r1, #5
 80004c6:	1ac0      	subs	r0, r0, r3
 80004c8:	4152      	adcs	r2, r2
 80004ca:	0903      	lsrs	r3, r0, #4
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d301      	bcc.n	80004d4 <__divsi3+0x178>
 80004d0:	010b      	lsls	r3, r1, #4
 80004d2:	1ac0      	subs	r0, r0, r3
 80004d4:	4152      	adcs	r2, r2
 80004d6:	08c3      	lsrs	r3, r0, #3
 80004d8:	428b      	cmp	r3, r1
 80004da:	d301      	bcc.n	80004e0 <__divsi3+0x184>
 80004dc:	00cb      	lsls	r3, r1, #3
 80004de:	1ac0      	subs	r0, r0, r3
 80004e0:	4152      	adcs	r2, r2
 80004e2:	0883      	lsrs	r3, r0, #2
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d301      	bcc.n	80004ec <__divsi3+0x190>
 80004e8:	008b      	lsls	r3, r1, #2
 80004ea:	1ac0      	subs	r0, r0, r3
 80004ec:	4152      	adcs	r2, r2
 80004ee:	d2d9      	bcs.n	80004a4 <__divsi3+0x148>
 80004f0:	0843      	lsrs	r3, r0, #1
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d301      	bcc.n	80004fa <__divsi3+0x19e>
 80004f6:	004b      	lsls	r3, r1, #1
 80004f8:	1ac0      	subs	r0, r0, r3
 80004fa:	4152      	adcs	r2, r2
 80004fc:	1a41      	subs	r1, r0, r1
 80004fe:	d200      	bcs.n	8000502 <__divsi3+0x1a6>
 8000500:	4601      	mov	r1, r0
 8000502:	4663      	mov	r3, ip
 8000504:	4152      	adcs	r2, r2
 8000506:	105b      	asrs	r3, r3, #1
 8000508:	4610      	mov	r0, r2
 800050a:	d301      	bcc.n	8000510 <__divsi3+0x1b4>
 800050c:	4240      	negs	r0, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d500      	bpl.n	8000514 <__divsi3+0x1b8>
 8000512:	4249      	negs	r1, r1
 8000514:	4770      	bx	lr
 8000516:	4663      	mov	r3, ip
 8000518:	105b      	asrs	r3, r3, #1
 800051a:	d300      	bcc.n	800051e <__divsi3+0x1c2>
 800051c:	4240      	negs	r0, r0
 800051e:	b501      	push	{r0, lr}
 8000520:	2000      	movs	r0, #0
 8000522:	f000 f805 	bl	8000530 <__aeabi_idiv0>
 8000526:	bd02      	pop	{r1, pc}

08000528 <__aeabi_idivmod>:
 8000528:	2900      	cmp	r1, #0
 800052a:	d0f8      	beq.n	800051e <__divsi3+0x1c2>
 800052c:	e716      	b.n	800035c <__divsi3>
 800052e:	4770      	bx	lr

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__aeabi_uldivmod>:
 8000534:	2b00      	cmp	r3, #0
 8000536:	d111      	bne.n	800055c <__aeabi_uldivmod+0x28>
 8000538:	2a00      	cmp	r2, #0
 800053a:	d10f      	bne.n	800055c <__aeabi_uldivmod+0x28>
 800053c:	2900      	cmp	r1, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_uldivmod+0xe>
 8000540:	2800      	cmp	r0, #0
 8000542:	d002      	beq.n	800054a <__aeabi_uldivmod+0x16>
 8000544:	2100      	movs	r1, #0
 8000546:	43c9      	mvns	r1, r1
 8000548:	1c08      	adds	r0, r1, #0
 800054a:	b407      	push	{r0, r1, r2}
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <__aeabi_uldivmod+0x24>)
 800054e:	a102      	add	r1, pc, #8	; (adr r1, 8000558 <__aeabi_uldivmod+0x24>)
 8000550:	1840      	adds	r0, r0, r1
 8000552:	9002      	str	r0, [sp, #8]
 8000554:	bd03      	pop	{r0, r1, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	ffffffd9 	.word	0xffffffd9
 800055c:	b403      	push	{r0, r1}
 800055e:	4668      	mov	r0, sp
 8000560:	b501      	push	{r0, lr}
 8000562:	9802      	ldr	r0, [sp, #8]
 8000564:	f000 f806 	bl	8000574 <__udivmoddi4>
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	469e      	mov	lr, r3
 800056c:	b002      	add	sp, #8
 800056e:	bc0c      	pop	{r2, r3}
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f000 f8ba 	bl	800070c <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f000 f8b5 	bl	800070c <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__clzdi2>:
 800070c:	b510      	push	{r4, lr}
 800070e:	2900      	cmp	r1, #0
 8000710:	d103      	bne.n	800071a <__clzdi2+0xe>
 8000712:	f000 f807 	bl	8000724 <__clzsi2>
 8000716:	3020      	adds	r0, #32
 8000718:	e002      	b.n	8000720 <__clzdi2+0x14>
 800071a:	1c08      	adds	r0, r1, #0
 800071c:	f000 f802 	bl	8000724 <__clzsi2>
 8000720:	bd10      	pop	{r4, pc}
 8000722:	46c0      	nop			; (mov r8, r8)

08000724 <__clzsi2>:
 8000724:	211c      	movs	r1, #28
 8000726:	2301      	movs	r3, #1
 8000728:	041b      	lsls	r3, r3, #16
 800072a:	4298      	cmp	r0, r3
 800072c:	d301      	bcc.n	8000732 <__clzsi2+0xe>
 800072e:	0c00      	lsrs	r0, r0, #16
 8000730:	3910      	subs	r1, #16
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	4298      	cmp	r0, r3
 8000736:	d301      	bcc.n	800073c <__clzsi2+0x18>
 8000738:	0a00      	lsrs	r0, r0, #8
 800073a:	3908      	subs	r1, #8
 800073c:	091b      	lsrs	r3, r3, #4
 800073e:	4298      	cmp	r0, r3
 8000740:	d301      	bcc.n	8000746 <__clzsi2+0x22>
 8000742:	0900      	lsrs	r0, r0, #4
 8000744:	3904      	subs	r1, #4
 8000746:	a202      	add	r2, pc, #8	; (adr r2, 8000750 <__clzsi2+0x2c>)
 8000748:	5c10      	ldrb	r0, [r2, r0]
 800074a:	1840      	adds	r0, r0, r1
 800074c:	4770      	bx	lr
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	02020304 	.word	0x02020304
 8000754:	01010101 	.word	0x01010101
	...

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b7f      	cmp	r3, #127	; 0x7f
 8000772:	d809      	bhi.n	8000788 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	231f      	movs	r3, #31
 800077c:	401a      	ands	r2, r3
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <__NVIC_EnableIRQ+0x30>)
 8000780:	2101      	movs	r1, #1
 8000782:	4091      	lsls	r1, r2
 8000784:	000a      	movs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b7f      	cmp	r3, #127	; 0x7f
 80007a8:	d828      	bhi.n	80007fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <__NVIC_SetPriority+0xd4>)
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	33c0      	adds	r3, #192	; 0xc0
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	589b      	ldr	r3, [r3, r2]
 80007ba:	1dfa      	adds	r2, r7, #7
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	0011      	movs	r1, r2
 80007c0:	2203      	movs	r2, #3
 80007c2:	400a      	ands	r2, r1
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	21ff      	movs	r1, #255	; 0xff
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	401a      	ands	r2, r3
 80007d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	401a      	ands	r2, r3
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	2303      	movs	r3, #3
 80007e2:	4003      	ands	r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <__NVIC_SetPriority+0xd4>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	33c0      	adds	r3, #192	; 0xc0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fa:	e031      	b.n	8000860 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <__NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0019      	movs	r1, r3
 8000804:	230f      	movs	r3, #15
 8000806:	400b      	ands	r3, r1
 8000808:	3b08      	subs	r3, #8
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	3306      	adds	r3, #6
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	3304      	adds	r3, #4
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0011      	movs	r1, r2
 800081c:	2203      	movs	r2, #3
 800081e:	400a      	ands	r2, r1
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	4091      	lsls	r1, r2
 8000826:	000a      	movs	r2, r1
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	2303      	movs	r3, #3
 800083e:	4003      	ands	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <__NVIC_SetPriority+0xd8>)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001c      	movs	r4, r3
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	3b08      	subs	r3, #8
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	3306      	adds	r3, #6
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	18c3      	adds	r3, r0, r3
 800085c:	3304      	adds	r3, #4
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b003      	add	sp, #12
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	001a      	movs	r2, r3
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <LL_DMA_SetDataTransferDirection+0x48>)
 8000892:	4013      	ands	r3, r2
 8000894:	0019      	movs	r1, r3
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	18d3      	adds	r3, r2, r3
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	001a      	movs	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b006      	add	sp, #24
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	0800a044 	.word	0x0800a044
 80008b8:	ffffbfef 	.word	0xffffbfef

080008bc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <LL_DMA_SetMode+0x44>)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	18d3      	adds	r3, r2, r3
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	18d3      	adds	r3, r2, r3
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2220      	movs	r2, #32
 80008de:	4393      	bics	r3, r2
 80008e0:	0019      	movs	r1, r3
 80008e2:	4a07      	ldr	r2, [pc, #28]	; (8000900 <LL_DMA_SetMode+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	18d3      	adds	r3, r2, r3
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
             Mode);
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b006      	add	sp, #24
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	0800a044 	.word	0x0800a044

08000904 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <LL_DMA_SetPeriphIncMode+0x44>)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	001a      	movs	r2, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2240      	movs	r2, #64	; 0x40
 8000926:	4393      	bics	r3, r2
 8000928:	0019      	movs	r1, r3
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <LL_DMA_SetPeriphIncMode+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	001a      	movs	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b006      	add	sp, #24
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	0800a044 	.word	0x0800a044

0800094c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <LL_DMA_SetMemoryIncMode+0x44>)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	4393      	bics	r3, r2
 8000970:	0019      	movs	r1, r3
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <LL_DMA_SetMemoryIncMode+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	18d3      	adds	r3, r2, r3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	001a      	movs	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	18d3      	adds	r3, r2, r3
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b006      	add	sp, #24
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	0800a044 	.word	0x0800a044

08000994 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <LL_DMA_SetPeriphSize+0x44>)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <LL_DMA_SetPeriphSize+0x48>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	0019      	movs	r1, r3
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <LL_DMA_SetPeriphSize+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	001a      	movs	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	18d3      	adds	r3, r2, r3
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b006      	add	sp, #24
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	0800a044 	.word	0x0800a044
 80009dc:	fffffcff 	.word	0xfffffcff

080009e0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <LL_DMA_SetMemorySize+0x44>)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	001a      	movs	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	18d3      	adds	r3, r2, r3
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a09      	ldr	r2, [pc, #36]	; (8000a28 <LL_DMA_SetMemorySize+0x48>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	0019      	movs	r1, r3
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <LL_DMA_SetMemorySize+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	18d3      	adds	r3, r2, r3
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001a      	movs	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	18d3      	adds	r3, r2, r3
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	430a      	orrs	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b006      	add	sp, #24
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	0800a044 	.word	0x0800a044
 8000a28:	fffff3ff 	.word	0xfffff3ff

08000a2c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	18d3      	adds	r3, r2, r3
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	0019      	movs	r1, r3
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	18d3      	adds	r3, r2, r3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	18d3      	adds	r3, r2, r3
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b006      	add	sp, #24
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	0800a044 	.word	0x0800a044
 8000a74:	ffffcfff 	.word	0xffffcfff

08000a78 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	0a9b      	lsrs	r3, r3, #10
 8000a88:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <LL_DMA_SetPeriphRequest+0x50>)
 8000a8a:	405a      	eors	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	1a9b      	subs	r3, r3, r2
 8000a92:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	18d3      	adds	r3, r2, r3
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LL_DMA_SetPeriphRequest+0x54>)
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	4463      	add	r3, ip
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	227f      	movs	r2, #127	; 0x7f
 8000aa6:	4393      	bics	r3, r2
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	18d3      	adds	r3, r2, r3
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <LL_DMA_SetPeriphRequest+0x54>)
 8000ab4:	4694      	mov	ip, r2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b006      	add	sp, #24
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	00100080 	.word	0x00100080
 8000acc:	40020800 	.word	0x40020800

08000ad0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ada:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4013      	ands	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b004      	add	sp, #16
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000

08000afc <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b004      	add	sp, #16
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 fb0e 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f81e 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f99c 	bl	8000e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b38:	f000 f976 	bl	8000e28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b3c:	f000 f926 	bl	8000d8c <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8000b40:	f008 fbf8 	bl	8009334 <MX_USB_Device_Init>
  MX_UCPD1_Init();
 8000b44:	f000 f87c 	bl	8000c40 <MX_UCPD1_Init>
  /* USER CODE BEGIN 2 */
  USBPD_HW_IF_GlobalHwInit();
 8000b48:	f006 fb9b 	bl	8007282 <USBPD_HW_IF_GlobalHwInit>
  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/


  if (USBPD_OK != USBPD_DPM_InitCore())
 8000b4c:	f008 fbb2 	bl	80092b4 <USBPD_DPM_InitCore>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <main+0x30>
  {
    Error_Handler();
 8000b54:	f000 f9e8 	bl	8000f28 <Error_Handler>
  }

  MX_USB_Device_Init();
 8000b58:	f008 fbec 	bl	8009334 <MX_USB_Device_Init>

  MX_USBPD_Init();  /* Infinite loop */
 8000b5c:	f008 fb99 	bl	8009292 <MX_USBPD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CDC_Transmit_FS("erdem", 5);
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <main+0x44>)
 8000b62:	2105      	movs	r1, #5
 8000b64:	0018      	movs	r0, r3
 8000b66:	f008 fc69 	bl	800943c <CDC_Transmit_FS>
  {
 8000b6a:	e7f9      	b.n	8000b60 <main+0x38>
 8000b6c:	08009fe4 	.word	0x08009fe4

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0a7      	sub	sp, #156	; 0x9c
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	245c      	movs	r4, #92	; 0x5c
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	233c      	movs	r3, #60	; 0x3c
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2100      	movs	r1, #0
 8000b82:	f009 f999 	bl	8009eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b86:	234c      	movs	r3, #76	; 0x4c
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	f009 f991 	bl	8009eb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b96:	003b      	movs	r3, r7
 8000b98:	0018      	movs	r0, r3
 8000b9a:	234c      	movs	r3, #76	; 0x4c
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f009 f98a 	bl	8009eb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 f9bf 	bl	8002f2c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2222      	movs	r2, #34	; 0x22
 8000bb2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	0052      	lsls	r2, r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	03d2      	lsls	r2, r2, #15
 8000bc2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2240      	movs	r2, #64	; 0x40
 8000bce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 f9f3 	bl	8002fc4 <HAL_RCC_OscConfig>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000be2:	f000 f9a1 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	214c      	movs	r1, #76	; 0x4c
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2207      	movs	r2, #7
 8000bec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2100      	movs	r1, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 fd43 	bl	8003690 <HAL_RCC_ClockConfig>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c0e:	f000 f98b 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000c12:	003b      	movs	r3, r7
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <SystemClock_Config+0xcc>)
 8000c16:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	645a      	str	r2, [r3, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	003b      	movs	r3, r7
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 fedc 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c30:	f000 f97a 	bl	8000f28 <Error_Handler>
  }
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b027      	add	sp, #156	; 0x9c
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	01000002 	.word	0x01000002

08000c40 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	003b      	movs	r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2318      	movs	r3, #24
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f009 f932 	bl	8009eb8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	049b      	lsls	r3, r3, #18
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff39 	bl	8000ad0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff ff4c 	bl	8000afc <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff ff49 	bl	8000afc <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000c6a:	003b      	movs	r3, r7
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	0212      	lsls	r2, r2, #8
 8000c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c72:	003b      	movs	r3, r7
 8000c74:	2203      	movs	r2, #3
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c78:	003b      	movs	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4a40      	ldr	r2, [pc, #256]	; (8000d84 <MX_UCPD1_Init+0x144>)
 8000c82:	0019      	movs	r1, r3
 8000c84:	0010      	movs	r0, r2
 8000c86:	f004 f824 	bl	8004cd2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000c8a:	003b      	movs	r3, r7
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	0052      	lsls	r2, r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c92:	003b      	movs	r3, r7
 8000c94:	2203      	movs	r2, #3
 8000c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c98:	003b      	movs	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	003a      	movs	r2, r7
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f004 f813 	bl	8004cd2 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cae:	223a      	movs	r2, #58	; 0x3a
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fee0 	bl	8000a78 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fdd6 	bl	8000870 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff feae 	bl	8000a2c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fdf0 	bl	80008bc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff fe0e 	bl	8000904 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	2100      	movs	r1, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fe2c 	bl	800094c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fe4a 	bl	8000994 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fe6a 	bl	80009e0 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d0e:	223b      	movs	r2, #59	; 0x3b
 8000d10:	2101      	movs	r1, #1
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff feb0 	bl	8000a78 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fda6 	bl	8000870 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	2101      	movs	r1, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff fe7e 	bl	8000a2c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	2101      	movs	r1, #1
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fdc0 	bl	80008bc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2101      	movs	r1, #1
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fdde 	bl	8000904 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fdfc 	bl	800094c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	2101      	movs	r1, #1
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff fe1a 	bl	8000994 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_UCPD1_Init+0x148>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	2101      	movs	r1, #1
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fe3a 	bl	80009e0 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2008      	movs	r0, #8
 8000d70:	f7ff fd10 	bl	8000794 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8000d74:	2008      	movs	r0, #8
 8000d76:	f7ff fcf3 	bl	8000760 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b006      	add	sp, #24
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	50000400 	.word	0x50000400
 8000d88:	40020000 	.word	0x40020000

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <MX_USART2_UART_Init+0x98>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000d98:	22e1      	movs	r2, #225	; 0xe1
 8000d9a:	0252      	lsls	r2, r2, #9
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f003 f840 	bl	8003e5c <HAL_UART_Init>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000de0:	f000 f8a2 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	0018      	movs	r0, r3
 8000dea:	f003 fdcd 	bl	8004988 <HAL_UARTEx_SetTxFifoThreshold>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000df2:	f000 f899 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 fe04 	bl	8004a08 <HAL_UARTEx_SetRxFifoThreshold>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e04:	f000 f890 	bl	8000f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <MX_USART2_UART_Init+0x94>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f003 fd82 	bl	8004914 <HAL_UARTEx_DisableFifoMode>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f888 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000454 	.word	0x20000454
 8000e24:	40004400 	.word	0x40004400

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_DMA_Init+0x44>)
 8000e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_DMA_Init+0x44>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_DMA_Init+0x44>)
 8000e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8000e46:	2100      	movs	r1, #0
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f7ff fca3 	bl	8000794 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e4e:	2009      	movs	r0, #9
 8000e50:	f7ff fc86 	bl	8000760 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8000e54:	2100      	movs	r1, #0
 8000e56:	200a      	movs	r0, #10
 8000e58:	f7ff fc9c 	bl	8000794 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f7ff fc7f 	bl	8000760 <__NVIC_EnableIRQ>

}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40021000 	.word	0x40021000

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	2414      	movs	r4, #20
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2314      	movs	r3, #20
 8000e7e:	001a      	movs	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	f009 f819 	bl	8009eb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	2204      	movs	r2, #4
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	2220      	movs	r2, #32
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_GPIO_Init+0xb4>)
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 fc36 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ef4:	0021      	movs	r1, r4
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2220      	movs	r2, #32
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2201      	movs	r2, #1
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	187a      	adds	r2, r7, r1
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	0011      	movs	r1, r2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 fab6 	bl	8001488 <HAL_GPIO_Init>

}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b00b      	add	sp, #44	; 0x2c
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0549      	lsls	r1, r1, #21
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	055b      	lsls	r3, r3, #21
 8000f68:	4013      	ands	r3, r2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 f994 	bl	80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	2414      	movs	r4, #20
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f008 ff8e 	bl	8009eb8 <memset>
  if(huart->Instance==USART2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_UART_MspInit+0x8c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d130      	bne.n	8001008 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0289      	lsls	r1, r1, #10
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000fda:	0021      	movs	r1, r4
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	187a      	adds	r2, r7, r1
 8000ffc:	23a0      	movs	r3, #160	; 0xa0
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fa40 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b00b      	add	sp, #44	; 0x2c
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	40004400 	.word	0x40004400
 8001014:	40021000 	.word	0x40021000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f8f0 	bl	8001220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <USB_UCPD1_2_IRQHandler+0x14>)
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fce0 	bl	8001a14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	200019f8 	.word	0x200019f8

08001060 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f008 fed4 	bl	8009e50 <__errno>
 80010a8:	0003      	movs	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	425b      	negs	r3, r3
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	18d2      	adds	r2, r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b006      	add	sp, #24
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20024000 	.word	0x20024000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	20000214 	.word	0x20000214
 80010dc:	20001d10 	.word	0x20001d10

080010e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <SystemInit+0x14>)
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0512      	lsls	r2, r2, #20
 80010ea:	609a      	str	r2, [r3, #8]
#endif
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010fc:	f7ff fff0 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <LoopForever+0x6>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopForever+0xe>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	; (8001144 <LoopForever+0x16>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001126:	f008 fe99 	bl	8009e5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800112a:	f7ff fcfd 	bl	8000b28 <main>

0800112e <LoopForever>:

LoopForever:
  b LoopForever
 800112e:	e7fe      	b.n	800112e <LoopForever>
  ldr   r0, =_estack
 8001130:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800113c:	0800a1e4 	.word	0x0800a1e4
  ldr r2, =_sbss
 8001140:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001144:	20001d0c 	.word	0x20001d0c

08001148 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_COMP_IRQHandler>
	...

0800114c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_Init+0x3c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Init+0x3c>)
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0049      	lsls	r1, r1, #1
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001166:	2000      	movs	r0, #0
 8001168:	f000 f810 	bl	800118c <HAL_InitTick>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d003      	beq.n	8001178 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	e001      	b.n	800117c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fedc 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	230f      	movs	r3, #15
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_InitTick+0x88>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d02b      	beq.n	80011fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_InitTick+0x8c>)
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_InitTick+0x88>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	0019      	movs	r1, r3
 80011ae:	23fa      	movs	r3, #250	; 0xfa
 80011b0:	0098      	lsls	r0, r3, #2
 80011b2:	f7ff f849 	bl	8000248 <__udivsi3>
 80011b6:	0003      	movs	r3, r0
 80011b8:	0019      	movs	r1, r3
 80011ba:	0020      	movs	r0, r4
 80011bc:	f7ff f844 	bl	8000248 <__udivsi3>
 80011c0:	0003      	movs	r3, r0
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f953 	bl	800146e <HAL_SYSTICK_Config>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d112      	bne.n	80011f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d80a      	bhi.n	80011e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	2301      	movs	r3, #1
 80011d6:	425b      	negs	r3, r3
 80011d8:	2200      	movs	r2, #0
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 f922 	bl	8001424 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_InitTick+0x90>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e00d      	b.n	8001204 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e008      	b.n	8001204 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f2:	230f      	movs	r3, #15
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	e003      	b.n	8001204 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b005      	add	sp, #20
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	2000000c 	.word	0x2000000c
 8001218:	20000004 	.word	0x20000004
 800121c:	20000008 	.word	0x20000008

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x1c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	001a      	movs	r2, r3
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x20>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	18d2      	adds	r2, r2, r3
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_IncTick+0x20>)
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	2000000c 	.word	0x2000000c
 8001240:	200004e4 	.word	0x200004e4

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <HAL_GetTick+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	200004e4 	.word	0x200004e4

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff fff0 	bl	8001244 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	001a      	movs	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	189b      	adds	r3, r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	f7ff ffe0 	bl	8001244 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b004      	add	sp, #16
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	2000000c 	.word	0x2000000c

080012a0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40010000 	.word	0x40010000
 80012c8:	fffff9ff 	.word	0xfffff9ff

080012cc <__NVIC_EnableIRQ>:
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	0002      	movs	r2, r0
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b7f      	cmp	r3, #127	; 0x7f
 80012de:	d809      	bhi.n	80012f4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	231f      	movs	r3, #31
 80012e8:	401a      	ands	r2, r3
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_EnableIRQ+0x30>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	4091      	lsls	r1, r2
 80012f0:	000a      	movs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	0002      	movs	r2, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b7f      	cmp	r3, #127	; 0x7f
 8001314:	d828      	bhi.n	8001368 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <__NVIC_SetPriority+0xd4>)
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	33c0      	adds	r3, #192	; 0xc0
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	589b      	ldr	r3, [r3, r2]
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	0011      	movs	r1, r2
 800132c:	2203      	movs	r2, #3
 800132e:	400a      	ands	r2, r1
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	21ff      	movs	r1, #255	; 0xff
 8001334:	4091      	lsls	r1, r2
 8001336:	000a      	movs	r2, r1
 8001338:	43d2      	mvns	r2, r2
 800133a:	401a      	ands	r2, r3
 800133c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	401a      	ands	r2, r3
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	2303      	movs	r3, #3
 800134e:	4003      	ands	r3, r0
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	481f      	ldr	r0, [pc, #124]	; (80013d4 <__NVIC_SetPriority+0xd4>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	33c0      	adds	r3, #192	; 0xc0
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	501a      	str	r2, [r3, r0]
}
 8001366:	e031      	b.n	80013cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <__NVIC_SetPriority+0xd8>)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	0019      	movs	r1, r3
 8001370:	230f      	movs	r3, #15
 8001372:	400b      	ands	r3, r1
 8001374:	3b08      	subs	r3, #8
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3306      	adds	r3, #6
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1dfa      	adds	r2, r7, #7
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	0011      	movs	r1, r2
 8001388:	2203      	movs	r2, #3
 800138a:	400a      	ands	r2, r1
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	401a      	ands	r2, r3
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0018      	movs	r0, r3
 80013a8:	2303      	movs	r3, #3
 80013aa:	4003      	ands	r3, r0
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <__NVIC_SetPriority+0xd8>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	001c      	movs	r4, r3
 80013b8:	230f      	movs	r3, #15
 80013ba:	4023      	ands	r3, r4
 80013bc:	3b08      	subs	r3, #8
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	430a      	orrs	r2, r1
 80013c2:	3306      	adds	r3, #6
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18c3      	adds	r3, r0, r3
 80013c8:	3304      	adds	r3, #4
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b003      	add	sp, #12
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	045b      	lsls	r3, r3, #17
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d301      	bcc.n	80013f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f0:	2301      	movs	r3, #1
 80013f2:	e010      	b.n	8001416 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <SysTick_Config+0x44>)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	3a01      	subs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fc:	2301      	movs	r3, #1
 80013fe:	425b      	negs	r3, r3
 8001400:	2103      	movs	r1, #3
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ff7c 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x44>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	210f      	movs	r1, #15
 8001430:	187b      	adds	r3, r7, r1
 8001432:	1c02      	adds	r2, r0, #0
 8001434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	0002      	movs	r2, r0
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff ffaf 	bl	80013dc <SysTick_Config>
 800147e:	0003      	movs	r3, r0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e14d      	b.n	8001734 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d100      	bne.n	80014b0 <HAL_GPIO_Init+0x28>
 80014ae:	e13e      	b.n	800172e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d00b      	beq.n	80014d0 <HAL_GPIO_Init+0x48>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d007      	beq.n	80014d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c4:	2b11      	cmp	r3, #17
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	409a      	lsls	r2, r3
 80014de:	0013      	movs	r3, r2
 80014e0:	43da      	mvns	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	409a      	lsls	r2, r3
 80014f2:	0013      	movs	r3, r2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	43da      	mvns	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	2201      	movs	r2, #1
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0xea>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b12      	cmp	r3, #18
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	58d3      	ldr	r3, [r2, r3]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2107      	movs	r1, #7
 800159e:	400b      	ands	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	401a      	ands	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	055b      	lsls	r3, r3, #21
 80015f6:	4013      	ands	r3, r2
 80015f8:	d100      	bne.n	80015fc <HAL_GPIO_Init+0x174>
 80015fa:	e098      	b.n	800172e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015fc:	4a53      	ldr	r2, [pc, #332]	; (800174c <HAL_GPIO_Init+0x2c4>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3318      	adds	r3, #24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	589b      	ldr	r3, [r3, r2]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2203      	movs	r2, #3
 800160e:	4013      	ands	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	220f      	movs	r2, #15
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	43da      	mvns	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	23a0      	movs	r3, #160	; 0xa0
 8001624:	05db      	lsls	r3, r3, #23
 8001626:	429a      	cmp	r2, r3
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x1d6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_GPIO_Init+0x2c8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x1d2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a47      	ldr	r2, [pc, #284]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x1ce>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a46      	ldr	r2, [pc, #280]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x1ca>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a45      	ldr	r2, [pc, #276]	; (800175c <HAL_GPIO_Init+0x2d4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x1c6>
 800164a:	2304      	movs	r3, #4
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 800164e:	2305      	movs	r3, #5
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x1d8>
 800165e:	2300      	movs	r3, #0
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	2103      	movs	r1, #3
 8001664:	400a      	ands	r2, r1
 8001666:	00d2      	lsls	r2, r2, #3
 8001668:	4093      	lsls	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001670:	4936      	ldr	r1, [pc, #216]	; (800174c <HAL_GPIO_Init+0x2c4>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3318      	adds	r3, #24
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800167e:	4a33      	ldr	r2, [pc, #204]	; (800174c <HAL_GPIO_Init+0x2c4>)
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	58d3      	ldr	r3, [r2, r3]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43da      	mvns	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	4013      	ands	r3, r2
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a4:	4929      	ldr	r1, [pc, #164]	; (800174c <HAL_GPIO_Init+0x2c4>)
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80016ac:	4a27      	ldr	r2, [pc, #156]	; (800174c <HAL_GPIO_Init+0x2c4>)
 80016ae:	2384      	movs	r3, #132	; 0x84
 80016b0:	58d3      	ldr	r3, [r2, r3]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	029b      	lsls	r3, r3, #10
 80016c6:	4013      	ands	r3, r2
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d2:	491e      	ldr	r1, [pc, #120]	; (800174c <HAL_GPIO_Init+0x2c4>)
 80016d4:	2284      	movs	r2, #132	; 0x84
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_GPIO_Init+0x2c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	035b      	lsls	r3, r3, #13
 80016f2:	4013      	ands	r3, r2
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_GPIO_Init+0x2c4>)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_GPIO_Init+0x2c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43da      	mvns	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	039b      	lsls	r3, r3, #14
 800171c:	4013      	ands	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_GPIO_Init+0x2c4>)
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	40da      	lsrs	r2, r3
 800173c:	1e13      	subs	r3, r2, #0
 800173e:	d000      	beq.n	8001742 <HAL_GPIO_Init+0x2ba>
 8001740:	e6aa      	b.n	8001498 <HAL_GPIO_Init+0x10>
  }
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b006      	add	sp, #24
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021800 	.word	0x40021800
 8001750:	50000400 	.word	0x50000400
 8001754:	50000800 	.word	0x50000800
 8001758:	50000c00 	.word	0x50000c00
 800175c:	50001000 	.word	0x50001000

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	0008      	movs	r0, r1
 800176a:	0011      	movs	r1, r2
 800176c:	1cbb      	adds	r3, r7, #2
 800176e:	1c02      	adds	r2, r0, #0
 8001770:	801a      	strh	r2, [r3, #0]
 8001772:	1c7b      	adds	r3, r7, #1
 8001774:	1c0a      	adds	r2, r1, #0
 8001776:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001778:	1c7b      	adds	r3, r7, #1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001780:	1cbb      	adds	r3, r7, #2
 8001782:	881a      	ldrh	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	1cbb      	adds	r3, r7, #2
 800178c:	881a      	ldrh	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b08f      	sub	sp, #60	; 0x3c
 80017a0:	af0a      	add	r7, sp, #40	; 0x28
 80017a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e105      	b.n	80019ba <HAL_PCD_Init+0x21e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a84      	ldr	r2, [pc, #528]	; (80019c4 <HAL_PCD_Init+0x228>)
 80017b2:	5c9b      	ldrb	r3, [r3, r2]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d108      	bne.n	80017cc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	23ae      	movs	r3, #174	; 0xae
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	2100      	movs	r1, #0
 80017c2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f007 ffa8 	bl	800971c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a7d      	ldr	r2, [pc, #500]	; (80019c4 <HAL_PCD_Init+0x228>)
 80017d0:	2103      	movs	r1, #3
 80017d2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0018      	movs	r0, r3
 80017da:	f003 fb5d 	bl	8004e98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017de:	230f      	movs	r3, #15
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e05b      	b.n	80018a0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e8:	240f      	movs	r4, #15
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	2039      	movs	r0, #57	; 0x39
 80017f2:	0013      	movs	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	18cb      	adds	r3, r1, r3
 80017fc:	181b      	adds	r3, r3, r0
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001802:	193b      	adds	r3, r7, r4
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2038      	movs	r0, #56	; 0x38
 800180a:	0013      	movs	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	189b      	adds	r3, r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	18cb      	adds	r3, r1, r3
 8001814:	181b      	adds	r3, r3, r0
 8001816:	193a      	adds	r2, r7, r4
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800181c:	0025      	movs	r5, r4
 800181e:	193b      	adds	r3, r7, r4
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	197b      	adds	r3, r7, r5
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b29c      	uxth	r4, r3
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	2044      	movs	r0, #68	; 0x44
 800182c:	0013      	movs	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	189b      	adds	r3, r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	18cb      	adds	r3, r1, r3
 8001836:	181b      	adds	r3, r3, r0
 8001838:	1c22      	adds	r2, r4, #0
 800183a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800183c:	197b      	adds	r3, r7, r5
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	203b      	movs	r0, #59	; 0x3b
 8001844:	0013      	movs	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	189b      	adds	r3, r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	18cb      	adds	r3, r1, r3
 800184e:	181b      	adds	r3, r3, r0
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001854:	197b      	adds	r3, r7, r5
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	0013      	movs	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	189b      	adds	r3, r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	18cb      	adds	r3, r1, r3
 8001864:	3348      	adds	r3, #72	; 0x48
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800186a:	197b      	adds	r3, r7, r5
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	0013      	movs	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	189b      	adds	r3, r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	18cb      	adds	r3, r1, r3
 800187a:	334c      	adds	r3, #76	; 0x4c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001880:	197b      	adds	r3, r7, r5
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	0013      	movs	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	189b      	adds	r3, r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	18cb      	adds	r3, r1, r3
 8001890:	3350      	adds	r3, #80	; 0x50
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001896:	197b      	adds	r3, r7, r5
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	197b      	adds	r3, r7, r5
 800189c:	3201      	adds	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	210f      	movs	r1, #15
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d39c      	bcc.n	80017e8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e056      	b.n	8001964 <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b6:	240f      	movs	r4, #15
 80018b8:	193b      	adds	r3, r7, r4
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	237a      	movs	r3, #122	; 0x7a
 80018c0:	33ff      	adds	r3, #255	; 0xff
 80018c2:	0019      	movs	r1, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	189b      	adds	r3, r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	18c3      	adds	r3, r0, r3
 80018ce:	185b      	adds	r3, r3, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	23bc      	movs	r3, #188	; 0xbc
 80018dc:	0059      	lsls	r1, r3, #1
 80018de:	0013      	movs	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	189b      	adds	r3, r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	18c3      	adds	r3, r0, r3
 80018e8:	185b      	adds	r3, r3, r1
 80018ea:	193a      	adds	r2, r7, r4
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	237c      	movs	r3, #124	; 0x7c
 80018f8:	33ff      	adds	r3, #255	; 0xff
 80018fa:	0019      	movs	r1, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	189b      	adds	r3, r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	18c3      	adds	r3, r0, r3
 8001906:	185b      	adds	r3, r3, r1
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800190c:	193b      	adds	r3, r7, r4
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	23c4      	movs	r3, #196	; 0xc4
 8001914:	0059      	lsls	r1, r3, #1
 8001916:	0013      	movs	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	189b      	adds	r3, r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	18c3      	adds	r3, r0, r3
 8001920:	185b      	adds	r3, r3, r1
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001926:	193b      	adds	r3, r7, r4
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	23c6      	movs	r3, #198	; 0xc6
 800192e:	0059      	lsls	r1, r3, #1
 8001930:	0013      	movs	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	189b      	adds	r3, r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	18c3      	adds	r3, r0, r3
 800193a:	185b      	adds	r3, r3, r1
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001940:	193b      	adds	r3, r7, r4
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	23c8      	movs	r3, #200	; 0xc8
 8001948:	0059      	lsls	r1, r3, #1
 800194a:	0013      	movs	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	189b      	adds	r3, r3, r2
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	18c3      	adds	r3, r0, r3
 8001954:	185b      	adds	r3, r3, r1
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195a:	193b      	adds	r3, r7, r4
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	193b      	adds	r3, r7, r4
 8001960:	3201      	adds	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d3a1      	bcc.n	80018b6 <HAL_PCD_Init+0x11a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681c      	ldr	r4, [r3, #0]
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	466b      	mov	r3, sp
 800197a:	001a      	movs	r2, r3
 800197c:	0003      	movs	r3, r0
 800197e:	3310      	adds	r3, #16
 8001980:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001982:	c262      	stmia	r2!, {r1, r5, r6}
 8001984:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001986:	c262      	stmia	r2!, {r1, r5, r6}
 8001988:	cb62      	ldmia	r3!, {r1, r5, r6}
 800198a:	c262      	stmia	r2!, {r1, r5, r6}
 800198c:	6841      	ldr	r1, [r0, #4]
 800198e:	6882      	ldr	r2, [r0, #8]
 8001990:	68c3      	ldr	r3, [r0, #12]
 8001992:	0020      	movs	r0, r4
 8001994:	f003 fab2 	bl	8004efc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2234      	movs	r2, #52	; 0x34
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_PCD_Init+0x228>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d103      	bne.n	80019b8 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f001 fa98 	bl	8002ee8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b005      	add	sp, #20
 80019c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	000002b9 	.word	0x000002b9

080019c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	23ae      	movs	r3, #174	; 0xae
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_Start+0x18>
 80019dc:	2302      	movs	r3, #2
 80019de:	e014      	b.n	8001a0a <HAL_PCD_Start+0x42>
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	23ae      	movs	r3, #174	; 0xae
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	2101      	movs	r1, #1
 80019e8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f003 fa3e 	bl	8004e70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f005 f902 	bl	8006c02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	23ae      	movs	r3, #174	; 0xae
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	2100      	movs	r1, #0
 8001a06:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f005 f8fe 	bl	8006c22 <USB_ReadInterrupts>
 8001a26:	0002      	movs	r2, r0
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d103      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 fb83 	bl	8002144 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f005 f8ed 	bl	8006c22 <USB_ReadInterrupts>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d110      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4986      	ldr	r1, [pc, #536]	; (8001c7c <HAL_PCD_IRQHandler+0x268>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f007 fee1 	bl	8009832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2100      	movs	r1, #0
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 f911 	bl	8001c9c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f005 f8cf 	bl	8006c22 <USB_ReadInterrupts>
 8001a84:	0002      	movs	r2, r0
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	01db      	lsls	r3, r3, #7
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d107      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4978      	ldr	r1, [pc, #480]	; (8001c80 <HAL_PCD_IRQHandler+0x26c>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f005 f8ba 	bl	8006c22 <USB_ReadInterrupts>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d107      	bne.n	8001ace <HAL_PCD_IRQHandler+0xba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	496e      	ldr	r1, [pc, #440]	; (8001c84 <HAL_PCD_IRQHandler+0x270>)
 8001aca:	400a      	ands	r2, r1
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f005 f8a5 	bl	8006c22 <USB_ReadInterrupts>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	401a      	ands	r2, r3
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d12b      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x12c>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2104      	movs	r1, #4
 8001af4:	438a      	bics	r2, r1
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2108      	movs	r1, #8
 8001b04:	438a      	bics	r2, r1
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	23bc      	movs	r3, #188	; 0xbc
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d109      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x114>
    {
      hpcd->LPM_State = LPM_L0;
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	23bc      	movs	r3, #188	; 0xbc
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f008 f908 	bl	8009d38 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f007 fec4 	bl	80098b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4953      	ldr	r1, [pc, #332]	; (8001c88 <HAL_PCD_IRQHandler+0x274>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0018      	movs	r0, r3
 8001b46:	f005 f86c 	bl	8006c22 <USB_ReadInterrupts>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	401a      	ands	r2, r3
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d11b      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x17e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2108      	movs	r1, #8
 8001b66:	430a      	orrs	r2, r1
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4945      	ldr	r1, [pc, #276]	; (8001c8c <HAL_PCD_IRQHandler+0x278>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2104      	movs	r1, #4
 8001b86:	430a      	orrs	r2, r1
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f007 fe77 	bl	8009880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f005 f843 	bl	8006c22 <USB_ReadInterrupts>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b80      	cmp	r3, #128	; 0x80
 8001ba4:	d137      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x202>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4937      	ldr	r1, [pc, #220]	; (8001c90 <HAL_PCD_IRQHandler+0x27c>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	23bc      	movs	r3, #188	; 0xbc
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d125      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x1fa>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2104      	movs	r1, #4
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2108      	movs	r1, #8
 8001bde:	430a      	orrs	r2, r1
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	23bc      	movs	r3, #188	; 0xbc
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	2101      	movs	r1, #1
 8001bea:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	223c      	movs	r2, #60	; 0x3c
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	23bd      	movs	r3, #189	; 0xbd
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2101      	movs	r1, #1
 8001c06:	0018      	movs	r0, r3
 8001c08:	f008 f896 	bl	8009d38 <HAL_PCDEx_LPM_Callback>
 8001c0c:	e003      	b.n	8001c16 <HAL_PCD_IRQHandler+0x202>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f007 fe35 	bl	8009880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f005 f801 	bl	8006c22 <USB_ReadInterrupts>
 8001c20:	0002      	movs	r2, r0
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	401a      	ands	r2, r3
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10b      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x234>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4916      	ldr	r1, [pc, #88]	; (8001c94 <HAL_PCD_IRQHandler+0x280>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0018      	movs	r0, r3
 8001c44:	f007 fde6 	bl	8009814 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f004 ffe8 	bl	8006c22 <USB_ReadInterrupts>
 8001c52:	0002      	movs	r2, r0
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	401a      	ands	r2, r3
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d107      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	490a      	ldr	r1, [pc, #40]	; (8001c98 <HAL_PCD_IRQHandler+0x284>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	0000fbff 	.word	0x0000fbff
 8001c80:	0000bfff 	.word	0x0000bfff
 8001c84:	0000dfff 	.word	0x0000dfff
 8001c88:	0000efff 	.word	0x0000efff
 8001c8c:	0000f7ff 	.word	0x0000f7ff
 8001c90:	0000ff7f 	.word	0x0000ff7f
 8001c94:	0000fdff 	.word	0x0000fdff
 8001c98:	0000feff 	.word	0x0000feff

08001c9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	1cfb      	adds	r3, r7, #3
 8001ca8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	23ae      	movs	r3, #174	; 0xae
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_SetAddress+0x1e>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e017      	b.n	8001cea <HAL_PCD_SetAddress+0x4e>
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	23ae      	movs	r3, #174	; 0xae
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	1cfa      	adds	r2, r7, #3
 8001cc8:	2134      	movs	r1, #52	; 0x34
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	1cfb      	adds	r3, r7, #3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	0010      	movs	r0, r2
 8001cda:	f004 ff7f 	bl	8006bdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	23ae      	movs	r3, #174	; 0xae
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cf2:	b590      	push	{r4, r7, lr}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	000c      	movs	r4, r1
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	1cfb      	adds	r3, r7, #3
 8001d02:	1c22      	adds	r2, r4, #0
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	003b      	movs	r3, r7
 8001d08:	1c02      	adds	r2, r0, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	1cbb      	adds	r3, r7, #2
 8001d0e:	1c0a      	adds	r2, r1, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d12:	230b      	movs	r3, #11
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d1a:	1cfb      	adds	r3, r7, #3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da0f      	bge.n	8001d44 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	1cfb      	adds	r3, r7, #3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2207      	movs	r2, #7
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	189b      	adds	r3, r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	3338      	adds	r3, #56	; 0x38
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	705a      	strb	r2, [r3, #1]
 8001d42:	e00f      	b.n	8001d64 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d44:	1cfb      	adds	r3, r7, #3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2207      	movs	r2, #7
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	3379      	adds	r3, #121	; 0x79
 8001d56:	33ff      	adds	r3, #255	; 0xff
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	18d3      	adds	r3, r2, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d64:	1cfb      	adds	r3, r7, #3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d72:	003b      	movs	r3, r7
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1cba      	adds	r2, r7, #2
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d94:	1cbb      	adds	r3, r7, #2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	23ae      	movs	r3, #174	; 0xae
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_PCD_EP_Open+0xc0>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e013      	b.n	8001dda <HAL_PCD_EP_Open+0xe8>
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	23ae      	movs	r3, #174	; 0xae
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	2101      	movs	r1, #1
 8001dba:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f003 f8c7 	bl	8004f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	23ae      	movs	r3, #174	; 0xae
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001dd4:	230b      	movs	r3, #11
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b005      	add	sp, #20
 8001de0:	bd90      	pop	{r4, r7, pc}

08001de2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	000a      	movs	r2, r1
 8001dec:	1cfb      	adds	r3, r7, #3
 8001dee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df0:	1cfb      	adds	r3, r7, #3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	da0f      	bge.n	8001e1a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfa:	1cfb      	adds	r3, r7, #3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2207      	movs	r2, #7
 8001e00:	401a      	ands	r2, r3
 8001e02:	0013      	movs	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	3338      	adds	r3, #56	; 0x38
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	705a      	strb	r2, [r3, #1]
 8001e18:	e00f      	b.n	8001e3a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1a:	1cfb      	adds	r3, r7, #3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2207      	movs	r2, #7
 8001e20:	401a      	ands	r2, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	189b      	adds	r3, r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	3379      	adds	r3, #121	; 0x79
 8001e2c:	33ff      	adds	r3, #255	; 0xff
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e3a:	1cfb      	adds	r3, r7, #3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	23ae      	movs	r3, #174	; 0xae
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_EP_Close+0x76>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e011      	b.n	8001e7c <HAL_PCD_EP_Close+0x9a>
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	23ae      	movs	r3, #174	; 0xae
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	2101      	movs	r1, #1
 8001e60:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f003 fb84 	bl	8005578 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	23ae      	movs	r3, #174	; 0xae
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	2100      	movs	r1, #0
 8001e78:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	200b      	movs	r0, #11
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	1c0a      	adds	r2, r1, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e98:	0001      	movs	r1, r0
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	189b      	adds	r3, r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	3379      	adds	r3, #121	; 0x79
 8001eac:	33ff      	adds	r3, #255	; 0xff
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d107      	bne.n	8001ef4 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	0011      	movs	r1, r2
 8001eec:	0018      	movs	r0, r3
 8001eee:	f003 fca9 	bl	8005844 <USB_EPStartXfer>
 8001ef2:	e006      	b.n	8001f02 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	0011      	movs	r1, r2
 8001efc:	0018      	movs	r0, r3
 8001efe:	f003 fca1 	bl	8005844 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b006      	add	sp, #24
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	000a      	movs	r2, r1
 8001f16:	1cfb      	adds	r3, r7, #3
 8001f18:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f1a:	1cfb      	adds	r3, r7, #3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	401a      	ands	r2, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	23ca      	movs	r3, #202	; 0xca
 8001f26:	0059      	lsls	r1, r3, #1
 8001f28:	0013      	movs	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	189b      	adds	r3, r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	18c3      	adds	r3, r0, r3
 8001f32:	185b      	adds	r3, r3, r1
 8001f34:	681b      	ldr	r3, [r3, #0]
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	200b      	movs	r0, #11
 8001f4c:	183b      	adds	r3, r7, r0
 8001f4e:	1c0a      	adds	r2, r1, #0
 8001f50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	183b      	adds	r3, r7, r0
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2207      	movs	r2, #7
 8001f58:	401a      	ands	r2, r3
 8001f5a:	0013      	movs	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	189b      	adds	r3, r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	3338      	adds	r3, #56	; 0x38
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	18d3      	adds	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2224      	movs	r2, #36	; 0x24
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f90:	183b      	adds	r3, r7, r0
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9e:	183b      	adds	r3, r7, r0
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d107      	bne.n	8001fb8 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f003 fc47 	bl	8005844 <USB_EPStartXfer>
 8001fb6:	e006      	b.n	8001fc6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f003 fc3f 	bl	8005844 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	000a      	movs	r2, r1
 8001fda:	1cfb      	adds	r3, r7, #3
 8001fdc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fde:	1cfb      	adds	r3, r7, #3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	401a      	ands	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d901      	bls.n	8001ff2 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e046      	b.n	8002080 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ff2:	1cfb      	adds	r3, r7, #3
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da0f      	bge.n	800201c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	1cfb      	adds	r3, r7, #3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2207      	movs	r2, #7
 8002002:	401a      	ands	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	189b      	adds	r3, r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	3338      	adds	r3, #56	; 0x38
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	705a      	strb	r2, [r3, #1]
 800201a:	e00d      	b.n	8002038 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800201c:	1cfb      	adds	r3, r7, #3
 800201e:	781a      	ldrb	r2, [r3, #0]
 8002020:	0013      	movs	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	189b      	adds	r3, r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	3379      	adds	r3, #121	; 0x79
 800202a:	33ff      	adds	r3, #255	; 0xff
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203e:	1cfb      	adds	r3, r7, #3
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2207      	movs	r2, #7
 8002044:	4013      	ands	r3, r2
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	23ae      	movs	r3, #174	; 0xae
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_PCD_EP_SetStall+0x8c>
 8002058:	2302      	movs	r3, #2
 800205a:	e011      	b.n	8002080 <HAL_PCD_EP_SetStall+0xb0>
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	23ae      	movs	r3, #174	; 0xae
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	2101      	movs	r1, #1
 8002064:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	0011      	movs	r1, r2
 800206e:	0018      	movs	r0, r3
 8002070:	f004 fce0 	bl	8006a34 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	23ae      	movs	r3, #174	; 0xae
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	2100      	movs	r1, #0
 800207c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	000a      	movs	r2, r1
 8002092:	1cfb      	adds	r3, r7, #3
 8002094:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002096:	1cfb      	adds	r3, r7, #3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	220f      	movs	r2, #15
 800209c:	401a      	ands	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d901      	bls.n	80020aa <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e048      	b.n	800213c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020aa:	1cfb      	adds	r3, r7, #3
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da0f      	bge.n	80020d4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b4:	1cfb      	adds	r3, r7, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2207      	movs	r2, #7
 80020ba:	401a      	ands	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	189b      	adds	r3, r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	705a      	strb	r2, [r3, #1]
 80020d2:	e00f      	b.n	80020f4 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	1cfb      	adds	r3, r7, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2207      	movs	r2, #7
 80020da:	401a      	ands	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	3379      	adds	r3, #121	; 0x79
 80020e6:	33ff      	adds	r3, #255	; 0xff
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	18d3      	adds	r3, r2, r3
 80020ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fa:	1cfb      	adds	r3, r7, #3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2207      	movs	r2, #7
 8002100:	4013      	ands	r3, r2
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	23ae      	movs	r3, #174	; 0xae
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_PCD_EP_ClrStall+0x90>
 8002114:	2302      	movs	r3, #2
 8002116:	e011      	b.n	800213c <HAL_PCD_EP_ClrStall+0xb4>
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	23ae      	movs	r3, #174	; 0xae
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	2101      	movs	r1, #1
 8002120:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f004 fcc4 	bl	8006ab8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	23ae      	movs	r3, #174	; 0xae
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	2100      	movs	r1, #0
 8002138:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}

08002144 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b091      	sub	sp, #68	; 0x44
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800214c:	e2ab      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002154:	2036      	movs	r0, #54	; 0x36
 8002156:	183b      	adds	r3, r7, r0
 8002158:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800215a:	183b      	adds	r3, r7, r0
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	2435      	movs	r4, #53	; 0x35
 8002162:	193b      	adds	r3, r7, r4
 8002164:	210f      	movs	r1, #15
 8002166:	400a      	ands	r2, r1
 8002168:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800216a:	193b      	adds	r3, r7, r4
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d000      	beq.n	8002174 <PCD_EP_ISR_Handler+0x30>
 8002172:	e11d      	b.n	80023b0 <PCD_EP_ISR_Handler+0x26c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002174:	183b      	adds	r3, r7, r0
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	2210      	movs	r2, #16
 800217a:	4013      	ands	r3, r2
 800217c:	d143      	bne.n	8002206 <PCD_EP_ISR_Handler+0xc2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4add      	ldr	r2, [pc, #884]	; (80024fc <PCD_EP_ISR_Handler+0x3b8>)
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	0209      	lsls	r1, r1, #8
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3338      	adds	r3, #56	; 0x38
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4ad6      	ldr	r2, [pc, #856]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 80021a6:	4694      	mov	ip, r2
 80021a8:	4463      	add	r3, ip
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	059b      	lsls	r3, r3, #22
 80021b0:	0d9a      	lsrs	r2, r3, #22
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	18d2      	adds	r2, r2, r3
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2100      	movs	r1, #0
 80021c8:	0018      	movs	r0, r3
 80021ca:	f007 fb05 	bl	80097d8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2234      	movs	r2, #52	; 0x34
 80021d2:	5c9b      	ldrb	r3, [r3, r2]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <PCD_EP_ISR_Handler+0x98>
 80021da:	e264      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d000      	beq.n	80021e6 <PCD_EP_ISR_Handler+0xa2>
 80021e4:	e25f      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2234      	movs	r2, #52	; 0x34
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	4252      	negs	r2, r2
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2234      	movs	r2, #52	; 0x34
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]
 8002204:	e24f      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3379      	adds	r3, #121	; 0x79
 800220a:	33ff      	adds	r3, #255	; 0xff
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2132      	movs	r1, #50	; 0x32
 8002216:	187b      	adds	r3, r7, r1
 8002218:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800221a:	187b      	adds	r3, r7, r1
 800221c:	881a      	ldrh	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4013      	ands	r3, r2
 8002224:	d029      	beq.n	800227a <PCD_EP_ISR_Handler+0x136>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4ab4      	ldr	r2, [pc, #720]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 800222e:	4694      	mov	ip, r2
 8002230:	4463      	add	r3, ip
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	059b      	lsls	r3, r3, #22
 8002238:	0d9a      	lsrs	r2, r3, #22
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	22b0      	movs	r2, #176	; 0xb0
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	1899      	adds	r1, r3, r2
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002252:	b29b      	uxth	r3, r3
 8002254:	f004 fd6a 	bl	8006d2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4aa9      	ldr	r2, [pc, #676]	; (8002504 <PCD_EP_ISR_Handler+0x3c0>)
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0018      	movs	r0, r3
 8002274:	f007 fa7a 	bl	800976c <HAL_PCD_SetupStageCallback>
 8002278:	e215      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800227a:	2332      	movs	r3, #50	; 0x32
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	2200      	movs	r2, #0
 8002280:	5e9b      	ldrsh	r3, [r3, r2]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db00      	blt.n	8002288 <PCD_EP_ISR_Handler+0x144>
 8002286:	e20e      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a9d      	ldr	r2, [pc, #628]	; (8002504 <PCD_EP_ISR_Handler+0x3c0>)
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4a96      	ldr	r2, [pc, #600]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 80022a8:	4694      	mov	ip, r2
 80022aa:	4463      	add	r3, ip
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	059b      	lsls	r3, r3, #22
 80022b2:	0d9a      	lsrs	r2, r3, #22
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01a      	beq.n	80022f6 <PCD_EP_ISR_Handler+0x1b2>
 80022c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d016      	beq.n	80022f6 <PCD_EP_ISR_Handler+0x1b2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	6959      	ldr	r1, [r3, #20]
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f004 fd27 	bl	8006d2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	18d2      	adds	r2, r2, r3
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2100      	movs	r1, #0
 80022f0:	0018      	movs	r0, r3
 80022f2:	f007 fa50 	bl	8009796 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022f6:	4b82      	ldr	r3, [pc, #520]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4b81      	ldr	r3, [pc, #516]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 80022fc:	0412      	lsls	r2, r2, #16
 80022fe:	0c12      	lsrs	r2, r2, #16
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <PCD_EP_ISR_Handler+0x1e2>
 800230a:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4b7c      	ldr	r3, [pc, #496]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 8002310:	497d      	ldr	r1, [pc, #500]	; (8002508 <PCD_EP_ISR_Handler+0x3c4>)
 8002312:	400a      	ands	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	4b7a      	ldr	r3, [pc, #488]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4b79      	ldr	r3, [pc, #484]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0609      	lsls	r1, r1, #24
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	e02d      	b.n	8002382 <PCD_EP_ISR_Handler+0x23e>
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b3e      	cmp	r3, #62	; 0x3e
 800232c:	d813      	bhi.n	8002356 <PCD_EP_ISR_Handler+0x212>
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	085b      	lsrs	r3, r3, #1
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d002      	beq.n	8002346 <PCD_EP_ISR_Handler+0x202>
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	3301      	adds	r3, #1
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
 8002346:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234c:	069a      	lsls	r2, r3, #26
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	e015      	b.n	8002382 <PCD_EP_ISR_Handler+0x23e>
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	221f      	movs	r2, #31
 8002364:	4013      	ands	r3, r2
 8002366:	d102      	bne.n	800236e <PCD_EP_ISR_Handler+0x22a>
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	3b01      	subs	r3, #1
 800236c:	63bb      	str	r3, [r7, #56]	; 0x38
 800236e:	4b64      	ldr	r3, [pc, #400]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	069b      	lsls	r3, r3, #26
 8002376:	431a      	orrs	r2, r3
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0609      	lsls	r1, r1, #24
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a60      	ldr	r2, [pc, #384]	; (800250c <PCD_EP_ISR_Handler+0x3c8>)
 800238a:	4013      	ands	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	0152      	lsls	r2, r2, #5
 8002394:	4053      	eors	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	0192      	lsls	r2, r2, #6
 800239e:	4053      	eors	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4959      	ldr	r1, [pc, #356]	; (8002510 <PCD_EP_ISR_Handler+0x3cc>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e17a      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	001a      	movs	r2, r3
 80023b6:	2135      	movs	r1, #53	; 0x35
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	18d3      	adds	r3, r2, r3
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	2032      	movs	r0, #50	; 0x32
 80023c4:	183b      	adds	r3, r7, r0
 80023c6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	2200      	movs	r2, #0
 80023cc:	5e9b      	ldrsh	r3, [r3, r2]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db00      	blt.n	80023d4 <PCD_EP_ISR_Handler+0x290>
 80023d2:	e0e7      	b.n	80025a4 <PCD_EP_ISR_Handler+0x460>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	001a      	movs	r2, r3
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	18d3      	adds	r3, r2, r3
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a47      	ldr	r2, [pc, #284]	; (8002504 <PCD_EP_ISR_Handler+0x3c0>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	001a      	movs	r2, r3
 80023f0:	0008      	movs	r0, r1
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	18d3      	adds	r3, r2, r3
 80023fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002402:	183b      	adds	r3, r7, r0
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	0013      	movs	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	189b      	adds	r3, r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	3379      	adds	r3, #121	; 0x79
 8002410:	33ff      	adds	r3, #255	; 0xff
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	18d3      	adds	r3, r2, r3
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	7a9b      	ldrb	r3, [r3, #10]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11d      	bne.n	800245c <PCD_EP_ISR_Handler+0x318>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4a36      	ldr	r2, [pc, #216]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 8002428:	4694      	mov	ip, r2
 800242a:	4463      	add	r3, ip
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	b29a      	uxth	r2, r3
 8002432:	243e      	movs	r4, #62	; 0x3e
 8002434:	193b      	adds	r3, r7, r4
 8002436:	0592      	lsls	r2, r2, #22
 8002438:	0d92      	lsrs	r2, r2, #22
 800243a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800243c:	193b      	adds	r3, r7, r4
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d100      	bne.n	8002446 <PCD_EP_ISR_Handler+0x302>
 8002444:	e086      	b.n	8002554 <PCD_EP_ISR_Handler+0x410>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	6959      	ldr	r1, [r3, #20]
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	889a      	ldrh	r2, [r3, #4]
 8002452:	193b      	adds	r3, r7, r4
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f004 fc69 	bl	8006d2c <USB_ReadPMA>
 800245a:	e07b      	b.n	8002554 <PCD_EP_ISR_Handler+0x410>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	78db      	ldrb	r3, [r3, #3]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d10c      	bne.n	800247e <PCD_EP_ISR_Handler+0x33a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002464:	233e      	movs	r3, #62	; 0x3e
 8002466:	18fc      	adds	r4, r7, r3
 8002468:	2332      	movs	r3, #50	; 0x32
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	881a      	ldrh	r2, [r3, #0]
 800246e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 f928 	bl	80026c8 <HAL_PCD_EP_DB_Receive>
 8002478:	0003      	movs	r3, r0
 800247a:	8023      	strh	r3, [r4, #0]
 800247c:	e06a      	b.n	8002554 <PCD_EP_ISR_Handler+0x410>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	001a      	movs	r2, r3
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	18d3      	adds	r3, r2, r3
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <PCD_EP_ISR_Handler+0x3d0>)
 8002490:	4013      	ands	r3, r2
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	001a      	movs	r2, r3
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	18d3      	adds	r3, r2, r3
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	491c      	ldr	r1, [pc, #112]	; (8002518 <PCD_EP_ISR_Handler+0x3d4>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	001a      	movs	r2, r3
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	18d3      	adds	r3, r2, r3
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	01db      	lsls	r3, r3, #7
 80024be:	4013      	ands	r3, r2
 80024c0:	d02c      	beq.n	800251c <PCD_EP_ISR_Handler+0x3d8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <PCD_EP_ISR_Handler+0x3bc>)
 80024ca:	4694      	mov	ip, r2
 80024cc:	4463      	add	r3, ip
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	243e      	movs	r4, #62	; 0x3e
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	0592      	lsls	r2, r2, #22
 80024da:	0d92      	lsrs	r2, r2, #22
 80024dc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d036      	beq.n	8002554 <PCD_EP_ISR_Handler+0x410>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	6959      	ldr	r1, [r3, #20]
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	88da      	ldrh	r2, [r3, #6]
 80024f2:	193b      	adds	r3, r7, r4
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	f004 fc19 	bl	8006d2c <USB_ReadPMA>
 80024fa:	e02b      	b.n	8002554 <PCD_EP_ISR_Handler+0x410>
 80024fc:	077f8f0f 	.word	0x077f8f0f
 8002500:	40009800 	.word	0x40009800
 8002504:	077f0f8f 	.word	0x077f0f8f
 8002508:	83ffffff 	.word	0x83ffffff
 800250c:	077fbf8f 	.word	0x077fbf8f
 8002510:	00008080 	.word	0x00008080
 8002514:	077f8f8f 	.word	0x077f8f8f
 8002518:	000080c0 	.word	0x000080c0
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4a67      	ldr	r2, [pc, #412]	; (80026c0 <PCD_EP_ISR_Handler+0x57c>)
 8002524:	4694      	mov	ip, r2
 8002526:	4463      	add	r3, ip
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	b29a      	uxth	r2, r3
 800252e:	243e      	movs	r4, #62	; 0x3e
 8002530:	193b      	adds	r3, r7, r4
 8002532:	0592      	lsls	r2, r2, #22
 8002534:	0d92      	lsrs	r2, r2, #22
 8002536:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002538:	193b      	adds	r3, r7, r4
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <PCD_EP_ISR_Handler+0x410>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	6959      	ldr	r1, [r3, #20]
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	891a      	ldrh	r2, [r3, #8]
 800254c:	193b      	adds	r3, r7, r4
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f004 fbec 	bl	8006d2c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	213e      	movs	r1, #62	; 0x3e
 800255a:	187b      	adds	r3, r7, r1
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	18d2      	adds	r2, r2, r3
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	187b      	adds	r3, r7, r1
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	18d2      	adds	r2, r2, r3
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <PCD_EP_ISR_Handler+0x442>
 800257a:	187b      	adds	r3, r7, r1
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	429a      	cmp	r2, r3
 8002584:	d207      	bcs.n	8002596 <PCD_EP_ISR_Handler+0x452>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0011      	movs	r1, r2
 800258e:	0018      	movs	r0, r3
 8002590:	f007 f901 	bl	8009796 <HAL_PCD_DataOutStageCallback>
 8002594:	e006      	b.n	80025a4 <PCD_EP_ISR_Handler+0x460>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f003 f950 	bl	8005844 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80025a4:	2032      	movs	r0, #50	; 0x32
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	4013      	ands	r3, r2
 80025ae:	d100      	bne.n	80025b2 <PCD_EP_ISR_Handler+0x46e>
 80025b0:	e079      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
      {
        ep = &hpcd->IN_ep[epindex];
 80025b2:	2135      	movs	r1, #53	; 0x35
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	0013      	movs	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	189b      	adds	r3, r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3338      	adds	r3, #56	; 0x38
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	001a      	movs	r2, r3
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3a      	ldr	r2, [pc, #232]	; (80026c4 <PCD_EP_ISR_Handler+0x580>)
 80025da:	4013      	ands	r3, r2
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	001a      	movs	r2, r3
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	6a3a      	ldr	r2, [r7, #32]
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	0209      	lsls	r1, r1, #8
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	78db      	ldrb	r3, [r3, #3]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d109      	bne.n	8002612 <PCD_EP_ISR_Handler+0x4ce>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002602:	2b02      	cmp	r3, #2
 8002604:	d147      	bne.n	8002696 <PCD_EP_ISR_Handler+0x552>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002606:	183b      	adds	r3, r7, r0
 8002608:	881a      	ldrh	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d141      	bne.n	8002696 <PCD_EP_ISR_Handler+0x552>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <PCD_EP_ISR_Handler+0x57c>)
 800261a:	4694      	mov	ip, r2
 800261c:	4463      	add	r3, ip
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	b29a      	uxth	r2, r3
 8002624:	211e      	movs	r1, #30
 8002626:	187b      	adds	r3, r7, r1
 8002628:	0592      	lsls	r2, r2, #22
 800262a:	0d92      	lsrs	r2, r2, #22
 800262c:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	187b      	adds	r3, r7, r1
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d907      	bls.n	800264a <PCD_EP_ISR_Handler+0x506>
          {
            ep->xfer_len -= TxByteNbre;
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	187b      	adds	r3, r7, r1
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	619a      	str	r2, [r3, #24]
 8002648:	e002      	b.n	8002650 <PCD_EP_ISR_Handler+0x50c>
          }
          else
          {
            ep->xfer_len = 0U;
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <PCD_EP_ISR_Handler+0x524>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0011      	movs	r1, r2
 8002660:	0018      	movs	r0, r3
 8002662:	f007 f8b9 	bl	80097d8 <HAL_PCD_DataInStageCallback>
 8002666:	e01e      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	211e      	movs	r1, #30
 800266e:	187b      	adds	r3, r7, r1
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	18d2      	adds	r2, r2, r3
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	187b      	adds	r3, r7, r1
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	18d2      	adds	r2, r2, r3
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800268c:	0011      	movs	r1, r2
 800268e:	0018      	movs	r0, r3
 8002690:	f003 f8d8 	bl	8005844 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002694:	e007      	b.n	80026a6 <PCD_EP_ISR_Handler+0x562>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002696:	2332      	movs	r3, #50	; 0x32
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f901 	bl	80028a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4013      	ands	r3, r2
 80026b2:	d000      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x572>
 80026b4:	e54b      	b.n	800214e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b011      	add	sp, #68	; 0x44
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	40009800 	.word	0x40009800
 80026c4:	077f8f0f 	.word	0x077f8f0f

080026c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	1dbb      	adds	r3, r7, #6
 80026d4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026d6:	1dbb      	adds	r3, r7, #6
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	01db      	lsls	r3, r3, #7
 80026de:	4013      	ands	r3, r2
 80026e0:	d069      	beq.n	80027b6 <HAL_PCD_EP_DB_Receive+0xee>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80026ea:	4694      	mov	ip, r2
 80026ec:	4463      	add	r3, ip
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	211e      	movs	r1, #30
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	0592      	lsls	r2, r2, #22
 80026fa:	0d92      	lsrs	r2, r2, #22
 80026fc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	187b      	adds	r3, r7, r1
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d307      	bcc.n	800271a <HAL_PCD_EP_DB_Receive+0x52>
    {
      ep->xfer_len -= count;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	187b      	adds	r3, r7, r1
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	1ad2      	subs	r2, r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	619a      	str	r2, [r3, #24]
 8002718:	e002      	b.n	8002720 <HAL_PCD_EP_DB_Receive+0x58>
    }
    else
    {
      ep->xfer_len = 0U;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11a      	bne.n	800275e <HAL_PCD_EP_DB_Receive+0x96>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	0192      	lsls	r2, r2, #6
 8002744:	4053      	eors	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4950      	ldr	r1, [pc, #320]	; (800289c <HAL_PCD_EP_DB_Receive+0x1d4>)
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800275e:	1dbb      	adds	r3, r7, #6
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	4013      	ands	r3, r2
 8002766:	d015      	beq.n	8002794 <HAL_PCD_EP_DB_Receive+0xcc>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	001a      	movs	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_PCD_EP_DB_Receive+0x1d8>)
 800277a:	4013      	ands	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	001a      	movs	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	18d3      	adds	r3, r2, r3
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4945      	ldr	r1, [pc, #276]	; (80028a4 <HAL_PCD_EP_DB_Receive+0x1dc>)
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8002794:	241e      	movs	r4, #30
 8002796:	193b      	adds	r3, r7, r4
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d100      	bne.n	80027a0 <HAL_PCD_EP_DB_Receive+0xd8>
 800279e:	e072      	b.n	8002886 <HAL_PCD_EP_DB_Receive+0x1be>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6959      	ldr	r1, [r3, #20]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	88da      	ldrh	r2, [r3, #6]
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	f004 fabc 	bl	8006d2c <USB_ReadPMA>
 80027b4:	e067      	b.n	8002886 <HAL_PCD_EP_DB_Receive+0x1be>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4a35      	ldr	r2, [pc, #212]	; (8002894 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80027be:	4694      	mov	ip, r2
 80027c0:	4463      	add	r3, ip
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0c1b      	lsrs	r3, r3, #16
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	211e      	movs	r1, #30
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	0592      	lsls	r2, r2, #22
 80027ce:	0d92      	lsrs	r2, r2, #22
 80027d0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d307      	bcc.n	80027ee <HAL_PCD_EP_DB_Receive+0x126>
    {
      ep->xfer_len -= count;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	1ad2      	subs	r2, r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	619a      	str	r2, [r3, #24]
 80027ec:	e002      	b.n	80027f4 <HAL_PCD_EP_DB_Receive+0x12c>
    }
    else
    {
      ep->xfer_len = 0U;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d11a      	bne.n	8002832 <HAL_PCD_EP_DB_Receive+0x16a>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	001a      	movs	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	18d3      	adds	r3, r2, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800280e:	4013      	ands	r3, r2
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	0192      	lsls	r2, r2, #6
 8002818:	4053      	eors	r3, r2
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	001a      	movs	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282c:	491b      	ldr	r1, [pc, #108]	; (800289c <HAL_PCD_EP_DB_Receive+0x1d4>)
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002832:	1dbb      	adds	r3, r7, #6
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	4013      	ands	r3, r2
 800283a:	d115      	bne.n	8002868 <HAL_PCD_EP_DB_Receive+0x1a0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	001a      	movs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_PCD_EP_DB_Receive+0x1d8>)
 800284e:	4013      	ands	r3, r2
 8002850:	623b      	str	r3, [r7, #32]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	001a      	movs	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	4910      	ldr	r1, [pc, #64]	; (80028a4 <HAL_PCD_EP_DB_Receive+0x1dc>)
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8002868:	241e      	movs	r4, #30
 800286a:	193b      	adds	r3, r7, r4
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_PCD_EP_DB_Receive+0x1be>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6959      	ldr	r1, [r3, #20]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	891a      	ldrh	r2, [r3, #8]
 800287e:	193b      	adds	r3, r7, r4
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f004 fa53 	bl	8006d2c <USB_ReadPMA>
    }
  }

  return count;
 8002886:	231e      	movs	r3, #30
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	881b      	ldrh	r3, [r3, #0]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b00b      	add	sp, #44	; 0x2c
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	40009800 	.word	0x40009800
 8002898:	077fbf8f 	.word	0x077fbf8f
 800289c:	00008080 	.word	0x00008080
 80028a0:	077f8f8f 	.word	0x077f8f8f
 80028a4:	000080c0 	.word	0x000080c0

080028a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	; 0x38
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	1dbb      	adds	r3, r7, #6
 80028b4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	4013      	ands	r3, r2
 80028be:	d100      	bne.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80028c0:	e146      	b.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x2a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4ac5      	ldr	r2, [pc, #788]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 80028ca:	4694      	mov	ip, r2
 80028cc:	4463      	add	r3, ip
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	2132      	movs	r1, #50	; 0x32
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	0592      	lsls	r2, r2, #22
 80028da:	0d92      	lsrs	r2, r2, #22
 80028dc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d907      	bls.n	80028fa <HAL_PCD_EP_DB_Transmit+0x52>
    {
      ep->xfer_len -= TxByteNbre;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	1ad2      	subs	r2, r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	619a      	str	r2, [r3, #24]
 80028f8:	e002      	b.n	8002900 <HAL_PCD_EP_DB_Transmit+0x58>
    }
    else
    {
      ep->xfer_len = 0U;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d124      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0xaa>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f006 ff61 	bl	80097d8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002916:	1dbb      	adds	r3, r7, #6
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	01db      	lsls	r3, r3, #7
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x7c>
 8002922:	e263      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	001a      	movs	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	18d3      	adds	r3, r2, r3
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4aab      	ldr	r2, [pc, #684]	; (8002be4 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	001a      	movs	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	18d3      	adds	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	49a7      	ldr	r1, [pc, #668]	; (8002be8 <HAL_PCD_EP_DB_Transmit+0x340>)
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e24c      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002952:	1dbb      	adds	r3, r7, #6
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	01db      	lsls	r3, r3, #7
 800295a:	4013      	ands	r3, r2
 800295c:	d015      	beq.n	800298a <HAL_PCD_EP_DB_Transmit+0xe2>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	001a      	movs	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	18d3      	adds	r3, r2, r3
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a9d      	ldr	r2, [pc, #628]	; (8002be4 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8002970:	4013      	ands	r3, r2
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	001a      	movs	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002984:	4998      	ldr	r1, [pc, #608]	; (8002be8 <HAL_PCD_EP_DB_Transmit+0x340>)
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2224      	movs	r2, #36	; 0x24
 800298e:	5c9b      	ldrb	r3, [r3, r2]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d000      	beq.n	8002996 <HAL_PCD_EP_DB_Transmit+0xee>
 8002994:	e22a      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
      {
        ep->xfer_buff += TxByteNbre;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	2132      	movs	r1, #50	; 0x32
 800299c:	187b      	adds	r3, r7, r1
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	18d2      	adds	r2, r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	18d2      	adds	r2, r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d309      	bcc.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x12c>
        {
          len = ep->maxpacket;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db -= len;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	1ad2      	subs	r2, r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	621a      	str	r2, [r3, #32]
 80029d2:	e016      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x15a>
        }
        else if (ep->xfer_len_db == 0U)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x146>
        {
          len = TxByteNbre;
 80029dc:	2332      	movs	r3, #50	; 0x32
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_fill_db = 0U;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]
 80029ec:	e009      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x15a>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db = 0U;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d172      	bne.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x248>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4a73      	ldr	r2, [pc, #460]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a12:	4694      	mov	ip, r2
 8002a14:	4463      	add	r3, ip
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4970      	ldr	r1, [pc, #448]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a20:	468c      	mov	ip, r1
 8002a22:	4463      	add	r3, ip
 8002a24:	0412      	lsls	r2, r2, #16
 8002a26:	0c12      	lsrs	r2, r2, #16
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d121      	bne.n	8002a74 <HAL_PCD_EP_DB_Transmit+0x1cc>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4a6a      	ldr	r2, [pc, #424]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a38:	4694      	mov	ip, r2
 8002a3a:	4463      	add	r3, ip
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4966      	ldr	r1, [pc, #408]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a46:	468c      	mov	ip, r1
 8002a48:	4463      	add	r3, ip
 8002a4a:	4968      	ldr	r1, [pc, #416]	; (8002bec <HAL_PCD_EP_DB_Transmit+0x344>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4a62      	ldr	r2, [pc, #392]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a58:	4694      	mov	ip, r2
 8002a5a:	4463      	add	r3, ip
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	495e      	ldr	r1, [pc, #376]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a66:	468c      	mov	ip, r1
 8002a68:	4463      	add	r3, ip
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0609      	lsls	r1, r1, #24
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e062      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x292>
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	2b3e      	cmp	r3, #62	; 0x3e
 8002a78:	d81b      	bhi.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x20a>
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	2201      	movs	r2, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	d002      	beq.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x1e6>
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4a52      	ldr	r2, [pc, #328]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002a96:	4694      	mov	ip, r2
 8002a98:	4463      	add	r3, ip
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	069a      	lsls	r2, r3, #26
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	484e      	ldr	r0, [pc, #312]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002aa8:	4684      	mov	ip, r0
 8002aaa:	4463      	add	r3, ip
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e043      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x292>
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	221f      	movs	r2, #31
 8002abc:	4013      	ands	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x21e>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4a44      	ldr	r2, [pc, #272]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002ace:	4694      	mov	ip, r2
 8002ad0:	4463      	add	r3, ip
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	493f      	ldr	r1, [pc, #252]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002ae2:	468c      	mov	ip, r1
 8002ae4:	4463      	add	r3, ip
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0609      	lsls	r1, r1, #24
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e024      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x292>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d120      	bne.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x292>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b00:	4694      	mov	ip, r2
 8002b02:	4463      	add	r3, ip
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4934      	ldr	r1, [pc, #208]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b0e:	468c      	mov	ip, r1
 8002b10:	4463      	add	r3, ip
 8002b12:	0412      	lsls	r2, r2, #16
 8002b14:	0c12      	lsrs	r2, r2, #16
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b20:	4694      	mov	ip, r2
 8002b22:	4463      	add	r3, ip
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	482b      	ldr	r0, [pc, #172]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b32:	4684      	mov	ip, r0
 8002b34:	4463      	add	r3, ip
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6959      	ldr	r1, [r3, #20]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	88da      	ldrh	r2, [r3, #6]
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f004 f877 	bl	8006c3c <USB_WritePMA>
 8002b4e:	e14d      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_PCD_EP_DB_Transmit+0x338>)
 8002b58:	4694      	mov	ip, r2
 8002b5a:	4463      	add	r3, ip
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0c1b      	lsrs	r3, r3, #16
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	2132      	movs	r1, #50	; 0x32
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	0592      	lsls	r2, r2, #22
 8002b68:	0d92      	lsrs	r2, r2, #22
 8002b6a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d307      	bcc.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x2e0>
    {
      ep->xfer_len -= TxByteNbre;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e002      	b.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x2e6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d12c      	bne.n	8002bf0 <HAL_PCD_EP_DB_Transmit+0x348>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f006 fe1a 	bl	80097d8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ba4:	1dbb      	adds	r3, r7, #6
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	4013      	ands	r3, r2
 8002bae:	d000      	beq.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x30a>
 8002bb0:	e11c      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	18d3      	adds	r3, r2, r3
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_PCD_EP_DB_Transmit+0x33c>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	001a      	movs	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	18d3      	adds	r3, r2, r3
 8002bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_PCD_EP_DB_Transmit+0x340>)
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e105      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
 8002be0:	40009800 	.word	0x40009800
 8002be4:	077f8f8f 	.word	0x077f8f8f
 8002be8:	0000c080 	.word	0x0000c080
 8002bec:	83ffffff 	.word	0x83ffffff
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	881a      	ldrh	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d115      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x380>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	001a      	movs	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	18d3      	adds	r3, r2, r3
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a89      	ldr	r2, [pc, #548]	; (8002e34 <HAL_PCD_EP_DB_Transmit+0x58c>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	001a      	movs	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	18d3      	adds	r3, r2, r3
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	4985      	ldr	r1, [pc, #532]	; (8002e38 <HAL_PCD_EP_DB_Transmit+0x590>)
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d000      	beq.n	8002c34 <HAL_PCD_EP_DB_Transmit+0x38c>
 8002c32:	e0db      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x544>
      {
        ep->xfer_buff += TxByteNbre;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	2132      	movs	r1, #50	; 0x32
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	18d2      	adds	r2, r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	18d2      	adds	r2, r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d309      	bcc.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x3ca>
        {
          len = ep->maxpacket;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db -= len;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	621a      	str	r2, [r3, #32]
 8002c70:	e016      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x3f8>
        }
        else if (ep->xfer_len_db == 0U)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_PCD_EP_DB_Transmit+0x3e4>
        {
          len = TxByteNbre;
 8002c7a:	2332      	movs	r3, #50	; 0x32
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_fill_db = 0U;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2224      	movs	r2, #36	; 0x24
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]
 8002c8a:	e009      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x3f8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
          ep->xfer_len_db = 0U;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d172      	bne.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x4e6>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4a63      	ldr	r2, [pc, #396]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002cb0:	4694      	mov	ip, r2
 8002cb2:	4463      	add	r3, ip
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	495f      	ldr	r1, [pc, #380]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002cbe:	468c      	mov	ip, r1
 8002cc0:	4463      	add	r3, ip
 8002cc2:	0412      	lsls	r2, r2, #16
 8002cc4:	0c12      	lsrs	r2, r2, #16
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d121      	bne.n	8002d12 <HAL_PCD_EP_DB_Transmit+0x46a>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4a59      	ldr	r2, [pc, #356]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002cd6:	4694      	mov	ip, r2
 8002cd8:	4463      	add	r3, ip
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4956      	ldr	r1, [pc, #344]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002ce4:	468c      	mov	ip, r1
 8002ce6:	4463      	add	r3, ip
 8002ce8:	4955      	ldr	r1, [pc, #340]	; (8002e40 <HAL_PCD_EP_DB_Transmit+0x598>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4a51      	ldr	r2, [pc, #324]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002cf6:	4694      	mov	ip, r2
 8002cf8:	4463      	add	r3, ip
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	494e      	ldr	r1, [pc, #312]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002d04:	468c      	mov	ip, r1
 8002d06:	4463      	add	r3, ip
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0609      	lsls	r1, r1, #24
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	e062      	b.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x530>
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	2b3e      	cmp	r3, #62	; 0x3e
 8002d16:	d81b      	bhi.n	8002d50 <HAL_PCD_EP_DB_Transmit+0x4a8>
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	d002      	beq.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x484>
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	3301      	adds	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002d34:	4694      	mov	ip, r2
 8002d36:	4463      	add	r3, ip
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	069a      	lsls	r2, r3, #26
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	483d      	ldr	r0, [pc, #244]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002d46:	4684      	mov	ip, r0
 8002d48:	4463      	add	r3, ip
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	e043      	b.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x530>
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	221f      	movs	r2, #31
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d102      	bne.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x4bc>
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	3b01      	subs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	4463      	add	r3, ip
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	069b      	lsls	r3, r3, #26
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	492f      	ldr	r1, [pc, #188]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002d80:	468c      	mov	ip, r1
 8002d82:	4463      	add	r3, ip
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	0609      	lsls	r1, r1, #24
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	e024      	b.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x530>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	785b      	ldrb	r3, [r3, #1]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d120      	bne.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x530>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002d9e:	4694      	mov	ip, r2
 8002da0:	4463      	add	r3, ip
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4924      	ldr	r1, [pc, #144]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002dac:	468c      	mov	ip, r1
 8002dae:	4463      	add	r3, ip
 8002db0:	0412      	lsls	r2, r2, #16
 8002db2:	0c12      	lsrs	r2, r2, #16
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002dbe:	4694      	mov	ip, r2
 8002dc0:	4463      	add	r3, ip
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	481b      	ldr	r0, [pc, #108]	; (8002e3c <HAL_PCD_EP_DB_Transmit+0x594>)
 8002dd0:	4684      	mov	ip, r0
 8002dd2:	4463      	add	r3, ip
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6959      	ldr	r1, [r3, #20]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	891a      	ldrh	r2, [r3, #8]
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f003 ff28 	bl	8006c3c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	001a      	movs	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_PCD_EP_DB_Transmit+0x59c>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2210      	movs	r2, #16
 8002e06:	4053      	eors	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4053      	eors	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	001a      	movs	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4909      	ldr	r1, [pc, #36]	; (8002e48 <HAL_PCD_EP_DB_Transmit+0x5a0>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b00e      	add	sp, #56	; 0x38
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	077f8f8f 	.word	0x077f8f8f
 8002e38:	0000c080 	.word	0x0000c080
 8002e3c:	40009800 	.word	0x40009800
 8002e40:	83ffffff 	.word	0x83ffffff
 8002e44:	077f8fbf 	.word	0x077f8fbf
 8002e48:	00008080 	.word	0x00008080

08002e4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	0008      	movs	r0, r1
 8002e56:	0011      	movs	r1, r2
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	240a      	movs	r4, #10
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	1c02      	adds	r2, r0, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	2308      	movs	r3, #8
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	1c0a      	adds	r2, r1, #0
 8002e68:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e6a:	0021      	movs	r1, r4
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	4013      	ands	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	2207      	movs	r2, #7
 8002e80:	401a      	ands	r2, r3
 8002e82:	0013      	movs	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	3338      	adds	r3, #56	; 0x38
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	18d3      	adds	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e00b      	b.n	8002eac <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e94:	230a      	movs	r3, #10
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	3379      	adds	r3, #121	; 0x79
 8002ea4:	33ff      	adds	r3, #255	; 0xff
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	18d3      	adds	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eac:	2308      	movs	r3, #8
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	809a      	strh	r2, [r3, #4]
 8002ec4:	e00b      	b.n	8002ede <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	811a      	strh	r2, [r3, #8]
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b007      	add	sp, #28
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	23be      	movs	r3, #190	; 0xbe
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	2101      	movs	r1, #1
 8002efe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	23bc      	movs	r3, #188	; 0xbc
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	2100      	movs	r1, #0
 8002f08:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	2201      	movs	r2, #1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d11f      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	0013      	movs	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	189b      	adds	r3, r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4912      	ldr	r1, [pc, #72]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7fd f972 	bl	8000248 <__udivsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f6a:	e008      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e001      	b.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e009      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	401a      	ands	r2, r3
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d0ed      	beq.n	8002f6c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	fffff9ff 	.word	0xfffff9ff
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	000f4240 	.word	0x000f4240

08002fac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	23e0      	movs	r3, #224	; 0xe0
 8002fb6:	01db      	lsls	r3, r3, #7
 8002fb8:	4013      	ands	r3, r2
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f000 fb56 	bl	8003684 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x20>
 8002fe2:	e07d      	b.n	80030e0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe4:	4bc3      	ldr	r3, [pc, #780]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2238      	movs	r2, #56	; 0x38
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fee:	4bc1      	ldr	r3, [pc, #772]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0x40>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d002      	beq.n	800300a <HAL_RCC_OscConfig+0x46>
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b08      	cmp	r3, #8
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4bba      	ldr	r3, [pc, #744]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	4013      	ands	r3, r2
 8003014:	d063      	beq.n	80030de <HAL_RCC_OscConfig+0x11a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d15f      	bne.n	80030de <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f000 fb30 	bl	8003684 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	025b      	lsls	r3, r3, #9
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x7c>
 8003030:	4bb0      	ldr	r3, [pc, #704]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4baf      	ldr	r3, [pc, #700]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	0249      	lsls	r1, r1, #9
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e020      	b.n	8003082 <HAL_RCC_OscConfig+0xbe>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	23a0      	movs	r3, #160	; 0xa0
 8003046:	02db      	lsls	r3, r3, #11
 8003048:	429a      	cmp	r2, r3
 800304a:	d10e      	bne.n	800306a <HAL_RCC_OscConfig+0xa6>
 800304c:	4ba9      	ldr	r3, [pc, #676]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4ba8      	ldr	r3, [pc, #672]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	02c9      	lsls	r1, r1, #11
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4ba6      	ldr	r3, [pc, #664]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4ba5      	ldr	r3, [pc, #660]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	0249      	lsls	r1, r1, #9
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0xbe>
 800306a:	4ba2      	ldr	r3, [pc, #648]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4ba1      	ldr	r3, [pc, #644]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003070:	49a1      	ldr	r1, [pc, #644]	; (80032f8 <HAL_RCC_OscConfig+0x334>)
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	4b9f      	ldr	r3, [pc, #636]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b9e      	ldr	r3, [pc, #632]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800307c:	499f      	ldr	r1, [pc, #636]	; (80032fc <HAL_RCC_OscConfig+0x338>)
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d014      	beq.n	80030b4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe f8db 	bl	8001244 <HAL_GetTick>
 800308e:	0003      	movs	r3, r0
 8003090:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe f8d6 	bl	8001244 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e2ee      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	4b93      	ldr	r3, [pc, #588]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	4013      	ands	r3, r2
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0xd0>
 80030b2:	e015      	b.n	80030e0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f8c6 	bl	8001244 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030be:	f7fe f8c1 	bl	8001244 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b64      	cmp	r3, #100	; 0x64
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2d9      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	029b      	lsls	r3, r3, #10
 80030d8:	4013      	ands	r3, r2
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0xfa>
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d100      	bne.n	80030ec <HAL_RCC_OscConfig+0x128>
 80030ea:	e099      	b.n	8003220 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ec:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2238      	movs	r2, #56	; 0x38
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f6:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2203      	movs	r2, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d102      	bne.n	800310c <HAL_RCC_OscConfig+0x148>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d002      	beq.n	8003112 <HAL_RCC_OscConfig+0x14e>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d135      	bne.n	800317e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003112:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4013      	ands	r3, r2
 800311c:	d005      	beq.n	800312a <HAL_RCC_OscConfig+0x166>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e2ac      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	4b72      	ldr	r3, [pc, #456]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a74      	ldr	r2, [pc, #464]	; (8003300 <HAL_RCC_OscConfig+0x33c>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	021a      	lsls	r2, r3, #8
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d112      	bne.n	800316c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003146:	4b6b      	ldr	r3, [pc, #428]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a6e      	ldr	r2, [pc, #440]	; (8003304 <HAL_RCC_OscConfig+0x340>)
 800314c:	4013      	ands	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800315a:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0adb      	lsrs	r3, r3, #11
 8003160:	2207      	movs	r2, #7
 8003162:	4013      	ands	r3, r2
 8003164:	4a68      	ldr	r2, [pc, #416]	; (8003308 <HAL_RCC_OscConfig+0x344>)
 8003166:	40da      	lsrs	r2, r3
 8003168:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_OscConfig+0x348>)
 800316a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800316c:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x34c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0018      	movs	r0, r3
 8003172:	f7fe f80b 	bl	800118c <HAL_InitTick>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d051      	beq.n	800321e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e282      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d030      	beq.n	80031e8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <HAL_RCC_OscConfig+0x340>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	0049      	lsls	r1, r1, #1
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f84c 	bl	8001244 <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fe f847 	bl	8001244 <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e25f      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c4:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4013      	ands	r3, r2
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d0:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_RCC_OscConfig+0x33c>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	021a      	lsls	r2, r3, #8
 80031e0:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80031ee:	4949      	ldr	r1, [pc, #292]	; (8003314 <HAL_RCC_OscConfig+0x350>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe f826 	bl	8001244 <HAL_GetTick>
 80031f8:	0003      	movs	r3, r0
 80031fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe f821 	bl	8001244 <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e239      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003210:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4013      	ands	r3, r2
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x23a>
 800321c:	e000      	b.n	8003220 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800321e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	4013      	ands	r3, r2
 8003228:	d047      	beq.n	80032ba <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800322a:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2238      	movs	r2, #56	; 0x38
 8003230:	4013      	ands	r3, r2
 8003232:	2b18      	cmp	r3, #24
 8003234:	d10a      	bne.n	800324c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	d03c      	beq.n	80032ba <HAL_RCC_OscConfig+0x2f6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d138      	bne.n	80032ba <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e21b      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d019      	beq.n	8003288 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 8003256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800325a:	2101      	movs	r1, #1
 800325c:	430a      	orrs	r2, r1
 800325e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd fff0 	bl	8001244 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326a:	f7fd ffeb 	bl	8001244 <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e203      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800327e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003280:	2202      	movs	r2, #2
 8003282:	4013      	ands	r3, r2
 8003284:	d0f1      	beq.n	800326a <HAL_RCC_OscConfig+0x2a6>
 8003286:	e018      	b.n	80032ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800328a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 800328e:	2101      	movs	r1, #1
 8003290:	438a      	bics	r2, r1
 8003292:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fd ffd6 	bl	8001244 <HAL_GetTick>
 8003298:	0003      	movs	r3, r0
 800329a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329e:	f7fd ffd1 	bl	8001244 <HAL_GetTick>
 80032a2:	0002      	movs	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1e9      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	2202      	movs	r2, #2
 80032b6:	4013      	ands	r3, r2
 80032b8:	d1f1      	bne.n	800329e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2204      	movs	r2, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	d100      	bne.n	80032c6 <HAL_RCC_OscConfig+0x302>
 80032c4:	e0c6      	b.n	8003454 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	231f      	movs	r3, #31
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2238      	movs	r2, #56	; 0x38
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d11e      	bne.n	8003318 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_OscConfig+0x330>)
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	2202      	movs	r2, #2
 80032e0:	4013      	ands	r3, r2
 80032e2:	d100      	bne.n	80032e6 <HAL_RCC_OscConfig+0x322>
 80032e4:	e0b6      	b.n	8003454 <HAL_RCC_OscConfig+0x490>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d000      	beq.n	80032f0 <HAL_RCC_OscConfig+0x32c>
 80032ee:	e0b1      	b.n	8003454 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e1c7      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
 80032f4:	40021000 	.word	0x40021000
 80032f8:	fffeffff 	.word	0xfffeffff
 80032fc:	fffbffff 	.word	0xfffbffff
 8003300:	ffff80ff 	.word	0xffff80ff
 8003304:	ffffc7ff 	.word	0xffffc7ff
 8003308:	00f42400 	.word	0x00f42400
 800330c:	20000004 	.word	0x20000004
 8003310:	20000008 	.word	0x20000008
 8003314:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003318:	4bb8      	ldr	r3, [pc, #736]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800331a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	055b      	lsls	r3, r3, #21
 8003320:	4013      	ands	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_RCC_OscConfig+0x364>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x366>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d011      	beq.n	8003352 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4bb3      	ldr	r3, [pc, #716]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003332:	4bb2      	ldr	r3, [pc, #712]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	0549      	lsls	r1, r1, #21
 8003338:	430a      	orrs	r2, r1
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c
 800333c:	4baf      	ldr	r3, [pc, #700]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800333e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	055b      	lsls	r3, r3, #21
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800334a:	231f      	movs	r3, #31
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003352:	4bab      	ldr	r3, [pc, #684]	; (8003600 <HAL_RCC_OscConfig+0x63c>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4013      	ands	r3, r2
 800335c:	d11a      	bne.n	8003394 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800335e:	4ba8      	ldr	r3, [pc, #672]	; (8003600 <HAL_RCC_OscConfig+0x63c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4ba7      	ldr	r3, [pc, #668]	; (8003600 <HAL_RCC_OscConfig+0x63c>)
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	0049      	lsls	r1, r1, #1
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800336c:	f7fd ff6a 	bl	8001244 <HAL_GetTick>
 8003370:	0003      	movs	r3, r0
 8003372:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003376:	f7fd ff65 	bl	8001244 <HAL_GetTick>
 800337a:	0002      	movs	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e17d      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	4b9d      	ldr	r3, [pc, #628]	; (8003600 <HAL_RCC_OscConfig+0x63c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4013      	ands	r3, r2
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x3e6>
 800339c:	4b97      	ldr	r3, [pc, #604]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800339e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033a0:	4b96      	ldr	r3, [pc, #600]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	430a      	orrs	r2, r1
 80033a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033a8:	e01c      	b.n	80033e4 <HAL_RCC_OscConfig+0x420>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x408>
 80033b2:	4b92      	ldr	r3, [pc, #584]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b6:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033b8:	2104      	movs	r1, #4
 80033ba:	430a      	orrs	r2, r1
 80033bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80033be:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033c2:	4b8e      	ldr	r3, [pc, #568]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033c4:	2101      	movs	r1, #1
 80033c6:	430a      	orrs	r2, r1
 80033c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0x420>
 80033cc:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033d0:	4b8a      	ldr	r3, [pc, #552]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	438a      	bics	r2, r1
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033dc:	4b87      	ldr	r3, [pc, #540]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80033de:	2104      	movs	r1, #4
 80033e0:	438a      	bics	r2, r1
 80033e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d014      	beq.n	8003416 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd ff2a 	bl	8001244 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f4:	e009      	b.n	800340a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fd ff25 	bl	8001244 <HAL_GetTick>
 80033fa:	0002      	movs	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	4a80      	ldr	r2, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x640>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e13c      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2202      	movs	r2, #2
 8003410:	4013      	ands	r3, r2
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x432>
 8003414:	e013      	b.n	800343e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd ff15 	bl	8001244 <HAL_GetTick>
 800341a:	0003      	movs	r3, r0
 800341c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800341e:	e009      	b.n	8003434 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fd ff10 	bl	8001244 <HAL_GetTick>
 8003424:	0002      	movs	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	4a76      	ldr	r2, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x640>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e127      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003434:	4b71      	ldr	r3, [pc, #452]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800343e:	231f      	movs	r3, #31
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003448:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	4b6b      	ldr	r3, [pc, #428]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800344e:	496e      	ldr	r1, [pc, #440]	; (8003608 <HAL_RCC_OscConfig+0x644>)
 8003450:	400a      	ands	r2, r1
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2220      	movs	r2, #32
 800345a:	4013      	ands	r3, r2
 800345c:	d039      	beq.n	80034d2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01b      	beq.n	800349e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	03c9      	lsls	r1, r1, #15
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fd fee6 	bl	8001244 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800347e:	f7fd fee1 	bl	8001244 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0f9      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003490:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	4013      	ands	r3, r2
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x4ba>
 800349c:	e019      	b.n	80034d2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800349e:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80034a4:	4959      	ldr	r1, [pc, #356]	; (800360c <HAL_RCC_OscConfig+0x648>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fd fecb 	bl	8001244 <HAL_GetTick>
 80034ae:	0003      	movs	r3, r0
 80034b0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b4:	f7fd fec6 	bl	8001244 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0de      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	4013      	ands	r3, r2
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d100      	bne.n	80034dc <HAL_RCC_OscConfig+0x518>
 80034da:	e0d2      	b.n	8003682 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034dc:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2238      	movs	r2, #56	; 0x38
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d100      	bne.n	80034ea <HAL_RCC_OscConfig+0x526>
 80034e8:	e081      	b.n	80035ee <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d156      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b42      	ldr	r3, [pc, #264]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80034f8:	4945      	ldr	r1, [pc, #276]	; (8003610 <HAL_RCC_OscConfig+0x64c>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fd fea1 	bl	8001244 <HAL_GetTick>
 8003502:	0003      	movs	r3, r0
 8003504:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fd fe9c 	bl	8001244 <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0b4      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351a:	4b38      	ldr	r3, [pc, #224]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	049b      	lsls	r3, r3, #18
 8003522:	4013      	ands	r3, r2
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003526:	4b35      	ldr	r3, [pc, #212]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0x650>)
 800352c:	4013      	ands	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	431a      	orrs	r2, r3
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003556:	430a      	orrs	r2, r1
 8003558:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355a:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0449      	lsls	r1, r1, #17
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	0549      	lsls	r1, r1, #21
 8003572:	430a      	orrs	r2, r1
 8003574:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fe65 	bl	8001244 <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd fe60 	bl	8001244 <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e078      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	049b      	lsls	r3, r3, #18
 800359a:	4013      	ands	r3, r2
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x5bc>
 800359e:	e070      	b.n	8003682 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035a6:	491a      	ldr	r1, [pc, #104]	; (8003610 <HAL_RCC_OscConfig+0x64c>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035b2:	2103      	movs	r1, #3
 80035b4:	438a      	bics	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035be:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_OscConfig+0x654>)
 80035c0:	400a      	ands	r2, r1
 80035c2:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fe3e 	bl	8001244 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fd fe39 	bl	8001244 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e051      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x638>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	049b      	lsls	r3, r3, #18
 80035e8:	4013      	ands	r3, r2
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x60a>
 80035ec:	e049      	b.n	8003682 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d112      	bne.n	800361c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e044      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
 8003604:	00001388 	.word	0x00001388
 8003608:	efffffff 	.word	0xefffffff
 800360c:	ffbfffff 	.word	0xffbfffff
 8003610:	feffffff 	.word	0xfeffffff
 8003614:	11c1808c 	.word	0x11c1808c
 8003618:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x6c8>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2203      	movs	r2, #3
 8003626:	401a      	ands	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	429a      	cmp	r2, r3
 800362e:	d126      	bne.n	800367e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2270      	movs	r2, #112	; 0x70
 8003634:	401a      	ands	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d11f      	bne.n	800367e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	23fe      	movs	r3, #254	; 0xfe
 8003642:	01db      	lsls	r3, r3, #7
 8003644:	401a      	ands	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d116      	bne.n	800367e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	23f8      	movs	r3, #248	; 0xf8
 8003654:	039b      	lsls	r3, r3, #14
 8003656:	401a      	ands	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d10e      	bne.n	800367e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	23e0      	movs	r3, #224	; 0xe0
 8003664:	051b      	lsls	r3, r3, #20
 8003666:	401a      	ands	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	0f5b      	lsrs	r3, r3, #29
 8003674:	075a      	lsls	r2, r3, #29
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b008      	add	sp, #32
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0e9      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b76      	ldr	r3, [pc, #472]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2207      	movs	r2, #7
 80036aa:	4013      	ands	r3, r2
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d91e      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b73      	ldr	r3, [pc, #460]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2207      	movs	r2, #7
 80036b8:	4393      	bics	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	4b70      	ldr	r3, [pc, #448]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fdbe 	bl	8001244 <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ce:	f7fd fdb9 	bl	8001244 <HAL_GetTick>
 80036d2:	0002      	movs	r2, r0
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	4a6a      	ldr	r2, [pc, #424]	; (8003884 <HAL_RCC_ClockConfig+0x1f4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0ca      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036e2:	4b67      	ldr	r3, [pc, #412]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2207      	movs	r2, #7
 80036e8:	4013      	ands	r3, r2
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1ee      	bne.n	80036ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2202      	movs	r2, #2
 80036f6:	4013      	ands	r3, r2
 80036f8:	d015      	beq.n	8003726 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2204      	movs	r2, #4
 8003700:	4013      	ands	r3, r2
 8003702:	d006      	beq.n	8003712 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003704:	4b60      	ldr	r3, [pc, #384]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	4b5f      	ldr	r3, [pc, #380]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 800370a:	21e0      	movs	r1, #224	; 0xe0
 800370c:	01c9      	lsls	r1, r1, #7
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003712:	4b5d      	ldr	r3, [pc, #372]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4a5d      	ldr	r2, [pc, #372]	; (800388c <HAL_RCC_ClockConfig+0x1fc>)
 8003718:	4013      	ands	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	4013      	ands	r3, r2
 800372e:	d057      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003738:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	029b      	lsls	r3, r3, #10
 8003740:	4013      	ands	r3, r2
 8003742:	d12b      	bne.n	800379c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e097      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d107      	bne.n	8003760 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003750:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	049b      	lsls	r3, r3, #18
 8003758:	4013      	ands	r3, r2
 800375a:	d11f      	bne.n	800379c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e08b      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4013      	ands	r3, r2
 8003772:	d113      	bne.n	800379c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e07f      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d106      	bne.n	800378e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003780:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d108      	bne.n	800379c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e074      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378e:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2202      	movs	r2, #2
 8003794:	4013      	ands	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e06d      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800379c:	4b3a      	ldr	r3, [pc, #232]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2207      	movs	r2, #7
 80037a2:	4393      	bics	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd fd48 	bl	8001244 <HAL_GetTick>
 80037b4:	0003      	movs	r3, r0
 80037b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b8:	e009      	b.n	80037ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ba:	f7fd fd43 	bl	8001244 <HAL_GetTick>
 80037be:	0002      	movs	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <HAL_RCC_ClockConfig+0x1f4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e054      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2238      	movs	r2, #56	; 0x38
 80037d4:	401a      	ands	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1ec      	bne.n	80037ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2207      	movs	r2, #7
 80037e6:	4013      	ands	r3, r2
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d21e      	bcs.n	800382c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2207      	movs	r2, #7
 80037f4:	4393      	bics	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	4b21      	ldr	r3, [pc, #132]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003800:	f7fd fd20 	bl	8001244 <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003808:	e009      	b.n	800381e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380a:	f7fd fd1b 	bl	8001244 <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_RCC_ClockConfig+0x1f4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e02c      	b.n	8003878 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800381e:	4b18      	ldr	r3, [pc, #96]	; (8003880 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2207      	movs	r2, #7
 8003824:	4013      	ands	r3, r2
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2204      	movs	r2, #4
 8003832:	4013      	ands	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_RCC_ClockConfig+0x200>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	4b10      	ldr	r3, [pc, #64]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800384a:	f000 f829 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800384e:	0001      	movs	r1, r0
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <HAL_RCC_ClockConfig+0x1f8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	220f      	movs	r2, #15
 8003858:	401a      	ands	r2, r3
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <HAL_RCC_ClockConfig+0x204>)
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	58d3      	ldr	r3, [r2, r3]
 8003860:	221f      	movs	r2, #31
 8003862:	4013      	ands	r3, r2
 8003864:	000a      	movs	r2, r1
 8003866:	40da      	lsrs	r2, r3
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_ClockConfig+0x208>)
 800386a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_ClockConfig+0x20c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd fc8b 	bl	800118c <HAL_InitTick>
 8003876:	0003      	movs	r3, r0
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b004      	add	sp, #16
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40022000 	.word	0x40022000
 8003884:	00001388 	.word	0x00001388
 8003888:	40021000 	.word	0x40021000
 800388c:	fffff0ff 	.word	0xfffff0ff
 8003890:	ffff8fff 	.word	0xffff8fff
 8003894:	0800a04c 	.word	0x0800a04c
 8003898:	20000004 	.word	0x20000004
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2238      	movs	r2, #56	; 0x38
 80038ac:	4013      	ands	r3, r2
 80038ae:	d10f      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038b0:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0adb      	lsrs	r3, r3, #11
 80038b6:	2207      	movs	r2, #7
 80038b8:	4013      	ands	r3, r2
 80038ba:	2201      	movs	r2, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	0013      	movs	r3, r2
 80038c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038c2:	6839      	ldr	r1, [r7, #0]
 80038c4:	4835      	ldr	r0, [pc, #212]	; (800399c <HAL_RCC_GetSysClockFreq+0xfc>)
 80038c6:	f7fc fcbf 	bl	8000248 <__udivsi3>
 80038ca:	0003      	movs	r3, r0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e05d      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d0:	4b31      	ldr	r3, [pc, #196]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2238      	movs	r2, #56	; 0x38
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d102      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038dc:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e054      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2238      	movs	r2, #56	; 0x38
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d138      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2203      	movs	r2, #3
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	2207      	movs	r2, #7
 8003900:	4013      	ands	r3, r2
 8003902:	3301      	adds	r3, #1
 8003904:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d10d      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4824      	ldr	r0, [pc, #144]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003910:	f7fc fc9a 	bl	8000248 <__udivsi3>
 8003914:	0003      	movs	r3, r0
 8003916:	0019      	movs	r1, r3
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	227f      	movs	r2, #127	; 0x7f
 8003920:	4013      	ands	r3, r2
 8003922:	434b      	muls	r3, r1
 8003924:	617b      	str	r3, [r7, #20]
        break;
 8003926:	e00d      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	481c      	ldr	r0, [pc, #112]	; (800399c <HAL_RCC_GetSysClockFreq+0xfc>)
 800392c:	f7fc fc8c 	bl	8000248 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	0019      	movs	r1, r3
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	227f      	movs	r2, #127	; 0x7f
 800393c:	4013      	ands	r3, r2
 800393e:	434b      	muls	r3, r1
 8003940:	617b      	str	r3, [r7, #20]
        break;
 8003942:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0f5b      	lsrs	r3, r3, #29
 800394a:	2207      	movs	r2, #7
 800394c:	4013      	ands	r3, r2
 800394e:	3301      	adds	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	6978      	ldr	r0, [r7, #20]
 8003956:	f7fc fc77 	bl	8000248 <__udivsi3>
 800395a:	0003      	movs	r3, r0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e015      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2238      	movs	r2, #56	; 0x38
 8003966:	4013      	ands	r3, r2
 8003968:	2b20      	cmp	r3, #32
 800396a:	d103      	bne.n	8003974 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e00b      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2238      	movs	r2, #56	; 0x38
 800397a:	4013      	ands	r3, r2
 800397c:	2b18      	cmp	r3, #24
 800397e:	d103      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003980:	23fa      	movs	r3, #250	; 0xfa
 8003982:	01db      	lsls	r3, r3, #7
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e001      	b.n	800398c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800398c:	693b      	ldr	r3, [r7, #16]
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b006      	add	sp, #24
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	40021000 	.word	0x40021000
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	007a1200 	.word	0x007a1200

080039a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b02      	ldr	r3, [pc, #8]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	20000004 	.word	0x20000004

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039bc:	f7ff fff2 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c0:	0004      	movs	r4, r0
 80039c2:	f7ff faf3 	bl	8002fac <LL_RCC_GetAPB1Prescaler>
 80039c6:	0003      	movs	r3, r0
 80039c8:	0b1a      	lsrs	r2, r3, #12
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039cc:	0092      	lsls	r2, r2, #2
 80039ce:	58d3      	ldr	r3, [r2, r3]
 80039d0:	221f      	movs	r2, #31
 80039d2:	4013      	ands	r3, r2
 80039d4:	40dc      	lsrs	r4, r3
 80039d6:	0023      	movs	r3, r4
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bdb0      	pop	{r4, r5, r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	0800a08c 	.word	0x0800a08c

080039e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039ec:	2313      	movs	r3, #19
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f4:	2312      	movs	r3, #18
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	4013      	ands	r3, r2
 8003a06:	d100      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a08:	e0ad      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2011      	movs	r0, #17
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	055b      	lsls	r3, r3, #21
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d110      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b44      	ldr	r3, [pc, #272]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0549      	lsls	r1, r1, #21
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a2c:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	055b      	lsls	r3, r3, #21
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	183b      	adds	r3, r7, r0
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a40:	4b3c      	ldr	r3, [pc, #240]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	0049      	lsls	r1, r1, #1
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fbf9 	bl	8001244 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a56:	e00b      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fd fbf4 	bl	8001244 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d904      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a66:	2313      	movs	r3, #19
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	701a      	strb	r2, [r3, #0]
        break;
 8003a6e:	e005      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a70:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d0ed      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a7c:	2313      	movs	r3, #19
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d15e      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a8a:	23c0      	movs	r3, #192	; 0xc0
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d019      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d014      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aac:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003aae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	0249      	lsls	r1, r1, #9
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ac0:	491e      	ldr	r1, [pc, #120]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d016      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd fbb6 	bl	8001244 <HAL_GetTick>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	e00c      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fbb1 	bl	8001244 <HAL_GetTick>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d904      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003aee:	2313      	movs	r3, #19
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2203      	movs	r2, #3
 8003af4:	701a      	strb	r2, [r3, #0]
            break;
 8003af6:	e004      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2202      	movs	r2, #2
 8003afe:	4013      	ands	r3, r2
 8003b00:	d0ed      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b02:	2313      	movs	r3, #19
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b20:	e016      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b22:	2312      	movs	r3, #18
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2213      	movs	r2, #19
 8003b28:	18ba      	adds	r2, r7, r2
 8003b2a:	7812      	ldrb	r2, [r2, #0]
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
 8003b38:	fffffcff 	.word	0xfffffcff
 8003b3c:	fffeffff 	.word	0xfffeffff
 8003b40:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	2312      	movs	r3, #18
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2213      	movs	r2, #19
 8003b4a:	18ba      	adds	r2, r7, r2
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b50:	2311      	movs	r3, #17
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4bb6      	ldr	r3, [pc, #728]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5e:	4bb5      	ldr	r3, [pc, #724]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b60:	49b5      	ldr	r1, [pc, #724]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b70:	4bb0      	ldr	r3, [pc, #704]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	2203      	movs	r2, #3
 8003b76:	4393      	bics	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	4bad      	ldr	r3, [pc, #692]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b80:	430a      	orrs	r2, r1
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b8e:	4ba9      	ldr	r3, [pc, #676]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	220c      	movs	r2, #12
 8003b94:	4393      	bics	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4ba5      	ldr	r3, [pc, #660]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bac:	4ba1      	ldr	r3, [pc, #644]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	2230      	movs	r2, #48	; 0x30
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	4b9e      	ldr	r3, [pc, #632]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bca:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	4a9b      	ldr	r2, [pc, #620]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	4b96      	ldr	r3, [pc, #600]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	015b      	lsls	r3, r3, #5
 8003be6:	4013      	ands	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003bea:	4b92      	ldr	r3, [pc, #584]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	4a94      	ldr	r2, [pc, #592]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	4b8e      	ldr	r3, [pc, #568]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	2380      	movs	r3, #128	; 0x80
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c0a:	4b8a      	ldr	r3, [pc, #552]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	4a8d      	ldr	r2, [pc, #564]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c18:	4b86      	ldr	r3, [pc, #536]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4013      	ands	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c2a:	4b82      	ldr	r3, [pc, #520]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	4a86      	ldr	r2, [pc, #536]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2220      	movs	r2, #32
 8003c44:	4013      	ands	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c48:	4b7a      	ldr	r3, [pc, #488]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	4a7f      	ldr	r2, [pc, #508]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	0019      	movs	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	4b77      	ldr	r3, [pc, #476]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	4013      	ands	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c66:	4b73      	ldr	r3, [pc, #460]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	4a79      	ldr	r2, [pc, #484]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c76:	430a      	orrs	r2, r1
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	01db      	lsls	r3, r3, #7
 8003c82:	4013      	ands	r3, r2
 8003c84:	d015      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c86:	4b6b      	ldr	r3, [pc, #428]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	0899      	lsrs	r1, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c92:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c94:	430a      	orrs	r2, r1
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	05db      	lsls	r3, r3, #23
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d106      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ca4:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	4b62      	ldr	r3, [pc, #392]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	0249      	lsls	r1, r1, #9
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	2240      	movs	r2, #64	; 0x40
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	039b      	lsls	r3, r3, #14
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cde:	4b55      	ldr	r3, [pc, #340]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cec:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	03db      	lsls	r3, r3, #15
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0449      	lsls	r1, r1, #17
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	03db      	lsls	r3, r3, #15
 8003d14:	4013      	ands	r3, r2
 8003d16:	d016      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d18:	4b46      	ldr	r3, [pc, #280]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	4a4e      	ldr	r2, [pc, #312]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d26:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	045b      	lsls	r3, r3, #17
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d106      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d38:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0449      	lsls	r1, r1, #17
 8003d42:	430a      	orrs	r2, r1
 8003d44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d014      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	2203      	movs	r2, #3
 8003d58:	4393      	bics	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d62:	430a      	orrs	r2, r1
 8003d64:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	0249      	lsls	r1, r1, #9
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	019b      	lsls	r3, r3, #6
 8003d84:	4013      	ands	r3, r2
 8003d86:	d014      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d88:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	220c      	movs	r2, #12
 8003d8e:	4393      	bics	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d106      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	0249      	lsls	r1, r1, #9
 8003dae:	430a      	orrs	r2, r1
 8003db0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	045b      	lsls	r3, r3, #17
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d016      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d106      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	0449      	lsls	r1, r1, #17
 8003de8:	430a      	orrs	r2, r1
 8003dea:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	049b      	lsls	r3, r3, #18
 8003df4:	4013      	ands	r3, r2
 8003df6:	d016      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d106      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	0449      	lsls	r1, r1, #17
 8003e22:	430a      	orrs	r2, r1
 8003e24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e26:	2312      	movs	r3, #18
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
}
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b006      	add	sp, #24
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	efffffff 	.word	0xefffffff
 8003e3c:	fffff3ff 	.word	0xfffff3ff
 8003e40:	fffffcff 	.word	0xfffffcff
 8003e44:	fff3ffff 	.word	0xfff3ffff
 8003e48:	ffcfffff 	.word	0xffcfffff
 8003e4c:	ffffcfff 	.word	0xffffcfff
 8003e50:	ffff3fff 	.word	0xffff3fff
 8003e54:	ffbfffff 	.word	0xffbfffff
 8003e58:	feffffff 	.word	0xfeffffff

08003e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e046      	b.n	8003efc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2284      	movs	r2, #132	; 0x84
 8003e72:	589b      	ldr	r3, [r3, r2]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fd f87e 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2284      	movs	r2, #132	; 0x84
 8003e8c:	2124      	movs	r1, #36	; 0x24
 8003e8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 f830 	bl	8003f08 <UART_SetConfig>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e024      	b.n	8003efc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 fba9 	bl	8004614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	490d      	ldr	r1, [pc, #52]	; (8003f04 <HAL_UART_Init+0xa8>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	212a      	movs	r1, #42	; 0x2a
 8003ede:	438a      	bics	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2101      	movs	r1, #1
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f000 fc41 	bl	800477c <UART_CheckIdleState>
 8003efa:	0003      	movs	r3, r0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	ffffb7ff 	.word	0xffffb7ff

08003f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	b5b0      	push	{r4, r5, r7, lr}
 8003f0a:	b090      	sub	sp, #64	; 0x40
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f10:	231a      	movs	r3, #26
 8003f12:	2220      	movs	r2, #32
 8003f14:	4694      	mov	ip, r2
 8003f16:	44bc      	add	ip, r7
 8003f18:	4463      	add	r3, ip
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4ac2      	ldr	r2, [pc, #776]	; (8004250 <UART_SetConfig+0x348>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4abd      	ldr	r2, [pc, #756]	; (8004254 <UART_SetConfig+0x34c>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0018      	movs	r0, r3
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4ab7      	ldr	r2, [pc, #732]	; (8004258 <UART_SetConfig+0x350>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <UART_SetConfig+0x8c>
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4ab5      	ldr	r2, [pc, #724]	; (800425c <UART_SetConfig+0x354>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f90:	4313      	orrs	r3, r2
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	4ab1      	ldr	r2, [pc, #708]	; (8004260 <UART_SetConfig+0x358>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	4393      	bics	r3, r2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4aa6      	ldr	r2, [pc, #664]	; (8004264 <UART_SetConfig+0x35c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d136      	bne.n	800403c <UART_SetConfig+0x134>
 8003fce:	4ba6      	ldr	r3, [pc, #664]	; (8004268 <UART_SetConfig+0x360>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d020      	beq.n	800401c <UART_SetConfig+0x114>
 8003fda:	d827      	bhi.n	800402c <UART_SetConfig+0x124>
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d00d      	beq.n	8003ffc <UART_SetConfig+0xf4>
 8003fe0:	d824      	bhi.n	800402c <UART_SetConfig+0x124>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <UART_SetConfig+0xe4>
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d010      	beq.n	800400c <UART_SetConfig+0x104>
 8003fea:	e01f      	b.n	800402c <UART_SetConfig+0x124>
 8003fec:	231b      	movs	r3, #27
 8003fee:	2220      	movs	r2, #32
 8003ff0:	4694      	mov	ip, r2
 8003ff2:	44bc      	add	ip, r7
 8003ff4:	4463      	add	r3, ip
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e170      	b.n	80042de <UART_SetConfig+0x3d6>
 8003ffc:	231b      	movs	r3, #27
 8003ffe:	2220      	movs	r2, #32
 8004000:	4694      	mov	ip, r2
 8004002:	44bc      	add	ip, r7
 8004004:	4463      	add	r3, ip
 8004006:	2202      	movs	r2, #2
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e168      	b.n	80042de <UART_SetConfig+0x3d6>
 800400c:	231b      	movs	r3, #27
 800400e:	2220      	movs	r2, #32
 8004010:	4694      	mov	ip, r2
 8004012:	44bc      	add	ip, r7
 8004014:	4463      	add	r3, ip
 8004016:	2204      	movs	r2, #4
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e160      	b.n	80042de <UART_SetConfig+0x3d6>
 800401c:	231b      	movs	r3, #27
 800401e:	2220      	movs	r2, #32
 8004020:	4694      	mov	ip, r2
 8004022:	44bc      	add	ip, r7
 8004024:	4463      	add	r3, ip
 8004026:	2208      	movs	r2, #8
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e158      	b.n	80042de <UART_SetConfig+0x3d6>
 800402c:	231b      	movs	r3, #27
 800402e:	2220      	movs	r2, #32
 8004030:	4694      	mov	ip, r2
 8004032:	44bc      	add	ip, r7
 8004034:	4463      	add	r3, ip
 8004036:	2210      	movs	r2, #16
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e150      	b.n	80042de <UART_SetConfig+0x3d6>
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a8a      	ldr	r2, [pc, #552]	; (800426c <UART_SetConfig+0x364>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d136      	bne.n	80040b4 <UART_SetConfig+0x1ac>
 8004046:	4b88      	ldr	r3, [pc, #544]	; (8004268 <UART_SetConfig+0x360>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	220c      	movs	r2, #12
 800404c:	4013      	ands	r3, r2
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d020      	beq.n	8004094 <UART_SetConfig+0x18c>
 8004052:	d827      	bhi.n	80040a4 <UART_SetConfig+0x19c>
 8004054:	2b08      	cmp	r3, #8
 8004056:	d00d      	beq.n	8004074 <UART_SetConfig+0x16c>
 8004058:	d824      	bhi.n	80040a4 <UART_SetConfig+0x19c>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <UART_SetConfig+0x15c>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d010      	beq.n	8004084 <UART_SetConfig+0x17c>
 8004062:	e01f      	b.n	80040a4 <UART_SetConfig+0x19c>
 8004064:	231b      	movs	r3, #27
 8004066:	2220      	movs	r2, #32
 8004068:	4694      	mov	ip, r2
 800406a:	44bc      	add	ip, r7
 800406c:	4463      	add	r3, ip
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e134      	b.n	80042de <UART_SetConfig+0x3d6>
 8004074:	231b      	movs	r3, #27
 8004076:	2220      	movs	r2, #32
 8004078:	4694      	mov	ip, r2
 800407a:	44bc      	add	ip, r7
 800407c:	4463      	add	r3, ip
 800407e:	2202      	movs	r2, #2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e12c      	b.n	80042de <UART_SetConfig+0x3d6>
 8004084:	231b      	movs	r3, #27
 8004086:	2220      	movs	r2, #32
 8004088:	4694      	mov	ip, r2
 800408a:	44bc      	add	ip, r7
 800408c:	4463      	add	r3, ip
 800408e:	2204      	movs	r2, #4
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e124      	b.n	80042de <UART_SetConfig+0x3d6>
 8004094:	231b      	movs	r3, #27
 8004096:	2220      	movs	r2, #32
 8004098:	4694      	mov	ip, r2
 800409a:	44bc      	add	ip, r7
 800409c:	4463      	add	r3, ip
 800409e:	2208      	movs	r2, #8
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e11c      	b.n	80042de <UART_SetConfig+0x3d6>
 80040a4:	231b      	movs	r3, #27
 80040a6:	2220      	movs	r2, #32
 80040a8:	4694      	mov	ip, r2
 80040aa:	44bc      	add	ip, r7
 80040ac:	4463      	add	r3, ip
 80040ae:	2210      	movs	r2, #16
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e114      	b.n	80042de <UART_SetConfig+0x3d6>
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6d      	ldr	r2, [pc, #436]	; (8004270 <UART_SetConfig+0x368>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d136      	bne.n	800412c <UART_SetConfig+0x224>
 80040be:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <UART_SetConfig+0x360>)
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	2230      	movs	r2, #48	; 0x30
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b30      	cmp	r3, #48	; 0x30
 80040c8:	d020      	beq.n	800410c <UART_SetConfig+0x204>
 80040ca:	d827      	bhi.n	800411c <UART_SetConfig+0x214>
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d00d      	beq.n	80040ec <UART_SetConfig+0x1e4>
 80040d0:	d824      	bhi.n	800411c <UART_SetConfig+0x214>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <UART_SetConfig+0x1d4>
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d010      	beq.n	80040fc <UART_SetConfig+0x1f4>
 80040da:	e01f      	b.n	800411c <UART_SetConfig+0x214>
 80040dc:	231b      	movs	r3, #27
 80040de:	2220      	movs	r2, #32
 80040e0:	4694      	mov	ip, r2
 80040e2:	44bc      	add	ip, r7
 80040e4:	4463      	add	r3, ip
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e0f8      	b.n	80042de <UART_SetConfig+0x3d6>
 80040ec:	231b      	movs	r3, #27
 80040ee:	2220      	movs	r2, #32
 80040f0:	4694      	mov	ip, r2
 80040f2:	44bc      	add	ip, r7
 80040f4:	4463      	add	r3, ip
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e0f0      	b.n	80042de <UART_SetConfig+0x3d6>
 80040fc:	231b      	movs	r3, #27
 80040fe:	2220      	movs	r2, #32
 8004100:	4694      	mov	ip, r2
 8004102:	44bc      	add	ip, r7
 8004104:	4463      	add	r3, ip
 8004106:	2204      	movs	r2, #4
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e0e8      	b.n	80042de <UART_SetConfig+0x3d6>
 800410c:	231b      	movs	r3, #27
 800410e:	2220      	movs	r2, #32
 8004110:	4694      	mov	ip, r2
 8004112:	44bc      	add	ip, r7
 8004114:	4463      	add	r3, ip
 8004116:	2208      	movs	r2, #8
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e0e0      	b.n	80042de <UART_SetConfig+0x3d6>
 800411c:	231b      	movs	r3, #27
 800411e:	2220      	movs	r2, #32
 8004120:	4694      	mov	ip, r2
 8004122:	44bc      	add	ip, r7
 8004124:	4463      	add	r3, ip
 8004126:	2210      	movs	r2, #16
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e0d8      	b.n	80042de <UART_SetConfig+0x3d6>
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a50      	ldr	r2, [pc, #320]	; (8004274 <UART_SetConfig+0x36c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d107      	bne.n	8004146 <UART_SetConfig+0x23e>
 8004136:	231b      	movs	r3, #27
 8004138:	2220      	movs	r2, #32
 800413a:	4694      	mov	ip, r2
 800413c:	44bc      	add	ip, r7
 800413e:	4463      	add	r3, ip
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e0cb      	b.n	80042de <UART_SetConfig+0x3d6>
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <UART_SetConfig+0x370>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d107      	bne.n	8004160 <UART_SetConfig+0x258>
 8004150:	231b      	movs	r3, #27
 8004152:	2220      	movs	r2, #32
 8004154:	4694      	mov	ip, r2
 8004156:	44bc      	add	ip, r7
 8004158:	4463      	add	r3, ip
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e0be      	b.n	80042de <UART_SetConfig+0x3d6>
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a45      	ldr	r2, [pc, #276]	; (800427c <UART_SetConfig+0x374>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d107      	bne.n	800417a <UART_SetConfig+0x272>
 800416a:	231b      	movs	r3, #27
 800416c:	2220      	movs	r2, #32
 800416e:	4694      	mov	ip, r2
 8004170:	44bc      	add	ip, r7
 8004172:	4463      	add	r3, ip
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e0b1      	b.n	80042de <UART_SetConfig+0x3d6>
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a36      	ldr	r2, [pc, #216]	; (8004258 <UART_SetConfig+0x350>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d143      	bne.n	800420c <UART_SetConfig+0x304>
 8004184:	4b38      	ldr	r3, [pc, #224]	; (8004268 <UART_SetConfig+0x360>)
 8004186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004188:	23c0      	movs	r3, #192	; 0xc0
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	4013      	ands	r3, r2
 800418e:	22c0      	movs	r2, #192	; 0xc0
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	4293      	cmp	r3, r2
 8004194:	d02a      	beq.n	80041ec <UART_SetConfig+0x2e4>
 8004196:	22c0      	movs	r2, #192	; 0xc0
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	4293      	cmp	r3, r2
 800419c:	d82e      	bhi.n	80041fc <UART_SetConfig+0x2f4>
 800419e:	2280      	movs	r2, #128	; 0x80
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d012      	beq.n	80041cc <UART_SetConfig+0x2c4>
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d826      	bhi.n	80041fc <UART_SetConfig+0x2f4>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <UART_SetConfig+0x2b4>
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	00d2      	lsls	r2, r2, #3
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d010      	beq.n	80041dc <UART_SetConfig+0x2d4>
 80041ba:	e01f      	b.n	80041fc <UART_SetConfig+0x2f4>
 80041bc:	231b      	movs	r3, #27
 80041be:	2220      	movs	r2, #32
 80041c0:	4694      	mov	ip, r2
 80041c2:	44bc      	add	ip, r7
 80041c4:	4463      	add	r3, ip
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e088      	b.n	80042de <UART_SetConfig+0x3d6>
 80041cc:	231b      	movs	r3, #27
 80041ce:	2220      	movs	r2, #32
 80041d0:	4694      	mov	ip, r2
 80041d2:	44bc      	add	ip, r7
 80041d4:	4463      	add	r3, ip
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e080      	b.n	80042de <UART_SetConfig+0x3d6>
 80041dc:	231b      	movs	r3, #27
 80041de:	2220      	movs	r2, #32
 80041e0:	4694      	mov	ip, r2
 80041e2:	44bc      	add	ip, r7
 80041e4:	4463      	add	r3, ip
 80041e6:	2204      	movs	r2, #4
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e078      	b.n	80042de <UART_SetConfig+0x3d6>
 80041ec:	231b      	movs	r3, #27
 80041ee:	2220      	movs	r2, #32
 80041f0:	4694      	mov	ip, r2
 80041f2:	44bc      	add	ip, r7
 80041f4:	4463      	add	r3, ip
 80041f6:	2208      	movs	r2, #8
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e070      	b.n	80042de <UART_SetConfig+0x3d6>
 80041fc:	231b      	movs	r3, #27
 80041fe:	2220      	movs	r2, #32
 8004200:	4694      	mov	ip, r2
 8004202:	44bc      	add	ip, r7
 8004204:	4463      	add	r3, ip
 8004206:	2210      	movs	r2, #16
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e068      	b.n	80042de <UART_SetConfig+0x3d6>
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a12      	ldr	r2, [pc, #72]	; (800425c <UART_SetConfig+0x354>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d15c      	bne.n	80042d0 <UART_SetConfig+0x3c8>
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <UART_SetConfig+0x360>)
 8004218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800421a:	23c0      	movs	r3, #192	; 0xc0
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4013      	ands	r3, r2
 8004220:	22c0      	movs	r2, #192	; 0xc0
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	4293      	cmp	r3, r2
 8004226:	d043      	beq.n	80042b0 <UART_SetConfig+0x3a8>
 8004228:	22c0      	movs	r2, #192	; 0xc0
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	4293      	cmp	r3, r2
 800422e:	d847      	bhi.n	80042c0 <UART_SetConfig+0x3b8>
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	0092      	lsls	r2, r2, #2
 8004234:	4293      	cmp	r3, r2
 8004236:	d02b      	beq.n	8004290 <UART_SetConfig+0x388>
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	0092      	lsls	r2, r2, #2
 800423c:	4293      	cmp	r3, r2
 800423e:	d83f      	bhi.n	80042c0 <UART_SetConfig+0x3b8>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01d      	beq.n	8004280 <UART_SetConfig+0x378>
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	0052      	lsls	r2, r2, #1
 8004248:	4293      	cmp	r3, r2
 800424a:	d029      	beq.n	80042a0 <UART_SetConfig+0x398>
 800424c:	e038      	b.n	80042c0 <UART_SetConfig+0x3b8>
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	cfff69f3 	.word	0xcfff69f3
 8004254:	ffffcfff 	.word	0xffffcfff
 8004258:	40008000 	.word	0x40008000
 800425c:	40008400 	.word	0x40008400
 8004260:	11fff4ff 	.word	0x11fff4ff
 8004264:	40013800 	.word	0x40013800
 8004268:	40021000 	.word	0x40021000
 800426c:	40004400 	.word	0x40004400
 8004270:	40004800 	.word	0x40004800
 8004274:	40004c00 	.word	0x40004c00
 8004278:	40005000 	.word	0x40005000
 800427c:	40013c00 	.word	0x40013c00
 8004280:	231b      	movs	r3, #27
 8004282:	2220      	movs	r2, #32
 8004284:	4694      	mov	ip, r2
 8004286:	44bc      	add	ip, r7
 8004288:	4463      	add	r3, ip
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e026      	b.n	80042de <UART_SetConfig+0x3d6>
 8004290:	231b      	movs	r3, #27
 8004292:	2220      	movs	r2, #32
 8004294:	4694      	mov	ip, r2
 8004296:	44bc      	add	ip, r7
 8004298:	4463      	add	r3, ip
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e01e      	b.n	80042de <UART_SetConfig+0x3d6>
 80042a0:	231b      	movs	r3, #27
 80042a2:	2220      	movs	r2, #32
 80042a4:	4694      	mov	ip, r2
 80042a6:	44bc      	add	ip, r7
 80042a8:	4463      	add	r3, ip
 80042aa:	2204      	movs	r2, #4
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e016      	b.n	80042de <UART_SetConfig+0x3d6>
 80042b0:	231b      	movs	r3, #27
 80042b2:	2220      	movs	r2, #32
 80042b4:	4694      	mov	ip, r2
 80042b6:	44bc      	add	ip, r7
 80042b8:	4463      	add	r3, ip
 80042ba:	2208      	movs	r2, #8
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e00e      	b.n	80042de <UART_SetConfig+0x3d6>
 80042c0:	231b      	movs	r3, #27
 80042c2:	2220      	movs	r2, #32
 80042c4:	4694      	mov	ip, r2
 80042c6:	44bc      	add	ip, r7
 80042c8:	4463      	add	r3, ip
 80042ca:	2210      	movs	r2, #16
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e006      	b.n	80042de <UART_SetConfig+0x3d6>
 80042d0:	231b      	movs	r3, #27
 80042d2:	2220      	movs	r2, #32
 80042d4:	4694      	mov	ip, r2
 80042d6:	44bc      	add	ip, r7
 80042d8:	4463      	add	r3, ip
 80042da:	2210      	movs	r2, #16
 80042dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4ab8      	ldr	r2, [pc, #736]	; (80045c4 <UART_SetConfig+0x6bc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d005      	beq.n	80042f4 <UART_SetConfig+0x3ec>
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4ab6      	ldr	r2, [pc, #728]	; (80045c8 <UART_SetConfig+0x6c0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d000      	beq.n	80042f4 <UART_SetConfig+0x3ec>
 80042f2:	e097      	b.n	8004424 <UART_SetConfig+0x51c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f4:	231b      	movs	r3, #27
 80042f6:	2220      	movs	r2, #32
 80042f8:	4694      	mov	ip, r2
 80042fa:	44bc      	add	ip, r7
 80042fc:	4463      	add	r3, ip
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d015      	beq.n	8004330 <UART_SetConfig+0x428>
 8004304:	dc18      	bgt.n	8004338 <UART_SetConfig+0x430>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00d      	beq.n	8004326 <UART_SetConfig+0x41e>
 800430a:	dc15      	bgt.n	8004338 <UART_SetConfig+0x430>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <UART_SetConfig+0x40e>
 8004310:	2b02      	cmp	r3, #2
 8004312:	d005      	beq.n	8004320 <UART_SetConfig+0x418>
 8004314:	e010      	b.n	8004338 <UART_SetConfig+0x430>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004316:	f7ff fb4f 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 800431a:	0003      	movs	r3, r0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800431e:	e015      	b.n	800434c <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4baa      	ldr	r3, [pc, #680]	; (80045cc <UART_SetConfig+0x6c4>)
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004324:	e012      	b.n	800434c <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7ff fabb 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800432a:	0003      	movs	r3, r0
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800432e:	e00d      	b.n	800434c <UART_SetConfig+0x444>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004336:	e009      	b.n	800434c <UART_SetConfig+0x444>
      default:
        pclk = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800433c:	231a      	movs	r3, #26
 800433e:	2220      	movs	r2, #32
 8004340:	4694      	mov	ip, r2
 8004342:	44bc      	add	ip, r7
 8004344:	4463      	add	r3, ip
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
        break;
 800434a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434e:	2b00      	cmp	r3, #0
 8004350:	d100      	bne.n	8004354 <UART_SetConfig+0x44c>
 8004352:	e146      	b.n	80045e2 <UART_SetConfig+0x6da>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004358:	4b9d      	ldr	r3, [pc, #628]	; (80045d0 <UART_SetConfig+0x6c8>)
 800435a:	0052      	lsls	r2, r2, #1
 800435c:	5ad3      	ldrh	r3, [r2, r3]
 800435e:	0019      	movs	r1, r3
 8004360:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004362:	f7fb ff71 	bl	8000248 <__udivsi3>
 8004366:	0003      	movs	r3, r0
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	0013      	movs	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	189b      	adds	r3, r3, r2
 8004374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004376:	429a      	cmp	r2, r3
 8004378:	d305      	bcc.n	8004386 <UART_SetConfig+0x47e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004382:	429a      	cmp	r2, r3
 8004384:	d907      	bls.n	8004396 <UART_SetConfig+0x48e>
      {
        ret = HAL_ERROR;
 8004386:	231a      	movs	r3, #26
 8004388:	2220      	movs	r2, #32
 800438a:	4694      	mov	ip, r2
 800438c:	44bc      	add	ip, r7
 800438e:	4463      	add	r3, ip
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e045      	b.n	8004422 <UART_SetConfig+0x51a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a2:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <UART_SetConfig+0x6c8>)
 80043a4:	0052      	lsls	r2, r2, #1
 80043a6:	5ad3      	ldrh	r3, [r2, r3]
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	69f9      	ldr	r1, [r7, #28]
 80043b6:	f7fc f8bd 	bl	8000534 <__aeabi_uldivmod>
 80043ba:	0002      	movs	r2, r0
 80043bc:	000b      	movs	r3, r1
 80043be:	0e11      	lsrs	r1, r2, #24
 80043c0:	021d      	lsls	r5, r3, #8
 80043c2:	430d      	orrs	r5, r1
 80043c4:	0214      	lsls	r4, r2, #8
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68b8      	ldr	r0, [r7, #8]
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	1900      	adds	r0, r0, r4
 80043d8:	4169      	adcs	r1, r5
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f7fc f8a4 	bl	8000534 <__aeabi_uldivmod>
 80043ec:	0002      	movs	r2, r0
 80043ee:	000b      	movs	r3, r1
 80043f0:	0013      	movs	r3, r2
 80043f2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f6:	23c0      	movs	r3, #192	; 0xc0
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d309      	bcc.n	8004412 <UART_SetConfig+0x50a>
 80043fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	035b      	lsls	r3, r3, #13
 8004404:	429a      	cmp	r2, r3
 8004406:	d204      	bcs.n	8004412 <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	e007      	b.n	8004422 <UART_SetConfig+0x51a>
        }
        else
        {
          ret = HAL_ERROR;
 8004412:	231a      	movs	r3, #26
 8004414:	2220      	movs	r2, #32
 8004416:	4694      	mov	ip, r2
 8004418:	44bc      	add	ip, r7
 800441a:	4463      	add	r3, ip
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004420:	e0df      	b.n	80045e2 <UART_SetConfig+0x6da>
 8004422:	e0de      	b.n	80045e2 <UART_SetConfig+0x6da>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	429a      	cmp	r2, r3
 800442e:	d000      	beq.n	8004432 <UART_SetConfig+0x52a>
 8004430:	e074      	b.n	800451c <UART_SetConfig+0x614>
  {
    switch (clocksource)
 8004432:	231b      	movs	r3, #27
 8004434:	2220      	movs	r2, #32
 8004436:	4694      	mov	ip, r2
 8004438:	44bc      	add	ip, r7
 800443a:	4463      	add	r3, ip
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b08      	cmp	r3, #8
 8004440:	d015      	beq.n	800446e <UART_SetConfig+0x566>
 8004442:	dc18      	bgt.n	8004476 <UART_SetConfig+0x56e>
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00d      	beq.n	8004464 <UART_SetConfig+0x55c>
 8004448:	dc15      	bgt.n	8004476 <UART_SetConfig+0x56e>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <UART_SetConfig+0x54c>
 800444e:	2b02      	cmp	r3, #2
 8004450:	d005      	beq.n	800445e <UART_SetConfig+0x556>
 8004452:	e010      	b.n	8004476 <UART_SetConfig+0x56e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004454:	f7ff fab0 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004458:	0003      	movs	r3, r0
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800445c:	e015      	b.n	800448a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445e:	4b5b      	ldr	r3, [pc, #364]	; (80045cc <UART_SetConfig+0x6c4>)
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004462:	e012      	b.n	800448a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004464:	f7ff fa1c 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8004468:	0003      	movs	r3, r0
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800446c:	e00d      	b.n	800448a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004474:	e009      	b.n	800448a <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800447a:	231a      	movs	r3, #26
 800447c:	2220      	movs	r2, #32
 800447e:	4694      	mov	ip, r2
 8004480:	44bc      	add	ip, r7
 8004482:	4463      	add	r3, ip
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
        break;
 8004488:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	d100      	bne.n	8004492 <UART_SetConfig+0x58a>
 8004490:	e0a7      	b.n	80045e2 <UART_SetConfig+0x6da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004496:	4b4e      	ldr	r3, [pc, #312]	; (80045d0 <UART_SetConfig+0x6c8>)
 8004498:	0052      	lsls	r2, r2, #1
 800449a:	5ad3      	ldrh	r3, [r2, r3]
 800449c:	0019      	movs	r1, r3
 800449e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044a0:	f7fb fed2 	bl	8000248 <__udivsi3>
 80044a4:	0003      	movs	r3, r0
 80044a6:	005a      	lsls	r2, r3, #1
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	18d2      	adds	r2, r2, r3
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	0019      	movs	r1, r3
 80044b6:	0010      	movs	r0, r2
 80044b8:	f7fb fec6 	bl	8000248 <__udivsi3>
 80044bc:	0003      	movs	r3, r0
 80044be:	b29b      	uxth	r3, r3
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	2b0f      	cmp	r3, #15
 80044c6:	d921      	bls.n	800450c <UART_SetConfig+0x604>
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	025b      	lsls	r3, r3, #9
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d21c      	bcs.n	800450c <UART_SetConfig+0x604>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	200e      	movs	r0, #14
 80044d8:	2420      	movs	r4, #32
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	181b      	adds	r3, r3, r0
 80044de:	210f      	movs	r1, #15
 80044e0:	438a      	bics	r2, r1
 80044e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2207      	movs	r2, #7
 80044ec:	4013      	ands	r3, r2
 80044ee:	b299      	uxth	r1, r3
 80044f0:	193b      	adds	r3, r7, r4
 80044f2:	181b      	adds	r3, r3, r0
 80044f4:	193a      	adds	r2, r7, r4
 80044f6:	1812      	adds	r2, r2, r0
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	193a      	adds	r2, r7, r4
 8004504:	1812      	adds	r2, r2, r0
 8004506:	8812      	ldrh	r2, [r2, #0]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	e06a      	b.n	80045e2 <UART_SetConfig+0x6da>
      }
      else
      {
        ret = HAL_ERROR;
 800450c:	231a      	movs	r3, #26
 800450e:	2220      	movs	r2, #32
 8004510:	4694      	mov	ip, r2
 8004512:	44bc      	add	ip, r7
 8004514:	4463      	add	r3, ip
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e062      	b.n	80045e2 <UART_SetConfig+0x6da>
      }
    }
  }
  else
  {
    switch (clocksource)
 800451c:	231b      	movs	r3, #27
 800451e:	2220      	movs	r2, #32
 8004520:	4694      	mov	ip, r2
 8004522:	44bc      	add	ip, r7
 8004524:	4463      	add	r3, ip
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d015      	beq.n	8004558 <UART_SetConfig+0x650>
 800452c:	dc18      	bgt.n	8004560 <UART_SetConfig+0x658>
 800452e:	2b04      	cmp	r3, #4
 8004530:	d00d      	beq.n	800454e <UART_SetConfig+0x646>
 8004532:	dc15      	bgt.n	8004560 <UART_SetConfig+0x658>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <UART_SetConfig+0x636>
 8004538:	2b02      	cmp	r3, #2
 800453a:	d005      	beq.n	8004548 <UART_SetConfig+0x640>
 800453c:	e010      	b.n	8004560 <UART_SetConfig+0x658>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453e:	f7ff fa3b 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004542:	0003      	movs	r3, r0
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004546:	e015      	b.n	8004574 <UART_SetConfig+0x66c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <UART_SetConfig+0x6c4>)
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800454c:	e012      	b.n	8004574 <UART_SetConfig+0x66c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7ff f9a7 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 8004552:	0003      	movs	r3, r0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004556:	e00d      	b.n	8004574 <UART_SetConfig+0x66c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800455e:	e009      	b.n	8004574 <UART_SetConfig+0x66c>
      default:
        pclk = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004564:	231a      	movs	r3, #26
 8004566:	2220      	movs	r2, #32
 8004568:	4694      	mov	ip, r2
 800456a:	44bc      	add	ip, r7
 800456c:	4463      	add	r3, ip
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
        break;
 8004572:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	2b00      	cmp	r3, #0
 8004578:	d033      	beq.n	80045e2 <UART_SetConfig+0x6da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <UART_SetConfig+0x6c8>)
 8004580:	0052      	lsls	r2, r2, #1
 8004582:	5ad3      	ldrh	r3, [r2, r3]
 8004584:	0019      	movs	r1, r3
 8004586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004588:	f7fb fe5e 	bl	8000248 <__udivsi3>
 800458c:	0003      	movs	r3, r0
 800458e:	001a      	movs	r2, r3
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	18d2      	adds	r2, r2, r3
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0019      	movs	r1, r3
 800459e:	0010      	movs	r0, r2
 80045a0:	f7fb fe52 	bl	8000248 <__udivsi3>
 80045a4:	0003      	movs	r3, r0
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d911      	bls.n	80045d4 <UART_SetConfig+0x6cc>
 80045b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	025b      	lsls	r3, r3, #9
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d20c      	bcs.n	80045d4 <UART_SetConfig+0x6cc>
      {
        huart->Instance->BRR = usartdiv;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	e00e      	b.n	80045e2 <UART_SetConfig+0x6da>
 80045c4:	40008000 	.word	0x40008000
 80045c8:	40008400 	.word	0x40008400
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	0800a0ac 	.word	0x0800a0ac
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	231a      	movs	r3, #26
 80045d6:	2220      	movs	r2, #32
 80045d8:	4694      	mov	ip, r2
 80045da:	44bc      	add	ip, r7
 80045dc:	4463      	add	r3, ip
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	226a      	movs	r2, #106	; 0x6a
 80045e6:	2101      	movs	r1, #1
 80045e8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	2268      	movs	r2, #104	; 0x68
 80045ee:	2101      	movs	r1, #1
 80045f0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2200      	movs	r2, #0
 80045f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045fe:	231a      	movs	r3, #26
 8004600:	2220      	movs	r2, #32
 8004602:	4694      	mov	ip, r2
 8004604:	44bc      	add	ip, r7
 8004606:	4463      	add	r3, ip
 8004608:	781b      	ldrb	r3, [r3, #0]
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b010      	add	sp, #64	; 0x40
 8004610:	bdb0      	pop	{r4, r5, r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)

08004614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d00b      	beq.n	800463e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a4a      	ldr	r2, [pc, #296]	; (8004758 <UART_AdvFeatureConfig+0x144>)
 800462e:	4013      	ands	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	2202      	movs	r2, #2
 8004644:	4013      	ands	r3, r2
 8004646:	d00b      	beq.n	8004660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a43      	ldr	r2, [pc, #268]	; (800475c <UART_AdvFeatureConfig+0x148>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	2204      	movs	r2, #4
 8004666:	4013      	ands	r3, r2
 8004668:	d00b      	beq.n	8004682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a3b      	ldr	r2, [pc, #236]	; (8004760 <UART_AdvFeatureConfig+0x14c>)
 8004672:	4013      	ands	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	2208      	movs	r2, #8
 8004688:	4013      	ands	r3, r2
 800468a:	d00b      	beq.n	80046a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4a34      	ldr	r2, [pc, #208]	; (8004764 <UART_AdvFeatureConfig+0x150>)
 8004694:	4013      	ands	r3, r2
 8004696:	0019      	movs	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	2210      	movs	r2, #16
 80046aa:	4013      	ands	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <UART_AdvFeatureConfig+0x154>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	2220      	movs	r2, #32
 80046cc:	4013      	ands	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4a25      	ldr	r2, [pc, #148]	; (800476c <UART_AdvFeatureConfig+0x158>)
 80046d8:	4013      	ands	r3, r2
 80046da:	0019      	movs	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	4013      	ands	r3, r2
 80046f0:	d01d      	beq.n	800472e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <UART_AdvFeatureConfig+0x15c>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	0019      	movs	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	035b      	lsls	r3, r3, #13
 8004712:	429a      	cmp	r2, r3
 8004714:	d10b      	bne.n	800472e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a15      	ldr	r2, [pc, #84]	; (8004774 <UART_AdvFeatureConfig+0x160>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	2280      	movs	r2, #128	; 0x80
 8004734:	4013      	ands	r3, r2
 8004736:	d00b      	beq.n	8004750 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <UART_AdvFeatureConfig+0x164>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }
}
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}
 8004758:	fffdffff 	.word	0xfffdffff
 800475c:	fffeffff 	.word	0xfffeffff
 8004760:	fffbffff 	.word	0xfffbffff
 8004764:	ffff7fff 	.word	0xffff7fff
 8004768:	ffffefff 	.word	0xffffefff
 800476c:	ffffdfff 	.word	0xffffdfff
 8004770:	ffefffff 	.word	0xffefffff
 8004774:	ff9fffff 	.word	0xff9fffff
 8004778:	fff7ffff 	.word	0xfff7ffff

0800477c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	228c      	movs	r2, #140	; 0x8c
 8004788:	2100      	movs	r1, #0
 800478a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800478c:	f7fc fd5a 	bl	8001244 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2208      	movs	r2, #8
 800479c:	4013      	ands	r3, r2
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d10c      	bne.n	80047bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	0391      	lsls	r1, r2, #14
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <UART_CheckIdleState+0x90>)
 80047ac:	9200      	str	r2, [sp, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f000 f82e 	bl	8004810 <UART_WaitOnFlagUntilTimeout>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d001      	beq.n	80047bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e023      	b.n	8004804 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2204      	movs	r2, #4
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d10c      	bne.n	80047e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	03d1      	lsls	r1, r2, #15
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4a0e      	ldr	r2, [pc, #56]	; (800480c <UART_CheckIdleState+0x90>)
 80047d4:	9200      	str	r2, [sp, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f000 f81a 	bl	8004810 <UART_WaitOnFlagUntilTimeout>
 80047dc:	1e03      	subs	r3, r0, #0
 80047de:	d001      	beq.n	80047e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e00f      	b.n	8004804 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2284      	movs	r2, #132	; 0x84
 80047e8:	2120      	movs	r1, #32
 80047ea:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2288      	movs	r2, #136	; 0x88
 80047f0:	2120      	movs	r1, #32
 80047f2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b004      	add	sp, #16
 800480a:	bd80      	pop	{r7, pc}
 800480c:	01ffffff 	.word	0x01ffffff

08004810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	1dfb      	adds	r3, r7, #7
 800481e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	e062      	b.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	3301      	adds	r3, #1
 8004826:	d05f      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004828:	f7fc fd0c 	bl	8001244 <HAL_GetTick>
 800482c:	0002      	movs	r2, r0
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	429a      	cmp	r2, r3
 8004836:	d302      	bcc.n	800483e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11d      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4931      	ldr	r1, [pc, #196]	; (8004910 <UART_WaitOnFlagUntilTimeout+0x100>)
 800484a:	400a      	ands	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	438a      	bics	r2, r1
 800485c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2284      	movs	r2, #132	; 0x84
 8004862:	2120      	movs	r1, #32
 8004864:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2288      	movs	r2, #136	; 0x88
 800486a:	2120      	movs	r1, #32
 800486c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2280      	movs	r2, #128	; 0x80
 8004872:	2100      	movs	r1, #0
 8004874:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e046      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	d030      	beq.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	401a      	ands	r2, r3
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	429a      	cmp	r2, r3
 8004898:	d126      	bne.n	80048e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4918      	ldr	r1, [pc, #96]	; (8004910 <UART_WaitOnFlagUntilTimeout+0x100>)
 80048b0:	400a      	ands	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2101      	movs	r1, #1
 80048c0:	438a      	bics	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2284      	movs	r2, #132	; 0x84
 80048c8:	2120      	movs	r1, #32
 80048ca:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2288      	movs	r2, #136	; 0x88
 80048d0:	2120      	movs	r1, #32
 80048d2:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	228c      	movs	r2, #140	; 0x8c
 80048d8:	2120      	movs	r1, #32
 80048da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	2100      	movs	r1, #0
 80048e2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e00f      	b.n	8004908 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	425a      	negs	r2, r3
 80048f8:	4153      	adcs	r3, r2
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	001a      	movs	r2, r3
 80048fe:	1dfb      	adds	r3, r7, #7
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d08d      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b004      	add	sp, #16
 800490e:	bd80      	pop	{r7, pc}
 8004910:	fffffe5f 	.word	0xfffffe5f

08004914 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	5c9b      	ldrb	r3, [r3, r2]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UARTEx_DisableFifoMode+0x16>
 8004926:	2302      	movs	r3, #2
 8004928:	e027      	b.n	800497a <HAL_UARTEx_DisableFifoMode+0x66>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2280      	movs	r2, #128	; 0x80
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2284      	movs	r2, #132	; 0x84
 8004936:	2124      	movs	r1, #36	; 0x24
 8004938:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2101      	movs	r1, #1
 800494e:	438a      	bics	r2, r1
 8004950:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2284      	movs	r2, #132	; 0x84
 800496c:	2120      	movs	r1, #32
 800496e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2280      	movs	r2, #128	; 0x80
 8004974:	2100      	movs	r1, #0
 8004976:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	0018      	movs	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	b004      	add	sp, #16
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	dfffffff 	.word	0xdfffffff

08004988 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	5c9b      	ldrb	r3, [r3, r2]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800499c:	2302      	movs	r3, #2
 800499e:	e02e      	b.n	80049fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	2101      	movs	r1, #1
 80049a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2284      	movs	r2, #132	; 0x84
 80049ac:	2124      	movs	r1, #36	; 0x24
 80049ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	08d9      	lsrs	r1, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 f854 	bl	8004a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2284      	movs	r2, #132	; 0x84
 80049f0:	2120      	movs	r1, #32
 80049f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	2100      	movs	r1, #0
 80049fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b004      	add	sp, #16
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2280      	movs	r2, #128	; 0x80
 8004a16:	5c9b      	ldrb	r3, [r3, r2]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e02f      	b.n	8004a80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	2101      	movs	r1, #1
 8004a26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2284      	movs	r2, #132	; 0x84
 8004a2c:	2124      	movs	r1, #36	; 0x24
 8004a2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2101      	movs	r1, #1
 8004a44:	438a      	bics	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f813 	bl	8004a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2284      	movs	r2, #132	; 0x84
 8004a72:	2120      	movs	r1, #32
 8004a74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2280      	movs	r2, #128	; 0x80
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	0018      	movs	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b004      	add	sp, #16
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	f1ffffff 	.word	0xf1ffffff

08004a8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004a94:	2314      	movs	r3, #20
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	4a2f      	ldr	r2, [pc, #188]	; (8004b58 <UARTEx_SetNbDataToProcess+0xcc>)
 8004a9a:	ca03      	ldmia	r2!, {r0, r1}
 8004a9c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <UARTEx_SetNbDataToProcess+0xd0>)
 8004aa4:	ca03      	ldmia	r2!, {r0, r1}
 8004aa6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d108      	bne.n	8004ac2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	226a      	movs	r2, #106	; 0x6a
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2268      	movs	r2, #104	; 0x68
 8004abc:	2101      	movs	r1, #1
 8004abe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ac0:	e046      	b.n	8004b50 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ac2:	261f      	movs	r6, #31
 8004ac4:	19bb      	adds	r3, r7, r6
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aca:	201e      	movs	r0, #30
 8004acc:	183b      	adds	r3, r7, r0
 8004ace:	2208      	movs	r2, #8
 8004ad0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	0e5b      	lsrs	r3, r3, #25
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	241d      	movs	r4, #29
 8004ade:	193b      	adds	r3, r7, r4
 8004ae0:	2107      	movs	r1, #7
 8004ae2:	400a      	ands	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	0f5b      	lsrs	r3, r3, #29
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	251c      	movs	r5, #28
 8004af2:	197b      	adds	r3, r7, r5
 8004af4:	2107      	movs	r1, #7
 8004af6:	400a      	ands	r2, r1
 8004af8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004afa:	183b      	adds	r3, r7, r0
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	197a      	adds	r2, r7, r5
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	2114      	movs	r1, #20
 8004b04:	1879      	adds	r1, r7, r1
 8004b06:	5c8a      	ldrb	r2, [r1, r2]
 8004b08:	435a      	muls	r2, r3
 8004b0a:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b0c:	197b      	adds	r3, r7, r5
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	250c      	movs	r5, #12
 8004b12:	197a      	adds	r2, r7, r5
 8004b14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b16:	0019      	movs	r1, r3
 8004b18:	f7fb fc20 	bl	800035c <__divsi3>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	226a      	movs	r2, #106	; 0x6a
 8004b24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b26:	19bb      	adds	r3, r7, r6
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	193a      	adds	r2, r7, r4
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	2114      	movs	r1, #20
 8004b30:	1879      	adds	r1, r7, r1
 8004b32:	5c8a      	ldrb	r2, [r1, r2]
 8004b34:	435a      	muls	r2, r3
 8004b36:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b38:	193b      	adds	r3, r7, r4
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	197a      	adds	r2, r7, r5
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b40:	0019      	movs	r1, r3
 8004b42:	f7fb fc0b 	bl	800035c <__divsi3>
 8004b46:	0003      	movs	r3, r0
 8004b48:	b299      	uxth	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2268      	movs	r2, #104	; 0x68
 8004b4e:	5299      	strh	r1, [r3, r2]
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b009      	add	sp, #36	; 0x24
 8004b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b58:	08009fec 	.word	0x08009fec
 8004b5c:	08009ff4 	.word	0x08009ff4

08004b60 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6819      	ldr	r1, [r3, #0]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	435b      	muls	r3, r3
 8004b74:	001a      	movs	r2, r3
 8004b76:	0013      	movs	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	400b      	ands	r3, r1
 8004b80:	001a      	movs	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	435b      	muls	r3, r3
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	434b      	muls	r3, r1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b004      	add	sp, #16
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	43d2      	mvns	r2, r2
 8004bac:	401a      	ands	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	434b      	muls	r3, r1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b004      	add	sp, #16
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6899      	ldr	r1, [r3, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	435b      	muls	r3, r3
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	0013      	movs	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	43db      	mvns	r3, r3
 8004be0:	400b      	ands	r3, r1
 8004be2:	001a      	movs	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	435b      	muls	r3, r3
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	434b      	muls	r3, r1
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	609a      	str	r2, [r3, #8]
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b004      	add	sp, #16
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68d9      	ldr	r1, [r3, #12]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	435b      	muls	r3, r3
 8004c0e:	001a      	movs	r2, r3
 8004c10:	0013      	movs	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	43db      	mvns	r3, r3
 8004c18:	400b      	ands	r3, r1
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	435b      	muls	r3, r3
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	434b      	muls	r3, r1
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	60da      	str	r2, [r3, #12]
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a19      	ldr	r1, [r3, #32]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	435b      	muls	r3, r3
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4353      	muls	r3, r2
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	435a      	muls	r2, r3
 8004c4e:	0013      	movs	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	43db      	mvns	r3, r3
 8004c56:	400b      	ands	r3, r1
 8004c58:	001a      	movs	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	435b      	muls	r3, r3
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	434b      	muls	r3, r1
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	434b      	muls	r3, r1
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	434b      	muls	r3, r1
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b004      	add	sp, #16
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	0a12      	lsrs	r2, r2, #8
 8004c90:	4353      	muls	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0a12      	lsrs	r2, r2, #8
 8004c96:	4353      	muls	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	0a12      	lsrs	r2, r2, #8
 8004c9c:	435a      	muls	r2, r3
 8004c9e:	0013      	movs	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	001a      	movs	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	0a09      	lsrs	r1, r1, #8
 8004cb2:	434b      	muls	r3, r1
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	0a09      	lsrs	r1, r1, #8
 8004cb8:	434b      	muls	r3, r1
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	0a09      	lsrs	r1, r1, #8
 8004cbe:	434b      	muls	r3, r1
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	434b      	muls	r3, r1
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b004      	add	sp, #16
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004ce0:	e047      	b.n	8004d72 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4091      	lsls	r1, r2
 8004cec:	000a      	movs	r2, r1
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d039      	beq.n	8004d6c <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d003      	beq.n	8004d08 <LL_GPIO_Init+0x36>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d10d      	bne.n	8004d24 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff ff56 	bl	8004bc2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff ff3a 	bl	8004b98 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7ff ff64 	bl	8004bfa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d111      	bne.n	8004d5e <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2bff      	cmp	r3, #255	; 0xff
 8004d3e:	d807      	bhi.n	8004d50 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7ff ff72 	bl	8004c32 <LL_GPIO_SetAFPin_0_7>
 8004d4e:	e006      	b.n	8004d5e <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff ff8d 	bl	8004c78 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f7ff fefa 	bl	8004b60 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	40da      	lsrs	r2, r3
 8004d7a:	1e13      	subs	r3, r2, #0
 8004d7c:	d1b1      	bne.n	8004ce2 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b004      	add	sp, #16
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	085a      	lsrs	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b002      	add	sp, #8
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <LL_APB1_GRP1_EnableClock>:
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <LL_APB1_GRP1_EnableClock+0x28>)
 8004dae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <LL_APB1_GRP1_EnableClock+0x28>)
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <LL_APB1_GRP1_EnableClock+0x28>)
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000

08004dd0 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if(UCPD1 == UCPDx)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <LL_UCPD_Init+0x68>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d104      	bne.n	8004dec <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	049b      	lsls	r3, r3, #18
 8004de6:	0018      	movs	r0, r3
 8004de8:	f7ff ffdc 	bl	8004da4 <LL_APB1_GRP1_EnableClock>
  }

  if(UCPD2 == UCPDx)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <LL_UCPD_Init+0x6c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d104      	bne.n	8004dfe <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	04db      	lsls	r3, r3, #19
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff ffd3 	bl	8004da4 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7ff ffc1 	bl	8004d88 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <LL_UCPD_Init+0x70>)
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	02db      	lsls	r3, r3, #11
 8004e18:	4319      	orrs	r1, r3
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	019b      	lsls	r3, r3, #6
 8004e20:	4319      	orrs	r1, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	4000a000 	.word	0x4000a000
 8004e3c:	4000a400 	.word	0x4000a400
 8004e40:	fff10000 	.word	0xfff10000

08004e44 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	0292      	lsls	r2, r2, #10
 8004e52:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2207      	movs	r2, #7
 8004e58:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	220d      	movs	r2, #13
 8004e64:	60da      	str	r2, [r3, #12]
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <USB_EnableGlobalInt+0x24>)
 8004e80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	0000bf80 	.word	0x0000bf80

08004e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <USB_DisableGlobalInt+0x24>)
 8004ea2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	43d2      	mvns	r2, r2
 8004eac:	401a      	ands	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	0000bf80 	.word	0x0000bf80

08004ec0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	000a      	movs	r2, r1
 8004eca:	1cfb      	adds	r3, r7, #3
 8004ecc:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8004ece:	1cfb      	adds	r3, r7, #3
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	085a      	lsrs	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ee2:	e006      	b.n	8004ef2 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	2280      	movs	r2, #128	; 0x80
 8004eea:	0612      	lsls	r2, r2, #24
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004efc:	b084      	sub	sp, #16
 8004efe:	b590      	push	{r4, r7, lr}
 8004f00:	46c6      	mov	lr, r8
 8004f02:	b500      	push	{lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	2004      	movs	r0, #4
 8004f0c:	2410      	movs	r4, #16
 8004f0e:	46a4      	mov	ip, r4
 8004f10:	2408      	movs	r4, #8
 8004f12:	46a0      	mov	r8, r4
 8004f14:	44b8      	add	r8, r7
 8004f16:	44c4      	add	ip, r8
 8004f18:	4460      	add	r0, ip
 8004f1a:	6001      	str	r1, [r0, #0]
 8004f1c:	6042      	str	r2, [r0, #4]
 8004f1e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4393      	bics	r3, r2
 8004f2e:	001a      	movs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2100      	movs	r1, #0
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ffc1 	bl	8004ec0 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b002      	add	sp, #8
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	46b8      	mov	r8, r7
 8004f50:	bc90      	pop	{r4, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	b004      	add	sp, #16
 8004f56:	4718      	bx	r3

08004f58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b09c      	sub	sp, #112	; 0x70
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f62:	236f      	movs	r3, #111	; 0x6f
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4aca      	ldr	r2, [pc, #808]	; (80052a0 <USB_ActivateEndpoint+0x348>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* initialize Endpoint */
  switch (ep->type)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	78db      	ldrb	r3, [r3, #3]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d00e      	beq.n	8004fa2 <USB_ActivateEndpoint+0x4a>
 8004f84:	dc19      	bgt.n	8004fba <USB_ActivateEndpoint+0x62>
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d01c      	beq.n	8004fc4 <USB_ActivateEndpoint+0x6c>
 8004f8a:	dc16      	bgt.n	8004fba <USB_ActivateEndpoint+0x62>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <USB_ActivateEndpoint+0x3e>
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d00c      	beq.n	8004fae <USB_ActivateEndpoint+0x56>
 8004f94:	e011      	b.n	8004fba <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	0092      	lsls	r2, r2, #2
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8004fa0:	e011      	b.n	8004fc6 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa4:	22c0      	movs	r2, #192	; 0xc0
 8004fa6:	00d2      	lsls	r2, r2, #3
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8004fac:	e00b      	b.n	8004fc6 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	00d2      	lsls	r2, r2, #3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8004fb8:	e005      	b.n	8004fc6 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8004fba:	236f      	movs	r3, #111	; 0x6f
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
      break;
 8004fc2:	e000      	b.n	8004fc6 <USB_ActivateEndpoint+0x6e>
      break;
 8004fc4:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	18d3      	adds	r3, r2, r3
 8004fd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fd2:	49b4      	ldr	r1, [pc, #720]	; (80052a4 <USB_ActivateEndpoint+0x34c>)
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4ab0      	ldr	r2, [pc, #704]	; (80052a8 <USB_ActivateEndpoint+0x350>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	7812      	ldrb	r2, [r2, #0]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	663b      	str	r3, [r7, #96]	; 0x60
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	18d3      	adds	r3, r2, r3
 8004ffa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ffc:	49a9      	ldr	r1, [pc, #676]	; (80052a4 <USB_ActivateEndpoint+0x34c>)
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	7a9b      	ldrb	r3, [r3, #10]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d000      	beq.n	800500c <USB_ActivateEndpoint+0xb4>
 800500a:	e15b      	b.n	80052c4 <USB_ActivateEndpoint+0x36c>
  {
    if (ep->is_in != 0U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d06e      	beq.n	80050f2 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4aa4      	ldr	r2, [pc, #656]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800501c:	4694      	mov	ip, r2
 800501e:	4463      	add	r3, ip
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	49a0      	ldr	r1, [pc, #640]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800502a:	468c      	mov	ip, r1
 800502c:	4463      	add	r3, ip
 800502e:	0c12      	lsrs	r2, r2, #16
 8005030:	0412      	lsls	r2, r2, #16
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4a9c      	ldr	r2, [pc, #624]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800503c:	4694      	mov	ip, r2
 800503e:	4463      	add	r3, ip
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	889b      	ldrh	r3, [r3, #4]
 8005046:	089b      	lsrs	r3, r3, #2
 8005048:	b29b      	uxth	r3, r3
 800504a:	009a      	lsls	r2, r3, #2
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4896      	ldr	r0, [pc, #600]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005054:	4684      	mov	ip, r0
 8005056:	4463      	add	r3, ip
 8005058:	430a      	orrs	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	18d3      	adds	r3, r2, r3
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	4013      	ands	r3, r2
 8005070:	d011      	beq.n	8005096 <USB_ActivateEndpoint+0x13e>
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	18d3      	adds	r3, r2, r3
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a8a      	ldr	r2, [pc, #552]	; (80052a8 <USB_ActivateEndpoint+0x350>)
 8005080:	4013      	ands	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	18d3      	adds	r3, r2, r3
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4987      	ldr	r1, [pc, #540]	; (80052b0 <USB_ActivateEndpoint+0x358>)
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d016      	beq.n	80050cc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	18d3      	adds	r3, r2, r3
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a82      	ldr	r2, [pc, #520]	; (80052b4 <USB_ActivateEndpoint+0x35c>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	4053      	eors	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	18d3      	adds	r3, r2, r3
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4977      	ldr	r1, [pc, #476]	; (80052a4 <USB_ActivateEndpoint+0x34c>)
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e23d      	b.n	8005548 <USB_ActivateEndpoint+0x5f0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	18d3      	adds	r3, r2, r3
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a76      	ldr	r2, [pc, #472]	; (80052b4 <USB_ActivateEndpoint+0x35c>)
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	18d3      	adds	r3, r2, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	496e      	ldr	r1, [pc, #440]	; (80052a4 <USB_ActivateEndpoint+0x34c>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e22a      	b.n	8005548 <USB_ActivateEndpoint+0x5f0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4a6c      	ldr	r2, [pc, #432]	; (80052ac <USB_ActivateEndpoint+0x354>)
 80050fa:	4694      	mov	ip, r2
 80050fc:	4463      	add	r3, ip
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4969      	ldr	r1, [pc, #420]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005108:	468c      	mov	ip, r1
 800510a:	4463      	add	r3, ip
 800510c:	0c12      	lsrs	r2, r2, #16
 800510e:	0412      	lsls	r2, r2, #16
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4a64      	ldr	r2, [pc, #400]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800511a:	4694      	mov	ip, r2
 800511c:	4463      	add	r3, ip
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	889b      	ldrh	r3, [r3, #4]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	b29b      	uxth	r3, r3
 8005128:	009a      	lsls	r2, r3, #2
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	485e      	ldr	r0, [pc, #376]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005132:	4684      	mov	ip, r0
 8005134:	4463      	add	r3, ip
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005142:	4694      	mov	ip, r2
 8005144:	4463      	add	r3, ip
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4957      	ldr	r1, [pc, #348]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005150:	468c      	mov	ip, r1
 8005152:	4463      	add	r3, ip
 8005154:	0412      	lsls	r2, r2, #16
 8005156:	0c12      	lsrs	r2, r2, #16
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d121      	bne.n	80051a6 <USB_ActivateEndpoint+0x24e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4a50      	ldr	r2, [pc, #320]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800516a:	4694      	mov	ip, r2
 800516c:	4463      	add	r3, ip
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	494d      	ldr	r1, [pc, #308]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005178:	468c      	mov	ip, r1
 800517a:	4463      	add	r3, ip
 800517c:	494e      	ldr	r1, [pc, #312]	; (80052b8 <USB_ActivateEndpoint+0x360>)
 800517e:	400a      	ands	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4a48      	ldr	r2, [pc, #288]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800518a:	4694      	mov	ip, r2
 800518c:	4463      	add	r3, ip
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4945      	ldr	r1, [pc, #276]	; (80052ac <USB_ActivateEndpoint+0x354>)
 8005198:	468c      	mov	ip, r1
 800519a:	4463      	add	r3, ip
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	0609      	lsls	r1, r1, #24
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	e041      	b.n	800522a <USB_ActivateEndpoint+0x2d2>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b3e      	cmp	r3, #62	; 0x3e
 80051ac:	d81d      	bhi.n	80051ea <USB_ActivateEndpoint+0x292>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	667b      	str	r3, [r7, #100]	; 0x64
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2201      	movs	r2, #1
 80051bc:	4013      	ands	r3, r2
 80051be:	d002      	beq.n	80051c6 <USB_ActivateEndpoint+0x26e>
 80051c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c2:	3301      	adds	r3, #1
 80051c4:	667b      	str	r3, [r7, #100]	; 0x64
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4a37      	ldr	r2, [pc, #220]	; (80052ac <USB_ActivateEndpoint+0x354>)
 80051ce:	4694      	mov	ip, r2
 80051d0:	4463      	add	r3, ip
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d6:	069a      	lsls	r2, r3, #26
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	4833      	ldr	r0, [pc, #204]	; (80052ac <USB_ActivateEndpoint+0x354>)
 80051e0:	4684      	mov	ip, r0
 80051e2:	4463      	add	r3, ip
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	e01f      	b.n	800522a <USB_ActivateEndpoint+0x2d2>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	667b      	str	r3, [r7, #100]	; 0x64
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	221f      	movs	r2, #31
 80051f8:	4013      	ands	r3, r2
 80051fa:	d102      	bne.n	8005202 <USB_ActivateEndpoint+0x2aa>
 80051fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fe:	3b01      	subs	r3, #1
 8005200:	667b      	str	r3, [r7, #100]	; 0x64
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4a28      	ldr	r2, [pc, #160]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800520a:	4694      	mov	ip, r2
 800520c:	4463      	add	r3, ip
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005212:	069b      	lsls	r3, r3, #26
 8005214:	431a      	orrs	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4923      	ldr	r1, [pc, #140]	; (80052ac <USB_ActivateEndpoint+0x354>)
 800521e:	468c      	mov	ip, r1
 8005220:	4463      	add	r3, ip
 8005222:	2180      	movs	r1, #128	; 0x80
 8005224:	0609      	lsls	r1, r1, #24
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	18d3      	adds	r3, r2, r3
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	01db      	lsls	r3, r3, #7
 800523e:	4013      	ands	r3, r2
 8005240:	d011      	beq.n	8005266 <USB_ActivateEndpoint+0x30e>
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	18d3      	adds	r3, r2, r3
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a16      	ldr	r2, [pc, #88]	; (80052a8 <USB_ActivateEndpoint+0x350>)
 8005250:	4013      	ands	r3, r2
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	18d3      	adds	r3, r2, r3
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	4916      	ldr	r1, [pc, #88]	; (80052bc <USB_ActivateEndpoint+0x364>)
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	18d3      	adds	r3, r2, r3
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a13      	ldr	r2, [pc, #76]	; (80052c0 <USB_ActivateEndpoint+0x368>)
 8005274:	4013      	ands	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2280      	movs	r2, #128	; 0x80
 800527c:	0152      	lsls	r2, r2, #5
 800527e:	4053      	eors	r3, r2
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2280      	movs	r2, #128	; 0x80
 8005286:	0192      	lsls	r2, r2, #6
 8005288:	4053      	eors	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	18d3      	adds	r3, r2, r3
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	4902      	ldr	r1, [pc, #8]	; (80052a4 <USB_ActivateEndpoint+0x34c>)
 800529a:	430a      	orrs	r2, r1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e153      	b.n	8005548 <USB_ActivateEndpoint+0x5f0>
 80052a0:	077f898f 	.word	0x077f898f
 80052a4:	00008080 	.word	0x00008080
 80052a8:	077f8f8f 	.word	0x077f8f8f
 80052ac:	40009800 	.word	0x40009800
 80052b0:	000080c0 	.word	0x000080c0
 80052b4:	077f8fbf 	.word	0x077f8fbf
 80052b8:	83ffffff 	.word	0x83ffffff
 80052bc:	0000c080 	.word	0x0000c080
 80052c0:	077fbf8f 	.word	0x077fbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4aa1      	ldr	r2, [pc, #644]	; (8005558 <USB_ActivateEndpoint+0x600>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	18d3      	adds	r3, r2, r3
 80052e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052e2:	499e      	ldr	r1, [pc, #632]	; (800555c <USB_ActivateEndpoint+0x604>)
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	4a9c      	ldr	r2, [pc, #624]	; (8005560 <USB_ActivateEndpoint+0x608>)
 80052f0:	4694      	mov	ip, r2
 80052f2:	4463      	add	r3, ip
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4998      	ldr	r1, [pc, #608]	; (8005560 <USB_ActivateEndpoint+0x608>)
 80052fe:	468c      	mov	ip, r1
 8005300:	4463      	add	r3, ip
 8005302:	0c12      	lsrs	r2, r2, #16
 8005304:	0412      	lsls	r2, r2, #16
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4a94      	ldr	r2, [pc, #592]	; (8005560 <USB_ActivateEndpoint+0x608>)
 8005310:	4694      	mov	ip, r2
 8005312:	4463      	add	r3, ip
 8005314:	6819      	ldr	r1, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	88db      	ldrh	r3, [r3, #6]
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	b29b      	uxth	r3, r3
 800531e:	009a      	lsls	r2, r3, #2
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	488e      	ldr	r0, [pc, #568]	; (8005560 <USB_ActivateEndpoint+0x608>)
 8005328:	4684      	mov	ip, r0
 800532a:	4463      	add	r3, ip
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4a8a      	ldr	r2, [pc, #552]	; (8005560 <USB_ActivateEndpoint+0x608>)
 8005338:	4694      	mov	ip, r2
 800533a:	4463      	add	r3, ip
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4986      	ldr	r1, [pc, #536]	; (8005560 <USB_ActivateEndpoint+0x608>)
 8005346:	468c      	mov	ip, r1
 8005348:	4463      	add	r3, ip
 800534a:	0c12      	lsrs	r2, r2, #16
 800534c:	0412      	lsls	r2, r2, #16
 800534e:	605a      	str	r2, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4a82      	ldr	r2, [pc, #520]	; (8005560 <USB_ActivateEndpoint+0x608>)
 8005358:	4694      	mov	ip, r2
 800535a:	4463      	add	r3, ip
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	891b      	ldrh	r3, [r3, #8]
 8005362:	089b      	lsrs	r3, r3, #2
 8005364:	b29b      	uxth	r3, r3
 8005366:	009a      	lsls	r2, r3, #2
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	487c      	ldr	r0, [pc, #496]	; (8005560 <USB_ActivateEndpoint+0x608>)
 8005370:	4684      	mov	ip, r0
 8005372:	4463      	add	r3, ip
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d169      	bne.n	8005454 <USB_ActivateEndpoint+0x4fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	18d3      	adds	r3, r2, r3
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800538e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	01db      	lsls	r3, r3, #7
 8005394:	4013      	ands	r3, r2
 8005396:	d011      	beq.n	80053bc <USB_ActivateEndpoint+0x464>
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	18d3      	adds	r3, r2, r3
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a6c      	ldr	r2, [pc, #432]	; (8005558 <USB_ActivateEndpoint+0x600>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b6:	496b      	ldr	r1, [pc, #428]	; (8005564 <USB_ActivateEndpoint+0x60c>)
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	18d3      	adds	r3, r2, r3
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	4013      	ands	r3, r2
 80053d0:	d011      	beq.n	80053f6 <USB_ActivateEndpoint+0x49e>
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	18d3      	adds	r3, r2, r3
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5e      	ldr	r2, [pc, #376]	; (8005558 <USB_ActivateEndpoint+0x600>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	18d3      	adds	r3, r2, r3
 80053ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f0:	495d      	ldr	r1, [pc, #372]	; (8005568 <USB_ActivateEndpoint+0x610>)
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5a      	ldr	r2, [pc, #360]	; (800556c <USB_ActivateEndpoint+0x614>)
 8005404:	4013      	ands	r3, r2
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	0152      	lsls	r2, r2, #5
 800540e:	4053      	eors	r3, r2
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	2280      	movs	r2, #128	; 0x80
 8005416:	0192      	lsls	r2, r2, #6
 8005418:	4053      	eors	r3, r2
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005428:	4951      	ldr	r1, [pc, #324]	; (8005570 <USB_ActivateEndpoint+0x618>)
 800542a:	430a      	orrs	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	18d3      	adds	r3, r2, r3
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a4e      	ldr	r2, [pc, #312]	; (8005574 <USB_ActivateEndpoint+0x61c>)
 800543c:	4013      	ands	r3, r2
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	18d3      	adds	r3, r2, r3
 800544a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544c:	4948      	ldr	r1, [pc, #288]	; (8005570 <USB_ActivateEndpoint+0x618>)
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e079      	b.n	8005548 <USB_ActivateEndpoint+0x5f0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	65bb      	str	r3, [r7, #88]	; 0x58
 8005462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	01db      	lsls	r3, r3, #7
 8005468:	4013      	ands	r3, r2
 800546a:	d011      	beq.n	8005490 <USB_ActivateEndpoint+0x538>
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	18d3      	adds	r3, r2, r3
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a37      	ldr	r2, [pc, #220]	; (8005558 <USB_ActivateEndpoint+0x600>)
 800547a:	4013      	ands	r3, r2
 800547c:	657b      	str	r3, [r7, #84]	; 0x54
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	18d3      	adds	r3, r2, r3
 8005488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800548a:	4936      	ldr	r1, [pc, #216]	; (8005564 <USB_ActivateEndpoint+0x60c>)
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	653b      	str	r3, [r7, #80]	; 0x50
 800549e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a0:	2240      	movs	r2, #64	; 0x40
 80054a2:	4013      	ands	r3, r2
 80054a4:	d011      	beq.n	80054ca <USB_ActivateEndpoint+0x572>
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	18d3      	adds	r3, r2, r3
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a29      	ldr	r2, [pc, #164]	; (8005558 <USB_ActivateEndpoint+0x600>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	18d3      	adds	r3, r2, r3
 80054c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c4:	4928      	ldr	r1, [pc, #160]	; (8005568 <USB_ActivateEndpoint+0x610>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	78db      	ldrb	r3, [r3, #3]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d016      	beq.n	8005500 <USB_ActivateEndpoint+0x5a8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	18d3      	adds	r3, r2, r3
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <USB_ActivateEndpoint+0x61c>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44
 80054e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e6:	2220      	movs	r2, #32
 80054e8:	4053      	eors	r3, r2
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	18d3      	adds	r3, r2, r3
 80054f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f8:	491d      	ldr	r1, [pc, #116]	; (8005570 <USB_ActivateEndpoint+0x618>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e011      	b.n	8005524 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	18d3      	adds	r3, r2, r3
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a19      	ldr	r2, [pc, #100]	; (8005574 <USB_ActivateEndpoint+0x61c>)
 800550e:	4013      	ands	r3, r2
 8005510:	64bb      	str	r3, [r7, #72]	; 0x48
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800551e:	4914      	ldr	r1, [pc, #80]	; (8005570 <USB_ActivateEndpoint+0x618>)
 8005520:	430a      	orrs	r2, r1
 8005522:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	18d3      	adds	r3, r2, r3
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0e      	ldr	r2, [pc, #56]	; (800556c <USB_ActivateEndpoint+0x614>)
 8005532:	4013      	ands	r3, r2
 8005534:	643b      	str	r3, [r7, #64]	; 0x40
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	18d3      	adds	r3, r2, r3
 8005540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005542:	490b      	ldr	r1, [pc, #44]	; (8005570 <USB_ActivateEndpoint+0x618>)
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8005548:	236f      	movs	r3, #111	; 0x6f
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	781b      	ldrb	r3, [r3, #0]
}
 800554e:	0018      	movs	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	b01c      	add	sp, #112	; 0x70
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	077f8f8f 	.word	0x077f8f8f
 800555c:	00008180 	.word	0x00008180
 8005560:	40009800 	.word	0x40009800
 8005564:	0000c080 	.word	0x0000c080
 8005568:	000080c0 	.word	0x000080c0
 800556c:	077fbf8f 	.word	0x077fbf8f
 8005570:	00008080 	.word	0x00008080
 8005574:	077f8fbf 	.word	0x077f8fbf

08005578 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b096      	sub	sp, #88	; 0x58
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	7a9b      	ldrb	r3, [r3, #10]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d164      	bne.n	8005654 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02f      	beq.n	80055f2 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	4013      	ands	r3, r2
 80055a6:	d011      	beq.n	80055cc <USB_DeactivateEndpoint+0x54>
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	18d3      	adds	r3, r2, r3
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a9d      	ldr	r2, [pc, #628]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	18d3      	adds	r3, r2, r3
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	499a      	ldr	r1, [pc, #616]	; (8005830 <USB_DeactivateEndpoint+0x2b8>)
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	18d3      	adds	r3, r2, r3
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a96      	ldr	r2, [pc, #600]	; (8005834 <USB_DeactivateEndpoint+0x2bc>)
 80055da:	4013      	ands	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	4993      	ldr	r1, [pc, #588]	; (8005838 <USB_DeactivateEndpoint+0x2c0>)
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e117      	b.n	8005822 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	18d3      	adds	r3, r2, r3
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	2380      	movs	r3, #128	; 0x80
 8005604:	01db      	lsls	r3, r3, #7
 8005606:	4013      	ands	r3, r2
 8005608:	d011      	beq.n	800562e <USB_DeactivateEndpoint+0xb6>
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	18d3      	adds	r3, r2, r3
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a85      	ldr	r2, [pc, #532]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 8005618:	4013      	ands	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	18d3      	adds	r3, r2, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4984      	ldr	r1, [pc, #528]	; (800583c <USB_DeactivateEndpoint+0x2c4>)
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	18d3      	adds	r3, r2, r3
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a81      	ldr	r2, [pc, #516]	; (8005840 <USB_DeactivateEndpoint+0x2c8>)
 800563c:	4013      	ands	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	18d3      	adds	r3, r2, r3
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	497a      	ldr	r1, [pc, #488]	; (8005838 <USB_DeactivateEndpoint+0x2c0>)
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e0e6      	b.n	8005822 <USB_DeactivateEndpoint+0x2aa>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d171      	bne.n	8005740 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	18d3      	adds	r3, r2, r3
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
 800566a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	01db      	lsls	r3, r3, #7
 8005670:	4013      	ands	r3, r2
 8005672:	d011      	beq.n	8005698 <USB_DeactivateEndpoint+0x120>
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	18d3      	adds	r3, r2, r3
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6a      	ldr	r2, [pc, #424]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 8005682:	4013      	ands	r3, r2
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	18d3      	adds	r3, r2, r3
 8005690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005692:	496a      	ldr	r1, [pc, #424]	; (800583c <USB_DeactivateEndpoint+0x2c4>)
 8005694:	430a      	orrs	r2, r1
 8005696:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	18d3      	adds	r3, r2, r3
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	633b      	str	r3, [r7, #48]	; 0x30
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	4013      	ands	r3, r2
 80056ac:	d011      	beq.n	80056d2 <USB_DeactivateEndpoint+0x15a>
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	18d3      	adds	r3, r2, r3
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5c      	ldr	r2, [pc, #368]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 80056bc:	4013      	ands	r3, r2
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	18d3      	adds	r3, r2, r3
 80056ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056cc:	4958      	ldr	r1, [pc, #352]	; (8005830 <USB_DeactivateEndpoint+0x2b8>)
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	18d3      	adds	r3, r2, r3
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a53      	ldr	r2, [pc, #332]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	18d3      	adds	r3, r2, r3
 80056ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f0:	494f      	ldr	r1, [pc, #316]	; (8005830 <USB_DeactivateEndpoint+0x2b8>)
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	18d3      	adds	r3, r2, r3
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4f      	ldr	r2, [pc, #316]	; (8005840 <USB_DeactivateEndpoint+0x2c8>)
 8005704:	4013      	ands	r3, r2
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	18d3      	adds	r3, r2, r3
 8005712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005714:	4948      	ldr	r1, [pc, #288]	; (8005838 <USB_DeactivateEndpoint+0x2c0>)
 8005716:	430a      	orrs	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	18d3      	adds	r3, r2, r3
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a43      	ldr	r2, [pc, #268]	; (8005834 <USB_DeactivateEndpoint+0x2bc>)
 8005728:	4013      	ands	r3, r2
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	18d3      	adds	r3, r2, r3
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	493f      	ldr	r1, [pc, #252]	; (8005838 <USB_DeactivateEndpoint+0x2c0>)
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e070      	b.n	8005822 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	18d3      	adds	r3, r2, r3
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	657b      	str	r3, [r7, #84]	; 0x54
 800574e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	01db      	lsls	r3, r3, #7
 8005754:	4013      	ands	r3, r2
 8005756:	d011      	beq.n	800577c <USB_DeactivateEndpoint+0x204>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	18d3      	adds	r3, r2, r3
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a31      	ldr	r2, [pc, #196]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 8005766:	4013      	ands	r3, r2
 8005768:	653b      	str	r3, [r7, #80]	; 0x50
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	18d3      	adds	r3, r2, r3
 8005774:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005776:	4931      	ldr	r1, [pc, #196]	; (800583c <USB_DeactivateEndpoint+0x2c4>)
 8005778:	430a      	orrs	r2, r1
 800577a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578c:	2240      	movs	r2, #64	; 0x40
 800578e:	4013      	ands	r3, r2
 8005790:	d011      	beq.n	80057b6 <USB_DeactivateEndpoint+0x23e>
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	18d3      	adds	r3, r2, r3
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a23      	ldr	r2, [pc, #140]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	18d3      	adds	r3, r2, r3
 80057ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b0:	491f      	ldr	r1, [pc, #124]	; (8005830 <USB_DeactivateEndpoint+0x2b8>)
 80057b2:	430a      	orrs	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	; (800582c <USB_DeactivateEndpoint+0x2b4>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	647b      	str	r3, [r7, #68]	; 0x44
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	18d3      	adds	r3, r2, r3
 80057d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d4:	4919      	ldr	r1, [pc, #100]	; (800583c <USB_DeactivateEndpoint+0x2c4>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	18d3      	adds	r3, r2, r3
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <USB_DeactivateEndpoint+0x2bc>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	643b      	str	r3, [r7, #64]	; 0x40
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	18d3      	adds	r3, r2, r3
 80057f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f8:	490f      	ldr	r1, [pc, #60]	; (8005838 <USB_DeactivateEndpoint+0x2c0>)
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	18d3      	adds	r3, r2, r3
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <USB_DeactivateEndpoint+0x2c8>)
 800580c:	4013      	ands	r3, r2
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	18d3      	adds	r3, r2, r3
 800581a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800581c:	4906      	ldr	r1, [pc, #24]	; (8005838 <USB_DeactivateEndpoint+0x2c0>)
 800581e:	430a      	orrs	r2, r1
 8005820:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	0018      	movs	r0, r3
 8005826:	46bd      	mov	sp, r7
 8005828:	b016      	add	sp, #88	; 0x58
 800582a:	bd80      	pop	{r7, pc}
 800582c:	077f8f8f 	.word	0x077f8f8f
 8005830:	000080c0 	.word	0x000080c0
 8005834:	077f8fbf 	.word	0x077f8fbf
 8005838:	00008080 	.word	0x00008080
 800583c:	0000c080 	.word	0x0000c080
 8005840:	077fbf8f 	.word	0x077fbf8f

08005844 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b099      	sub	sp, #100	; 0x64
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <USB_EPStartXfer+0x16>
 8005856:	f000 fd42 	bl	80062de <USB_EPStartXfer+0xa9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800586c:	e002      	b.n	8005874 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	7a9b      	ldrb	r3, [r3, #10]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d12b      	bne.n	80058d4 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6959      	ldr	r1, [r3, #20]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	889a      	ldrh	r2, [r3, #4]
 8005884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005886:	b29b      	uxth	r3, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 f9d7 	bl	8006c3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4ade      	ldr	r2, [pc, #888]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005896:	4694      	mov	ip, r2
 8005898:	4463      	add	r3, ip
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	49db      	ldr	r1, [pc, #876]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 80058a4:	468c      	mov	ip, r1
 80058a6:	4463      	add	r3, ip
 80058a8:	0412      	lsls	r2, r2, #16
 80058aa:	0c12      	lsrs	r2, r2, #16
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4ad6      	ldr	r2, [pc, #856]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 80058b6:	4694      	mov	ip, r2
 80058b8:	4463      	add	r3, ip
 80058ba:	6819      	ldr	r1, [r3, #0]
 80058bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058be:	041a      	lsls	r2, r3, #16
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	48d2      	ldr	r0, [pc, #840]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 80058c8:	4684      	mov	ip, r0
 80058ca:	4463      	add	r3, ip
 80058cc:	430a      	orrs	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f000 fce9 	bl	80062a6 <USB_EPStartXfer+0xa62>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	78db      	ldrb	r3, [r3, #3]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d000      	beq.n	80058de <USB_EPStartXfer+0x9a>
 80058dc:	e35e      	b.n	8005f9c <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d800      	bhi.n	80058ec <USB_EPStartXfer+0xa8>
 80058ea:	e309      	b.n	8005f00 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	18d3      	adds	r3, r2, r3
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4ac6      	ldr	r2, [pc, #792]	; (8005c14 <USB_EPStartXfer+0x3d0>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	18d3      	adds	r3, r2, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	49c3      	ldr	r1, [pc, #780]	; (8005c18 <USB_EPStartXfer+0x3d4>)
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	18d3      	adds	r3, r2, r3
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	4013      	ands	r3, r2
 800592c:	d100      	bne.n	8005930 <USB_EPStartXfer+0xec>
 800592e:	e177      	b.n	8005c20 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d172      	bne.n	8005a1e <USB_EPStartXfer+0x1da>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4ab4      	ldr	r2, [pc, #720]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005940:	4694      	mov	ip, r2
 8005942:	4463      	add	r3, ip
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	49b0      	ldr	r1, [pc, #704]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 800594e:	468c      	mov	ip, r1
 8005950:	4463      	add	r3, ip
 8005952:	0412      	lsls	r2, r2, #16
 8005954:	0c12      	lsrs	r2, r2, #16
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d121      	bne.n	80059a2 <USB_EPStartXfer+0x15e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4aaa      	ldr	r2, [pc, #680]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005966:	4694      	mov	ip, r2
 8005968:	4463      	add	r3, ip
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	49a7      	ldr	r1, [pc, #668]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005974:	468c      	mov	ip, r1
 8005976:	4463      	add	r3, ip
 8005978:	49a8      	ldr	r1, [pc, #672]	; (8005c1c <USB_EPStartXfer+0x3d8>)
 800597a:	400a      	ands	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4aa2      	ldr	r2, [pc, #648]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005986:	4694      	mov	ip, r2
 8005988:	4463      	add	r3, ip
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	499f      	ldr	r1, [pc, #636]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005994:	468c      	mov	ip, r1
 8005996:	4463      	add	r3, ip
 8005998:	2180      	movs	r1, #128	; 0x80
 800599a:	0609      	lsls	r1, r1, #24
 800599c:	430a      	orrs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
 80059a0:	e062      	b.n	8005a68 <USB_EPStartXfer+0x224>
 80059a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a4:	2b3e      	cmp	r3, #62	; 0x3e
 80059a6:	d81b      	bhi.n	80059e0 <USB_EPStartXfer+0x19c>
 80059a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	657b      	str	r3, [r7, #84]	; 0x54
 80059ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b0:	2201      	movs	r2, #1
 80059b2:	4013      	ands	r3, r2
 80059b4:	d002      	beq.n	80059bc <USB_EPStartXfer+0x178>
 80059b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b8:	3301      	adds	r3, #1
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4a93      	ldr	r2, [pc, #588]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 80059c4:	4694      	mov	ip, r2
 80059c6:	4463      	add	r3, ip
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059cc:	069a      	lsls	r2, r3, #26
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	488e      	ldr	r0, [pc, #568]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 80059d6:	4684      	mov	ip, r0
 80059d8:	4463      	add	r3, ip
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	e043      	b.n	8005a68 <USB_EPStartXfer+0x224>
 80059e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	657b      	str	r3, [r7, #84]	; 0x54
 80059e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e8:	221f      	movs	r2, #31
 80059ea:	4013      	ands	r3, r2
 80059ec:	d102      	bne.n	80059f4 <USB_EPStartXfer+0x1b0>
 80059ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f0:	3b01      	subs	r3, #1
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4a85      	ldr	r2, [pc, #532]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 80059fc:	4694      	mov	ip, r2
 80059fe:	4463      	add	r3, ip
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a04:	069b      	lsls	r3, r3, #26
 8005a06:	431a      	orrs	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4980      	ldr	r1, [pc, #512]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005a10:	468c      	mov	ip, r1
 8005a12:	4463      	add	r3, ip
 8005a14:	2180      	movs	r1, #128	; 0x80
 8005a16:	0609      	lsls	r1, r1, #24
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	e024      	b.n	8005a68 <USB_EPStartXfer+0x224>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d120      	bne.n	8005a68 <USB_EPStartXfer+0x224>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4a78      	ldr	r2, [pc, #480]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005a2e:	4694      	mov	ip, r2
 8005a30:	4463      	add	r3, ip
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4975      	ldr	r1, [pc, #468]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005a3c:	468c      	mov	ip, r1
 8005a3e:	4463      	add	r3, ip
 8005a40:	0412      	lsls	r2, r2, #16
 8005a42:	0c12      	lsrs	r2, r2, #16
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4a70      	ldr	r2, [pc, #448]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005a4e:	4694      	mov	ip, r2
 8005a50:	4463      	add	r3, ip
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a56:	041a      	lsls	r2, r3, #16
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	486c      	ldr	r0, [pc, #432]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005a60:	4684      	mov	ip, r0
 8005a62:	4463      	add	r3, ip
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8005a68:	205a      	movs	r0, #90	; 0x5a
 8005a6a:	183b      	adds	r3, r7, r0
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	8912      	ldrh	r2, [r2, #8]
 8005a70:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6959      	ldr	r1, [r3, #20]
 8005a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a78:	b29c      	uxth	r4, r3
 8005a7a:	183b      	adds	r3, r7, r0
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	0023      	movs	r3, r4
 8005a82:	f001 f8db 	bl	8006c3c <USB_WritePMA>
            ep->xfer_buff += len;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8c:	18d2      	adds	r2, r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d906      	bls.n	8005aac <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa4:	1ad2      	subs	r2, r2, r3
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	621a      	str	r2, [r3, #32]
 8005aaa:	e005      	b.n	8005ab8 <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
              ep->xfer_len_db = 0U;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d172      	bne.n	8005ba6 <USB_EPStartXfer+0x362>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005ac8:	4694      	mov	ip, r2
 8005aca:	4463      	add	r3, ip
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	494e      	ldr	r1, [pc, #312]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005ad6:	468c      	mov	ip, r1
 8005ad8:	4463      	add	r3, ip
 8005ada:	0412      	lsls	r2, r2, #16
 8005adc:	0c12      	lsrs	r2, r2, #16
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d121      	bne.n	8005b2a <USB_EPStartXfer+0x2e6>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4a48      	ldr	r2, [pc, #288]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005aee:	4694      	mov	ip, r2
 8005af0:	4463      	add	r3, ip
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4945      	ldr	r1, [pc, #276]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005afc:	468c      	mov	ip, r1
 8005afe:	4463      	add	r3, ip
 8005b00:	4946      	ldr	r1, [pc, #280]	; (8005c1c <USB_EPStartXfer+0x3d8>)
 8005b02:	400a      	ands	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4a40      	ldr	r2, [pc, #256]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005b0e:	4694      	mov	ip, r2
 8005b10:	4463      	add	r3, ip
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	493d      	ldr	r1, [pc, #244]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005b1c:	468c      	mov	ip, r1
 8005b1e:	4463      	add	r3, ip
 8005b20:	2180      	movs	r1, #128	; 0x80
 8005b22:	0609      	lsls	r1, r1, #24
 8005b24:	430a      	orrs	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e062      	b.n	8005bf0 <USB_EPStartXfer+0x3ac>
 8005b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b2e:	d81b      	bhi.n	8005b68 <USB_EPStartXfer+0x324>
 8005b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	653b      	str	r3, [r7, #80]	; 0x50
 8005b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d002      	beq.n	8005b44 <USB_EPStartXfer+0x300>
 8005b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b40:	3301      	adds	r3, #1
 8005b42:	653b      	str	r3, [r7, #80]	; 0x50
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4a31      	ldr	r2, [pc, #196]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005b4c:	4694      	mov	ip, r2
 8005b4e:	4463      	add	r3, ip
 8005b50:	6819      	ldr	r1, [r3, #0]
 8005b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b54:	069a      	lsls	r2, r3, #26
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	482c      	ldr	r0, [pc, #176]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005b5e:	4684      	mov	ip, r0
 8005b60:	4463      	add	r3, ip
 8005b62:	430a      	orrs	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e043      	b.n	8005bf0 <USB_EPStartXfer+0x3ac>
 8005b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	221f      	movs	r2, #31
 8005b72:	4013      	ands	r3, r2
 8005b74:	d102      	bne.n	8005b7c <USB_EPStartXfer+0x338>
 8005b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005b84:	4694      	mov	ip, r2
 8005b86:	4463      	add	r3, ip
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8c:	069b      	lsls	r3, r3, #26
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	491e      	ldr	r1, [pc, #120]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005b98:	468c      	mov	ip, r1
 8005b9a:	4463      	add	r3, ip
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	0609      	lsls	r1, r1, #24
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e024      	b.n	8005bf0 <USB_EPStartXfer+0x3ac>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d120      	bne.n	8005bf0 <USB_EPStartXfer+0x3ac>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005bb6:	4694      	mov	ip, r2
 8005bb8:	4463      	add	r3, ip
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4913      	ldr	r1, [pc, #76]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005bc4:	468c      	mov	ip, r1
 8005bc6:	4463      	add	r3, ip
 8005bc8:	0412      	lsls	r2, r2, #16
 8005bca:	0c12      	lsrs	r2, r2, #16
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005bd6:	4694      	mov	ip, r2
 8005bd8:	4463      	add	r3, ip
 8005bda:	6819      	ldr	r1, [r3, #0]
 8005bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bde:	041a      	lsls	r2, r3, #16
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	480a      	ldr	r0, [pc, #40]	; (8005c10 <USB_EPStartXfer+0x3cc>)
 8005be8:	4684      	mov	ip, r0
 8005bea:	4463      	add	r3, ip
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bf0:	205a      	movs	r0, #90	; 0x5a
 8005bf2:	183b      	adds	r3, r7, r0
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	88d2      	ldrh	r2, [r2, #6]
 8005bf8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6959      	ldr	r1, [r3, #20]
 8005bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c00:	b29c      	uxth	r4, r3
 8005c02:	183b      	adds	r3, r7, r0
 8005c04:	881a      	ldrh	r2, [r3, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	0023      	movs	r3, r4
 8005c0a:	f001 f817 	bl	8006c3c <USB_WritePMA>
 8005c0e:	e34a      	b.n	80062a6 <USB_EPStartXfer+0xa62>
 8005c10:	40009800 	.word	0x40009800
 8005c14:	077f8f8f 	.word	0x077f8f8f
 8005c18:	00008180 	.word	0x00008180
 8005c1c:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d172      	bne.n	8005d0e <USB_EPStartXfer+0x4ca>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4ad7      	ldr	r2, [pc, #860]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005c30:	4694      	mov	ip, r2
 8005c32:	4463      	add	r3, ip
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	49d3      	ldr	r1, [pc, #844]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005c3e:	468c      	mov	ip, r1
 8005c40:	4463      	add	r3, ip
 8005c42:	0412      	lsls	r2, r2, #16
 8005c44:	0c12      	lsrs	r2, r2, #16
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d121      	bne.n	8005c92 <USB_EPStartXfer+0x44e>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	4acd      	ldr	r2, [pc, #820]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005c56:	4694      	mov	ip, r2
 8005c58:	4463      	add	r3, ip
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	49ca      	ldr	r1, [pc, #808]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005c64:	468c      	mov	ip, r1
 8005c66:	4463      	add	r3, ip
 8005c68:	49c9      	ldr	r1, [pc, #804]	; (8005f90 <USB_EPStartXfer+0x74c>)
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4ac5      	ldr	r2, [pc, #788]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005c76:	4694      	mov	ip, r2
 8005c78:	4463      	add	r3, ip
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	49c2      	ldr	r1, [pc, #776]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005c84:	468c      	mov	ip, r1
 8005c86:	4463      	add	r3, ip
 8005c88:	2180      	movs	r1, #128	; 0x80
 8005c8a:	0609      	lsls	r1, r1, #24
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e062      	b.n	8005d58 <USB_EPStartXfer+0x514>
 8005c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c94:	2b3e      	cmp	r3, #62	; 0x3e
 8005c96:	d81b      	bhi.n	8005cd0 <USB_EPStartXfer+0x48c>
 8005c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d002      	beq.n	8005cac <USB_EPStartXfer+0x468>
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca8:	3301      	adds	r3, #1
 8005caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4ab6      	ldr	r2, [pc, #728]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005cb4:	4694      	mov	ip, r2
 8005cb6:	4463      	add	r3, ip
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbc:	069a      	lsls	r2, r3, #26
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	48b1      	ldr	r0, [pc, #708]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005cc6:	4684      	mov	ip, r0
 8005cc8:	4463      	add	r3, ip
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e043      	b.n	8005d58 <USB_EPStartXfer+0x514>
 8005cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd8:	221f      	movs	r2, #31
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d102      	bne.n	8005ce4 <USB_EPStartXfer+0x4a0>
 8005cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4aa8      	ldr	r2, [pc, #672]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005cec:	4694      	mov	ip, r2
 8005cee:	4463      	add	r3, ip
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	069b      	lsls	r3, r3, #26
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	49a3      	ldr	r1, [pc, #652]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005d00:	468c      	mov	ip, r1
 8005d02:	4463      	add	r3, ip
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	0609      	lsls	r1, r1, #24
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e024      	b.n	8005d58 <USB_EPStartXfer+0x514>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d120      	bne.n	8005d58 <USB_EPStartXfer+0x514>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4a9b      	ldr	r2, [pc, #620]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005d1e:	4694      	mov	ip, r2
 8005d20:	4463      	add	r3, ip
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4998      	ldr	r1, [pc, #608]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005d2c:	468c      	mov	ip, r1
 8005d2e:	4463      	add	r3, ip
 8005d30:	0412      	lsls	r2, r2, #16
 8005d32:	0c12      	lsrs	r2, r2, #16
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4a93      	ldr	r2, [pc, #588]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005d3e:	4694      	mov	ip, r2
 8005d40:	4463      	add	r3, ip
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d46:	041a      	lsls	r2, r3, #16
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	488f      	ldr	r0, [pc, #572]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005d50:	4684      	mov	ip, r0
 8005d52:	4463      	add	r3, ip
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d58:	205a      	movs	r0, #90	; 0x5a
 8005d5a:	183b      	adds	r3, r7, r0
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	88d2      	ldrh	r2, [r2, #6]
 8005d60:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6959      	ldr	r1, [r3, #20]
 8005d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d68:	b29c      	uxth	r4, r3
 8005d6a:	183b      	adds	r3, r7, r0
 8005d6c:	881a      	ldrh	r2, [r3, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	0023      	movs	r3, r4
 8005d72:	f000 ff63 	bl	8006c3c <USB_WritePMA>
            ep->xfer_buff += len;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7c:	18d2      	adds	r2, r2, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d906      	bls.n	8005d9c <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	621a      	str	r2, [r3, #32]
 8005d9a:	e005      	b.n	8005da8 <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	65fb      	str	r3, [r7, #92]	; 0x5c
              ep->xfer_len_db = 0U;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d172      	bne.n	8005e96 <USB_EPStartXfer+0x652>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4a75      	ldr	r2, [pc, #468]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005db8:	4694      	mov	ip, r2
 8005dba:	4463      	add	r3, ip
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4971      	ldr	r1, [pc, #452]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005dc6:	468c      	mov	ip, r1
 8005dc8:	4463      	add	r3, ip
 8005dca:	0412      	lsls	r2, r2, #16
 8005dcc:	0c12      	lsrs	r2, r2, #16
 8005dce:	605a      	str	r2, [r3, #4]
 8005dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d121      	bne.n	8005e1a <USB_EPStartXfer+0x5d6>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4a6b      	ldr	r2, [pc, #428]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005dde:	4694      	mov	ip, r2
 8005de0:	4463      	add	r3, ip
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4968      	ldr	r1, [pc, #416]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005dec:	468c      	mov	ip, r1
 8005dee:	4463      	add	r3, ip
 8005df0:	4967      	ldr	r1, [pc, #412]	; (8005f90 <USB_EPStartXfer+0x74c>)
 8005df2:	400a      	ands	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4a63      	ldr	r2, [pc, #396]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005dfe:	4694      	mov	ip, r2
 8005e00:	4463      	add	r3, ip
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4960      	ldr	r1, [pc, #384]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005e0c:	468c      	mov	ip, r1
 8005e0e:	4463      	add	r3, ip
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	0609      	lsls	r1, r1, #24
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
 8005e18:	e062      	b.n	8005ee0 <USB_EPStartXfer+0x69c>
 8005e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1e:	d81b      	bhi.n	8005e58 <USB_EPStartXfer+0x614>
 8005e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d002      	beq.n	8005e34 <USB_EPStartXfer+0x5f0>
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e30:	3301      	adds	r3, #1
 8005e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4a54      	ldr	r2, [pc, #336]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005e3c:	4694      	mov	ip, r2
 8005e3e:	4463      	add	r3, ip
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e44:	069a      	lsls	r2, r3, #26
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	484f      	ldr	r0, [pc, #316]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005e4e:	4684      	mov	ip, r0
 8005e50:	4463      	add	r3, ip
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	e043      	b.n	8005ee0 <USB_EPStartXfer+0x69c>
 8005e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e60:	221f      	movs	r2, #31
 8005e62:	4013      	ands	r3, r2
 8005e64:	d102      	bne.n	8005e6c <USB_EPStartXfer+0x628>
 8005e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4a46      	ldr	r2, [pc, #280]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005e74:	4694      	mov	ip, r2
 8005e76:	4463      	add	r3, ip
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7c:	069b      	lsls	r3, r3, #26
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4941      	ldr	r1, [pc, #260]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005e88:	468c      	mov	ip, r1
 8005e8a:	4463      	add	r3, ip
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	0609      	lsls	r1, r1, #24
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	e024      	b.n	8005ee0 <USB_EPStartXfer+0x69c>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d120      	bne.n	8005ee0 <USB_EPStartXfer+0x69c>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4a39      	ldr	r2, [pc, #228]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005ea6:	4694      	mov	ip, r2
 8005ea8:	4463      	add	r3, ip
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4936      	ldr	r1, [pc, #216]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005eb4:	468c      	mov	ip, r1
 8005eb6:	4463      	add	r3, ip
 8005eb8:	0412      	lsls	r2, r2, #16
 8005eba:	0c12      	lsrs	r2, r2, #16
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005ec6:	4694      	mov	ip, r2
 8005ec8:	4463      	add	r3, ip
 8005eca:	6859      	ldr	r1, [r3, #4]
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ece:	041a      	lsls	r2, r3, #16
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	482d      	ldr	r0, [pc, #180]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005ed8:	4684      	mov	ip, r0
 8005eda:	4463      	add	r3, ip
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8005ee0:	205a      	movs	r0, #90	; 0x5a
 8005ee2:	183b      	adds	r3, r7, r0
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	8912      	ldrh	r2, [r2, #8]
 8005ee8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6959      	ldr	r1, [r3, #20]
 8005eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef0:	b29c      	uxth	r4, r3
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	881a      	ldrh	r2, [r3, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	0023      	movs	r3, r4
 8005efa:	f000 fe9f 	bl	8006c3c <USB_WritePMA>
 8005efe:	e1d2      	b.n	80062a6 <USB_EPStartXfer+0xa62>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	18d3      	adds	r3, r2, r3
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <USB_EPStartXfer+0x750>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	18d3      	adds	r3, r2, r3
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	491c      	ldr	r1, [pc, #112]	; (8005f98 <USB_EPStartXfer+0x754>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005f32:	4694      	mov	ip, r2
 8005f34:	4463      	add	r3, ip
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4913      	ldr	r1, [pc, #76]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005f40:	468c      	mov	ip, r1
 8005f42:	4463      	add	r3, ip
 8005f44:	0412      	lsls	r2, r2, #16
 8005f46:	0c12      	lsrs	r2, r2, #16
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005f52:	4694      	mov	ip, r2
 8005f54:	4463      	add	r3, ip
 8005f56:	6819      	ldr	r1, [r3, #0]
 8005f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f5a:	041a      	lsls	r2, r3, #16
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	480a      	ldr	r0, [pc, #40]	; (8005f8c <USB_EPStartXfer+0x748>)
 8005f64:	4684      	mov	ip, r0
 8005f66:	4463      	add	r3, ip
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f6c:	205a      	movs	r0, #90	; 0x5a
 8005f6e:	183b      	adds	r3, r7, r0
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	88d2      	ldrh	r2, [r2, #6]
 8005f74:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6959      	ldr	r1, [r3, #20]
 8005f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7c:	b29c      	uxth	r4, r3
 8005f7e:	183b      	adds	r3, r7, r0
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	0023      	movs	r3, r4
 8005f86:	f000 fe59 	bl	8006c3c <USB_WritePMA>
 8005f8a:	e18c      	b.n	80062a6 <USB_EPStartXfer+0xa62>
 8005f8c:	40009800 	.word	0x40009800
 8005f90:	83ffffff 	.word	0x83ffffff
 8005f94:	077f8e8f 	.word	0x077f8e8f
 8005f98:	00008080 	.word	0x00008080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	18d3      	adds	r3, r2, r3
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	4013      	ands	r3, r2
 8005fac:	d100      	bne.n	8005fb0 <USB_EPStartXfer+0x76c>
 8005fae:	e0a1      	b.n	80060f4 <USB_EPStartXfer+0x8b0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d172      	bne.n	800609e <USB_EPStartXfer+0x85a>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	4ad2      	ldr	r2, [pc, #840]	; (8006308 <USB_EPStartXfer+0xac4>)
 8005fc0:	4694      	mov	ip, r2
 8005fc2:	4463      	add	r3, ip
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	49ce      	ldr	r1, [pc, #824]	; (8006308 <USB_EPStartXfer+0xac4>)
 8005fce:	468c      	mov	ip, r1
 8005fd0:	4463      	add	r3, ip
 8005fd2:	0412      	lsls	r2, r2, #16
 8005fd4:	0c12      	lsrs	r2, r2, #16
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d121      	bne.n	8006022 <USB_EPStartXfer+0x7de>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4ac8      	ldr	r2, [pc, #800]	; (8006308 <USB_EPStartXfer+0xac4>)
 8005fe6:	4694      	mov	ip, r2
 8005fe8:	4463      	add	r3, ip
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	49c5      	ldr	r1, [pc, #788]	; (8006308 <USB_EPStartXfer+0xac4>)
 8005ff4:	468c      	mov	ip, r1
 8005ff6:	4463      	add	r3, ip
 8005ff8:	49c4      	ldr	r1, [pc, #784]	; (800630c <USB_EPStartXfer+0xac8>)
 8005ffa:	400a      	ands	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4ac0      	ldr	r2, [pc, #768]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006006:	4694      	mov	ip, r2
 8006008:	4463      	add	r3, ip
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	49bd      	ldr	r1, [pc, #756]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006014:	468c      	mov	ip, r1
 8006016:	4463      	add	r3, ip
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	0609      	lsls	r1, r1, #24
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	e062      	b.n	80060e8 <USB_EPStartXfer+0x8a4>
 8006022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006024:	2b3e      	cmp	r3, #62	; 0x3e
 8006026:	d81b      	bhi.n	8006060 <USB_EPStartXfer+0x81c>
 8006028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	647b      	str	r3, [r7, #68]	; 0x44
 800602e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006030:	2201      	movs	r2, #1
 8006032:	4013      	ands	r3, r2
 8006034:	d002      	beq.n	800603c <USB_EPStartXfer+0x7f8>
 8006036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006038:	3301      	adds	r3, #1
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4ab1      	ldr	r2, [pc, #708]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006044:	4694      	mov	ip, r2
 8006046:	4463      	add	r3, ip
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604c:	069a      	lsls	r2, r3, #26
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	48ac      	ldr	r0, [pc, #688]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006056:	4684      	mov	ip, r0
 8006058:	4463      	add	r3, ip
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	e043      	b.n	80060e8 <USB_EPStartXfer+0x8a4>
 8006060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
 8006066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006068:	221f      	movs	r2, #31
 800606a:	4013      	ands	r3, r2
 800606c:	d102      	bne.n	8006074 <USB_EPStartXfer+0x830>
 800606e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006070:	3b01      	subs	r3, #1
 8006072:	647b      	str	r3, [r7, #68]	; 0x44
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4aa3      	ldr	r2, [pc, #652]	; (8006308 <USB_EPStartXfer+0xac4>)
 800607c:	4694      	mov	ip, r2
 800607e:	4463      	add	r3, ip
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006084:	069b      	lsls	r3, r3, #26
 8006086:	431a      	orrs	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	499e      	ldr	r1, [pc, #632]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006090:	468c      	mov	ip, r1
 8006092:	4463      	add	r3, ip
 8006094:	2180      	movs	r1, #128	; 0x80
 8006096:	0609      	lsls	r1, r1, #24
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
 800609c:	e024      	b.n	80060e8 <USB_EPStartXfer+0x8a4>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d120      	bne.n	80060e8 <USB_EPStartXfer+0x8a4>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4a96      	ldr	r2, [pc, #600]	; (8006308 <USB_EPStartXfer+0xac4>)
 80060ae:	4694      	mov	ip, r2
 80060b0:	4463      	add	r3, ip
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4993      	ldr	r1, [pc, #588]	; (8006308 <USB_EPStartXfer+0xac4>)
 80060bc:	468c      	mov	ip, r1
 80060be:	4463      	add	r3, ip
 80060c0:	0412      	lsls	r2, r2, #16
 80060c2:	0c12      	lsrs	r2, r2, #16
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4a8e      	ldr	r2, [pc, #568]	; (8006308 <USB_EPStartXfer+0xac4>)
 80060ce:	4694      	mov	ip, r2
 80060d0:	4463      	add	r3, ip
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d6:	041a      	lsls	r2, r3, #16
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	488a      	ldr	r0, [pc, #552]	; (8006308 <USB_EPStartXfer+0xac4>)
 80060e0:	4684      	mov	ip, r0
 80060e2:	4463      	add	r3, ip
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80060e8:	235a      	movs	r3, #90	; 0x5a
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	8912      	ldrh	r2, [r2, #8]
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e0a0      	b.n	8006236 <USB_EPStartXfer+0x9f2>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d172      	bne.n	80061e2 <USB_EPStartXfer+0x99e>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4a81      	ldr	r2, [pc, #516]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006104:	4694      	mov	ip, r2
 8006106:	4463      	add	r3, ip
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	497d      	ldr	r1, [pc, #500]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006112:	468c      	mov	ip, r1
 8006114:	4463      	add	r3, ip
 8006116:	0412      	lsls	r2, r2, #16
 8006118:	0c12      	lsrs	r2, r2, #16
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d121      	bne.n	8006166 <USB_EPStartXfer+0x922>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4a77      	ldr	r2, [pc, #476]	; (8006308 <USB_EPStartXfer+0xac4>)
 800612a:	4694      	mov	ip, r2
 800612c:	4463      	add	r3, ip
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4974      	ldr	r1, [pc, #464]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006138:	468c      	mov	ip, r1
 800613a:	4463      	add	r3, ip
 800613c:	4973      	ldr	r1, [pc, #460]	; (800630c <USB_EPStartXfer+0xac8>)
 800613e:	400a      	ands	r2, r1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4a6f      	ldr	r2, [pc, #444]	; (8006308 <USB_EPStartXfer+0xac4>)
 800614a:	4694      	mov	ip, r2
 800614c:	4463      	add	r3, ip
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	496c      	ldr	r1, [pc, #432]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006158:	468c      	mov	ip, r1
 800615a:	4463      	add	r3, ip
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	0609      	lsls	r1, r1, #24
 8006160:	430a      	orrs	r2, r1
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e062      	b.n	800622c <USB_EPStartXfer+0x9e8>
 8006166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006168:	2b3e      	cmp	r3, #62	; 0x3e
 800616a:	d81b      	bhi.n	80061a4 <USB_EPStartXfer+0x960>
 800616c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006174:	2201      	movs	r2, #1
 8006176:	4013      	ands	r3, r2
 8006178:	d002      	beq.n	8006180 <USB_EPStartXfer+0x93c>
 800617a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617c:	3301      	adds	r3, #1
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4a60      	ldr	r2, [pc, #384]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006188:	4694      	mov	ip, r2
 800618a:	4463      	add	r3, ip
 800618c:	6819      	ldr	r1, [r3, #0]
 800618e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006190:	069a      	lsls	r2, r3, #26
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	485b      	ldr	r0, [pc, #364]	; (8006308 <USB_EPStartXfer+0xac4>)
 800619a:	4684      	mov	ip, r0
 800619c:	4463      	add	r3, ip
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e043      	b.n	800622c <USB_EPStartXfer+0x9e8>
 80061a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	643b      	str	r3, [r7, #64]	; 0x40
 80061aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ac:	221f      	movs	r2, #31
 80061ae:	4013      	ands	r3, r2
 80061b0:	d102      	bne.n	80061b8 <USB_EPStartXfer+0x974>
 80061b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b4:	3b01      	subs	r3, #1
 80061b6:	643b      	str	r3, [r7, #64]	; 0x40
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4a52      	ldr	r2, [pc, #328]	; (8006308 <USB_EPStartXfer+0xac4>)
 80061c0:	4694      	mov	ip, r2
 80061c2:	4463      	add	r3, ip
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c8:	069b      	lsls	r3, r3, #26
 80061ca:	431a      	orrs	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	494d      	ldr	r1, [pc, #308]	; (8006308 <USB_EPStartXfer+0xac4>)
 80061d4:	468c      	mov	ip, r1
 80061d6:	4463      	add	r3, ip
 80061d8:	2180      	movs	r1, #128	; 0x80
 80061da:	0609      	lsls	r1, r1, #24
 80061dc:	430a      	orrs	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e024      	b.n	800622c <USB_EPStartXfer+0x9e8>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d120      	bne.n	800622c <USB_EPStartXfer+0x9e8>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4a45      	ldr	r2, [pc, #276]	; (8006308 <USB_EPStartXfer+0xac4>)
 80061f2:	4694      	mov	ip, r2
 80061f4:	4463      	add	r3, ip
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4942      	ldr	r1, [pc, #264]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006200:	468c      	mov	ip, r1
 8006202:	4463      	add	r3, ip
 8006204:	0412      	lsls	r2, r2, #16
 8006206:	0c12      	lsrs	r2, r2, #16
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4a3d      	ldr	r2, [pc, #244]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006212:	4694      	mov	ip, r2
 8006214:	4463      	add	r3, ip
 8006216:	6819      	ldr	r1, [r3, #0]
 8006218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4839      	ldr	r0, [pc, #228]	; (8006308 <USB_EPStartXfer+0xac4>)
 8006224:	4684      	mov	ip, r0
 8006226:	4463      	add	r3, ip
 8006228:	430a      	orrs	r2, r1
 800622a:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800622c:	235a      	movs	r3, #90	; 0x5a
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	88d2      	ldrh	r2, [r2, #6]
 8006234:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6959      	ldr	r1, [r3, #20]
 800623a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623c:	b29c      	uxth	r4, r3
 800623e:	235a      	movs	r3, #90	; 0x5a
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	0023      	movs	r3, r4
 8006248:	f000 fcf8 	bl	8006c3c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d112      	bne.n	800627a <USB_EPStartXfer+0xa36>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	18d3      	adds	r3, r2, r3
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <USB_EPStartXfer+0xacc>)
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	18d3      	adds	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4928      	ldr	r1, [pc, #160]	; (8006314 <USB_EPStartXfer+0xad0>)
 8006274:	430a      	orrs	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e015      	b.n	80062a6 <USB_EPStartXfer+0xa62>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d111      	bne.n	80062a6 <USB_EPStartXfer+0xa62>
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	18d3      	adds	r3, r2, r3
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a20      	ldr	r2, [pc, #128]	; (8006310 <USB_EPStartXfer+0xacc>)
 8006290:	4013      	ands	r3, r2
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	18d3      	adds	r3, r2, r3
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	491d      	ldr	r1, [pc, #116]	; (8006318 <USB_EPStartXfer+0xad4>)
 80062a2:	430a      	orrs	r2, r1
 80062a4:	601a      	str	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <USB_EPStartXfer+0xad8>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2210      	movs	r2, #16
 80062bc:	4053      	eors	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	4053      	eors	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4912      	ldr	r1, [pc, #72]	; (8006320 <USB_EPStartXfer+0xadc>)
 80062d6:	430a      	orrs	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	f000 fba1 	bl	8006a20 <USB_EPStartXfer+0x11dc>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	7a9b      	ldrb	r3, [r3, #10]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d000      	beq.n	80062e8 <USB_EPStartXfer+0xaa4>
 80062e6:	e096      	b.n	8006416 <USB_EPStartXfer+0xbd2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	699a      	ldr	r2, [r3, #24]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d917      	bls.n	8006324 <USB_EPStartXfer+0xae0>
      {
        len = ep->maxpacket;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        ep->xfer_len -= len;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006300:	1ad2      	subs	r2, r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	619a      	str	r2, [r3, #24]
 8006306:	e013      	b.n	8006330 <USB_EPStartXfer+0xaec>
 8006308:	40009800 	.word	0x40009800
 800630c:	83ffffff 	.word	0x83ffffff
 8006310:	077f8f8f 	.word	0x077f8f8f
 8006314:	000080c0 	.word	0x000080c0
 8006318:	0000c080 	.word	0x0000c080
 800631c:	077f8fbf 	.word	0x077f8fbf
 8006320:	00008080 	.word	0x00008080
      }
      else
      {
        len = ep->xfer_len;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	65fb      	str	r3, [r7, #92]	; 0x5c
        ep->xfer_len = 0U;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4acb      	ldr	r2, [pc, #812]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006338:	4694      	mov	ip, r2
 800633a:	4463      	add	r3, ip
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	49c7      	ldr	r1, [pc, #796]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006346:	468c      	mov	ip, r1
 8006348:	4463      	add	r3, ip
 800634a:	0412      	lsls	r2, r2, #16
 800634c:	0c12      	lsrs	r2, r2, #16
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d121      	bne.n	800639a <USB_EPStartXfer+0xb56>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4ac1      	ldr	r2, [pc, #772]	; (8006664 <USB_EPStartXfer+0xe20>)
 800635e:	4694      	mov	ip, r2
 8006360:	4463      	add	r3, ip
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	49be      	ldr	r1, [pc, #760]	; (8006664 <USB_EPStartXfer+0xe20>)
 800636c:	468c      	mov	ip, r1
 800636e:	4463      	add	r3, ip
 8006370:	49bd      	ldr	r1, [pc, #756]	; (8006668 <USB_EPStartXfer+0xe24>)
 8006372:	400a      	ands	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4ab9      	ldr	r2, [pc, #740]	; (8006664 <USB_EPStartXfer+0xe20>)
 800637e:	4694      	mov	ip, r2
 8006380:	4463      	add	r3, ip
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	49b6      	ldr	r1, [pc, #728]	; (8006664 <USB_EPStartXfer+0xe20>)
 800638c:	468c      	mov	ip, r1
 800638e:	4463      	add	r3, ip
 8006390:	2180      	movs	r1, #128	; 0x80
 8006392:	0609      	lsls	r1, r1, #24
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	e326      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
 800639a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639c:	2b3e      	cmp	r3, #62	; 0x3e
 800639e:	d81b      	bhi.n	80063d8 <USB_EPStartXfer+0xb94>
 80063a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a8:	2201      	movs	r2, #1
 80063aa:	4013      	ands	r3, r2
 80063ac:	d002      	beq.n	80063b4 <USB_EPStartXfer+0xb70>
 80063ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b0:	3301      	adds	r3, #1
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4aaa      	ldr	r2, [pc, #680]	; (8006664 <USB_EPStartXfer+0xe20>)
 80063bc:	4694      	mov	ip, r2
 80063be:	4463      	add	r3, ip
 80063c0:	6859      	ldr	r1, [r3, #4]
 80063c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c4:	069a      	lsls	r2, r3, #26
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	48a5      	ldr	r0, [pc, #660]	; (8006664 <USB_EPStartXfer+0xe20>)
 80063ce:	4684      	mov	ip, r0
 80063d0:	4463      	add	r3, ip
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	e307      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
 80063d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e0:	221f      	movs	r2, #31
 80063e2:	4013      	ands	r3, r2
 80063e4:	d102      	bne.n	80063ec <USB_EPStartXfer+0xba8>
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	3b01      	subs	r3, #1
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	4a9c      	ldr	r2, [pc, #624]	; (8006664 <USB_EPStartXfer+0xe20>)
 80063f4:	4694      	mov	ip, r2
 80063f6:	4463      	add	r3, ip
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fc:	069b      	lsls	r3, r3, #26
 80063fe:	431a      	orrs	r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4997      	ldr	r1, [pc, #604]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006408:	468c      	mov	ip, r1
 800640a:	4463      	add	r3, ip
 800640c:	2180      	movs	r1, #128	; 0x80
 800640e:	0609      	lsls	r1, r1, #24
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	e2e8      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	78db      	ldrb	r3, [r3, #3]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d000      	beq.n	8006420 <USB_EPStartXfer+0xbdc>
 800641e:	e185      	b.n	800672c <USB_EPStartXfer+0xee8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d000      	beq.n	800642a <USB_EPStartXfer+0xbe6>
 8006428:	e078      	b.n	800651c <USB_EPStartXfer+0xcd8>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4a8c      	ldr	r2, [pc, #560]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006432:	4694      	mov	ip, r2
 8006434:	4463      	add	r3, ip
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4989      	ldr	r1, [pc, #548]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006440:	468c      	mov	ip, r1
 8006442:	4463      	add	r3, ip
 8006444:	0412      	lsls	r2, r2, #16
 8006446:	0c12      	lsrs	r2, r2, #16
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d121      	bne.n	8006496 <USB_EPStartXfer+0xc52>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4a82      	ldr	r2, [pc, #520]	; (8006664 <USB_EPStartXfer+0xe20>)
 800645a:	4694      	mov	ip, r2
 800645c:	4463      	add	r3, ip
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	497f      	ldr	r1, [pc, #508]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006468:	468c      	mov	ip, r1
 800646a:	4463      	add	r3, ip
 800646c:	497e      	ldr	r1, [pc, #504]	; (8006668 <USB_EPStartXfer+0xe24>)
 800646e:	400a      	ands	r2, r1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4a7a      	ldr	r2, [pc, #488]	; (8006664 <USB_EPStartXfer+0xe20>)
 800647a:	4694      	mov	ip, r2
 800647c:	4463      	add	r3, ip
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4977      	ldr	r1, [pc, #476]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006488:	468c      	mov	ip, r1
 800648a:	4463      	add	r3, ip
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	0609      	lsls	r1, r1, #24
 8006490:	430a      	orrs	r2, r1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e068      	b.n	8006568 <USB_EPStartXfer+0xd24>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b3e      	cmp	r3, #62	; 0x3e
 800649c:	d81d      	bhi.n	80064da <USB_EPStartXfer+0xc96>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2201      	movs	r2, #1
 80064ac:	4013      	ands	r3, r2
 80064ae:	d002      	beq.n	80064b6 <USB_EPStartXfer+0xc72>
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	3301      	adds	r3, #1
 80064b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4a69      	ldr	r2, [pc, #420]	; (8006664 <USB_EPStartXfer+0xe20>)
 80064be:	4694      	mov	ip, r2
 80064c0:	4463      	add	r3, ip
 80064c2:	6819      	ldr	r1, [r3, #0]
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	069a      	lsls	r2, r3, #26
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4865      	ldr	r0, [pc, #404]	; (8006664 <USB_EPStartXfer+0xe20>)
 80064d0:	4684      	mov	ip, r0
 80064d2:	4463      	add	r3, ip
 80064d4:	430a      	orrs	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e046      	b.n	8006568 <USB_EPStartXfer+0xd24>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	221f      	movs	r2, #31
 80064e8:	4013      	ands	r3, r2
 80064ea:	d102      	bne.n	80064f2 <USB_EPStartXfer+0xcae>
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	3b01      	subs	r3, #1
 80064f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4a5a      	ldr	r2, [pc, #360]	; (8006664 <USB_EPStartXfer+0xe20>)
 80064fa:	4694      	mov	ip, r2
 80064fc:	4463      	add	r3, ip
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	069b      	lsls	r3, r3, #26
 8006504:	431a      	orrs	r2, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4955      	ldr	r1, [pc, #340]	; (8006664 <USB_EPStartXfer+0xe20>)
 800650e:	468c      	mov	ip, r1
 8006510:	4463      	add	r3, ip
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	0609      	lsls	r1, r1, #24
 8006516:	430a      	orrs	r2, r1
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e025      	b.n	8006568 <USB_EPStartXfer+0xd24>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d121      	bne.n	8006568 <USB_EPStartXfer+0xd24>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4a4e      	ldr	r2, [pc, #312]	; (8006664 <USB_EPStartXfer+0xe20>)
 800652c:	4694      	mov	ip, r2
 800652e:	4463      	add	r3, ip
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	494a      	ldr	r1, [pc, #296]	; (8006664 <USB_EPStartXfer+0xe20>)
 800653a:	468c      	mov	ip, r1
 800653c:	4463      	add	r3, ip
 800653e:	0412      	lsls	r2, r2, #16
 8006540:	0c12      	lsrs	r2, r2, #16
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4a46      	ldr	r2, [pc, #280]	; (8006664 <USB_EPStartXfer+0xe20>)
 800654c:	4694      	mov	ip, r2
 800654e:	4463      	add	r3, ip
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	041a      	lsls	r2, r3, #16
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4841      	ldr	r0, [pc, #260]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006560:	4684      	mov	ip, r0
 8006562:	4463      	add	r3, ip
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d000      	beq.n	8006572 <USB_EPStartXfer+0xd2e>
 8006570:	e07c      	b.n	800666c <USB_EPStartXfer+0xe28>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4a3a      	ldr	r2, [pc, #232]	; (8006664 <USB_EPStartXfer+0xe20>)
 800657a:	4694      	mov	ip, r2
 800657c:	4463      	add	r3, ip
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4937      	ldr	r1, [pc, #220]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006588:	468c      	mov	ip, r1
 800658a:	4463      	add	r3, ip
 800658c:	0412      	lsls	r2, r2, #16
 800658e:	0c12      	lsrs	r2, r2, #16
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d121      	bne.n	80065de <USB_EPStartXfer+0xd9a>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4a30      	ldr	r2, [pc, #192]	; (8006664 <USB_EPStartXfer+0xe20>)
 80065a2:	4694      	mov	ip, r2
 80065a4:	4463      	add	r3, ip
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	492d      	ldr	r1, [pc, #180]	; (8006664 <USB_EPStartXfer+0xe20>)
 80065b0:	468c      	mov	ip, r1
 80065b2:	4463      	add	r3, ip
 80065b4:	492c      	ldr	r1, [pc, #176]	; (8006668 <USB_EPStartXfer+0xe24>)
 80065b6:	400a      	ands	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4a28      	ldr	r2, [pc, #160]	; (8006664 <USB_EPStartXfer+0xe20>)
 80065c2:	4694      	mov	ip, r2
 80065c4:	4463      	add	r3, ip
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4925      	ldr	r1, [pc, #148]	; (8006664 <USB_EPStartXfer+0xe20>)
 80065d0:	468c      	mov	ip, r1
 80065d2:	4463      	add	r3, ip
 80065d4:	2180      	movs	r1, #128	; 0x80
 80065d6:	0609      	lsls	r1, r1, #24
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	e06c      	b.n	80066b8 <USB_EPStartXfer+0xe74>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b3e      	cmp	r3, #62	; 0x3e
 80065e4:	d81d      	bhi.n	8006622 <USB_EPStartXfer+0xdde>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2201      	movs	r2, #1
 80065f4:	4013      	ands	r3, r2
 80065f6:	d002      	beq.n	80065fe <USB_EPStartXfer+0xdba>
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	3301      	adds	r3, #1
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006606:	4694      	mov	ip, r2
 8006608:	4463      	add	r3, ip
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	069a      	lsls	r2, r3, #26
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4813      	ldr	r0, [pc, #76]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006618:	4684      	mov	ip, r0
 800661a:	4463      	add	r3, ip
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	e04a      	b.n	80066b8 <USB_EPStartXfer+0xe74>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	221f      	movs	r2, #31
 8006630:	4013      	ands	r3, r2
 8006632:	d102      	bne.n	800663a <USB_EPStartXfer+0xdf6>
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	3b01      	subs	r3, #1
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	4a08      	ldr	r2, [pc, #32]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006642:	4694      	mov	ip, r2
 8006644:	4463      	add	r3, ip
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	069b      	lsls	r3, r3, #26
 800664c:	431a      	orrs	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4903      	ldr	r1, [pc, #12]	; (8006664 <USB_EPStartXfer+0xe20>)
 8006656:	468c      	mov	ip, r1
 8006658:	4463      	add	r3, ip
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	0609      	lsls	r1, r1, #24
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	e029      	b.n	80066b8 <USB_EPStartXfer+0xe74>
 8006664:	40009800 	.word	0x40009800
 8006668:	83ffffff 	.word	0x83ffffff
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d121      	bne.n	80066b8 <USB_EPStartXfer+0xe74>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4ad7      	ldr	r2, [pc, #860]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800667c:	4694      	mov	ip, r2
 800667e:	4463      	add	r3, ip
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	49d3      	ldr	r1, [pc, #844]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800668a:	468c      	mov	ip, r1
 800668c:	4463      	add	r3, ip
 800668e:	0412      	lsls	r2, r2, #16
 8006690:	0c12      	lsrs	r2, r2, #16
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4acf      	ldr	r2, [pc, #828]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800669c:	4694      	mov	ip, r2
 800669e:	4463      	add	r3, ip
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	041a      	lsls	r2, r3, #16
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	48ca      	ldr	r0, [pc, #808]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80066b0:	4684      	mov	ip, r0
 80066b2:	4463      	add	r3, ip
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d100      	bne.n	80066c2 <USB_EPStartXfer+0xe7e>
 80066c0:	e192      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	18d3      	adds	r3, r2, r3
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	212a      	movs	r1, #42	; 0x2a
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066d4:	187b      	adds	r3, r7, r1
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	01db      	lsls	r3, r3, #7
 80066dc:	4013      	ands	r3, r2
 80066de:	d004      	beq.n	80066ea <USB_EPStartXfer+0xea6>
 80066e0:	187b      	adds	r3, r7, r1
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	2240      	movs	r2, #64	; 0x40
 80066e6:	4013      	ands	r3, r2
 80066e8:	d10d      	bne.n	8006706 <USB_EPStartXfer+0xec2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066ea:	212a      	movs	r1, #42	; 0x2a
 80066ec:	187b      	adds	r3, r7, r1
 80066ee:	881a      	ldrh	r2, [r3, #0]
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	01db      	lsls	r3, r3, #7
 80066f4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066f6:	d000      	beq.n	80066fa <USB_EPStartXfer+0xeb6>
 80066f8:	e176      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066fa:	187b      	adds	r3, r7, r1
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	2240      	movs	r2, #64	; 0x40
 8006700:	4013      	ands	r3, r2
 8006702:	d000      	beq.n	8006706 <USB_EPStartXfer+0xec2>
 8006704:	e170      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	18d3      	adds	r3, r2, r3
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4ab2      	ldr	r2, [pc, #712]	; (80069dc <USB_EPStartXfer+0x1198>)
 8006714:	4013      	ands	r3, r2
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	18d3      	adds	r3, r2, r3
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	49ae      	ldr	r1, [pc, #696]	; (80069e0 <USB_EPStartXfer+0x119c>)
 8006726:	430a      	orrs	r2, r1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e15d      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d000      	beq.n	8006736 <USB_EPStartXfer+0xef2>
 8006734:	e14e      	b.n	80069d4 <USB_EPStartXfer+0x1190>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	429a      	cmp	r2, r3
 8006740:	d909      	bls.n	8006756 <USB_EPStartXfer+0xf12>
        {
          len = ep->maxpacket;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	65fb      	str	r3, [r7, #92]	; 0x5c
          ep->xfer_len -= len;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	619a      	str	r2, [r3, #24]
 8006754:	e005      	b.n	8006762 <USB_EPStartXfer+0xf1e>
        }
        else
        {
          len = ep->xfer_len;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	65fb      	str	r3, [r7, #92]	; 0x5c
          ep->xfer_len = 0U;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d172      	bne.n	8006850 <USB_EPStartXfer+0x100c>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	4a99      	ldr	r2, [pc, #612]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006772:	4694      	mov	ip, r2
 8006774:	4463      	add	r3, ip
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4996      	ldr	r1, [pc, #600]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006780:	468c      	mov	ip, r1
 8006782:	4463      	add	r3, ip
 8006784:	0412      	lsls	r2, r2, #16
 8006786:	0c12      	lsrs	r2, r2, #16
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d121      	bne.n	80067d4 <USB_EPStartXfer+0xf90>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4a90      	ldr	r2, [pc, #576]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006798:	4694      	mov	ip, r2
 800679a:	4463      	add	r3, ip
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	498c      	ldr	r1, [pc, #560]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80067a6:	468c      	mov	ip, r1
 80067a8:	4463      	add	r3, ip
 80067aa:	498e      	ldr	r1, [pc, #568]	; (80069e4 <USB_EPStartXfer+0x11a0>)
 80067ac:	400a      	ands	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	4a88      	ldr	r2, [pc, #544]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80067b8:	4694      	mov	ip, r2
 80067ba:	4463      	add	r3, ip
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4984      	ldr	r1, [pc, #528]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80067c6:	468c      	mov	ip, r1
 80067c8:	4463      	add	r3, ip
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	0609      	lsls	r1, r1, #24
 80067ce:	430a      	orrs	r2, r1
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e062      	b.n	800689a <USB_EPStartXfer+0x1056>
 80067d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d6:	2b3e      	cmp	r3, #62	; 0x3e
 80067d8:	d81b      	bhi.n	8006812 <USB_EPStartXfer+0xfce>
 80067da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
 80067e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e2:	2201      	movs	r2, #1
 80067e4:	4013      	ands	r3, r2
 80067e6:	d002      	beq.n	80067ee <USB_EPStartXfer+0xfaa>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	3301      	adds	r3, #1
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	4a78      	ldr	r2, [pc, #480]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80067f6:	4694      	mov	ip, r2
 80067f8:	4463      	add	r3, ip
 80067fa:	6819      	ldr	r1, [r3, #0]
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	069a      	lsls	r2, r3, #26
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4874      	ldr	r0, [pc, #464]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006808:	4684      	mov	ip, r0
 800680a:	4463      	add	r3, ip
 800680c:	430a      	orrs	r2, r1
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e043      	b.n	800689a <USB_EPStartXfer+0x1056>
 8006812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
 8006818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800681a:	221f      	movs	r2, #31
 800681c:	4013      	ands	r3, r2
 800681e:	d102      	bne.n	8006826 <USB_EPStartXfer+0xfe2>
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	3b01      	subs	r3, #1
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4a6a      	ldr	r2, [pc, #424]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800682e:	4694      	mov	ip, r2
 8006830:	4463      	add	r3, ip
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	069b      	lsls	r3, r3, #26
 8006838:	431a      	orrs	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4965      	ldr	r1, [pc, #404]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006842:	468c      	mov	ip, r1
 8006844:	4463      	add	r3, ip
 8006846:	2180      	movs	r1, #128	; 0x80
 8006848:	0609      	lsls	r1, r1, #24
 800684a:	430a      	orrs	r2, r1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e024      	b.n	800689a <USB_EPStartXfer+0x1056>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d120      	bne.n	800689a <USB_EPStartXfer+0x1056>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	4a5e      	ldr	r2, [pc, #376]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006860:	4694      	mov	ip, r2
 8006862:	4463      	add	r3, ip
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	495a      	ldr	r1, [pc, #360]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800686e:	468c      	mov	ip, r1
 8006870:	4463      	add	r3, ip
 8006872:	0412      	lsls	r2, r2, #16
 8006874:	0c12      	lsrs	r2, r2, #16
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4a56      	ldr	r2, [pc, #344]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006880:	4694      	mov	ip, r2
 8006882:	4463      	add	r3, ip
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006888:	041a      	lsls	r2, r3, #16
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4851      	ldr	r0, [pc, #324]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006892:	4684      	mov	ip, r0
 8006894:	4463      	add	r3, ip
 8006896:	430a      	orrs	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d172      	bne.n	8006988 <USB_EPStartXfer+0x1144>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4a4b      	ldr	r2, [pc, #300]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80068aa:	4694      	mov	ip, r2
 80068ac:	4463      	add	r3, ip
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4948      	ldr	r1, [pc, #288]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80068b8:	468c      	mov	ip, r1
 80068ba:	4463      	add	r3, ip
 80068bc:	0412      	lsls	r2, r2, #16
 80068be:	0c12      	lsrs	r2, r2, #16
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d121      	bne.n	800690c <USB_EPStartXfer+0x10c8>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4a42      	ldr	r2, [pc, #264]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80068d0:	4694      	mov	ip, r2
 80068d2:	4463      	add	r3, ip
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	493e      	ldr	r1, [pc, #248]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80068de:	468c      	mov	ip, r1
 80068e0:	4463      	add	r3, ip
 80068e2:	4940      	ldr	r1, [pc, #256]	; (80069e4 <USB_EPStartXfer+0x11a0>)
 80068e4:	400a      	ands	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4a3a      	ldr	r2, [pc, #232]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80068f0:	4694      	mov	ip, r2
 80068f2:	4463      	add	r3, ip
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4936      	ldr	r1, [pc, #216]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80068fe:	468c      	mov	ip, r1
 8006900:	4463      	add	r3, ip
 8006902:	2180      	movs	r1, #128	; 0x80
 8006904:	0609      	lsls	r1, r1, #24
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	e06d      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
 800690c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690e:	2b3e      	cmp	r3, #62	; 0x3e
 8006910:	d81b      	bhi.n	800694a <USB_EPStartXfer+0x1106>
 8006912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800691a:	2201      	movs	r2, #1
 800691c:	4013      	ands	r3, r2
 800691e:	d002      	beq.n	8006926 <USB_EPStartXfer+0x10e2>
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	3301      	adds	r3, #1
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4a2a      	ldr	r2, [pc, #168]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800692e:	4694      	mov	ip, r2
 8006930:	4463      	add	r3, ip
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	069a      	lsls	r2, r3, #26
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4826      	ldr	r0, [pc, #152]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006940:	4684      	mov	ip, r0
 8006942:	4463      	add	r3, ip
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	e04e      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
 800694a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006952:	221f      	movs	r2, #31
 8006954:	4013      	ands	r3, r2
 8006956:	d102      	bne.n	800695e <USB_EPStartXfer+0x111a>
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	3b01      	subs	r3, #1
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006966:	4694      	mov	ip, r2
 8006968:	4463      	add	r3, ip
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	069b      	lsls	r3, r3, #26
 8006970:	431a      	orrs	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4917      	ldr	r1, [pc, #92]	; (80069d8 <USB_EPStartXfer+0x1194>)
 800697a:	468c      	mov	ip, r1
 800697c:	4463      	add	r3, ip
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	0609      	lsls	r1, r1, #24
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	e02f      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d12b      	bne.n	80069e8 <USB_EPStartXfer+0x11a4>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4a10      	ldr	r2, [pc, #64]	; (80069d8 <USB_EPStartXfer+0x1194>)
 8006998:	4694      	mov	ip, r2
 800699a:	4463      	add	r3, ip
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	490c      	ldr	r1, [pc, #48]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80069a6:	468c      	mov	ip, r1
 80069a8:	4463      	add	r3, ip
 80069aa:	0412      	lsls	r2, r2, #16
 80069ac:	0c12      	lsrs	r2, r2, #16
 80069ae:	605a      	str	r2, [r3, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80069b8:	4694      	mov	ip, r2
 80069ba:	4463      	add	r3, ip
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c0:	041a      	lsls	r2, r3, #16
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4803      	ldr	r0, [pc, #12]	; (80069d8 <USB_EPStartXfer+0x1194>)
 80069ca:	4684      	mov	ip, r0
 80069cc:	4463      	add	r3, ip
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	e009      	b.n	80069e8 <USB_EPStartXfer+0x11a4>
      }
      else
      {
        return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e024      	b.n	8006a22 <USB_EPStartXfer+0x11de>
 80069d8:	40009800 	.word	0x40009800
 80069dc:	077f8f8f 	.word	0x077f8f8f
 80069e0:	000080c0 	.word	0x000080c0
 80069e4:	83ffffff 	.word	0x83ffffff
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	18d3      	adds	r3, r2, r3
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <USB_EPStartXfer+0x11e8>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	0152      	lsls	r2, r2, #5
 8006a00:	4053      	eors	r3, r2
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2280      	movs	r2, #128	; 0x80
 8006a08:	0192      	lsls	r2, r2, #6
 8006a0a:	4053      	eors	r3, r2
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	18d3      	adds	r3, r2, r3
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	4905      	ldr	r1, [pc, #20]	; (8006a30 <USB_EPStartXfer+0x11ec>)
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b019      	add	sp, #100	; 0x64
 8006a28:	bd90      	pop	{r4, r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	077fbf8f 	.word	0x077fbf8f
 8006a30:	00008080 	.word	0x00008080

08006a34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d016      	beq.n	8006a74 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	18d3      	adds	r3, r2, r3
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a16      	ldr	r2, [pc, #88]	; (8006aac <USB_EPSetStall+0x78>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	4053      	eors	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	18d3      	adds	r3, r2, r3
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4910      	ldr	r1, [pc, #64]	; (8006ab0 <USB_EPSetStall+0x7c>)
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e016      	b.n	8006aa2 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	18d3      	adds	r3, r2, r3
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0c      	ldr	r2, [pc, #48]	; (8006ab4 <USB_EPSetStall+0x80>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2280      	movs	r2, #128	; 0x80
 8006a8a:	0152      	lsls	r2, r2, #5
 8006a8c:	4053      	eors	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	18d3      	adds	r3, r2, r3
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4904      	ldr	r1, [pc, #16]	; (8006ab0 <USB_EPSetStall+0x7c>)
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b004      	add	sp, #16
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	077f8fbf 	.word	0x077f8fbf
 8006ab0:	00008080 	.word	0x00008080
 8006ab4:	077fbf8f 	.word	0x077fbf8f

08006ab8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	7a9b      	ldrb	r3, [r3, #10]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d000      	beq.n	8006acc <USB_EPClearStall+0x14>
 8006aca:	e075      	b.n	8006bb8 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d037      	beq.n	8006b44 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	18d3      	adds	r3, r2, r3
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2240      	movs	r2, #64	; 0x40
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d011      	beq.n	8006b0e <USB_EPClearStall+0x56>
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <USB_EPClearStall+0x10c>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	18d3      	adds	r3, r2, r3
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	492f      	ldr	r1, [pc, #188]	; (8006bc8 <USB_EPClearStall+0x110>)
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	78db      	ldrb	r3, [r3, #3]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d050      	beq.n	8006bb8 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	18d3      	adds	r3, r2, r3
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2a      	ldr	r2, [pc, #168]	; (8006bcc <USB_EPClearStall+0x114>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	18d3      	adds	r3, r2, r3
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4924      	ldr	r1, [pc, #144]	; (8006bd0 <USB_EPClearStall+0x118>)
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e039      	b.n	8006bb8 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	18d3      	adds	r3, r2, r3
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d011      	beq.n	8006b80 <USB_EPClearStall+0xc8>
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <USB_EPClearStall+0x10c>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	18d3      	adds	r3, r2, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <USB_EPClearStall+0x11c>)
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	18d3      	adds	r3, r2, r3
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a12      	ldr	r2, [pc, #72]	; (8006bd8 <USB_EPClearStall+0x120>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2280      	movs	r2, #128	; 0x80
 8006b96:	0152      	lsls	r2, r2, #5
 8006b98:	4053      	eors	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	0192      	lsls	r2, r2, #6
 8006ba2:	4053      	eors	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	18d3      	adds	r3, r2, r3
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4907      	ldr	r1, [pc, #28]	; (8006bd0 <USB_EPClearStall+0x118>)
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b008      	add	sp, #32
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	077f8f8f 	.word	0x077f8f8f
 8006bc8:	000080c0 	.word	0x000080c0
 8006bcc:	077f8fbf 	.word	0x077f8fbf
 8006bd0:	00008080 	.word	0x00008080
 8006bd4:	0000c080 	.word	0x0000c080
 8006bd8:	077fbf8f 	.word	0x077fbf8f

08006bdc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	000a      	movs	r2, r1
 8006be6:	1cfb      	adds	r3, r7, #3
 8006be8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006bea:	1cfb      	adds	r3, r7, #3
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2280      	movs	r2, #128	; 0x80
 8006bf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	0212      	lsls	r2, r2, #8
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b004      	add	sp, #16
 8006c38:	bd80      	pop	{r7, pc}
	...

08006c3c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	0019      	movs	r1, r3
 8006c48:	1dbb      	adds	r3, r7, #6
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	1d3b      	adds	r3, r7, #4
 8006c4e:	1c0a      	adds	r2, r1, #0
 8006c50:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count, tmp;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	3303      	adds	r3, #3
 8006c58:	089b      	lsrs	r3, r3, #2
 8006c5a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006c5c:	2016      	movs	r0, #22
 8006c5e:	183b      	adds	r3, r7, r0
 8006c60:	1d3a      	adds	r2, r7, #4
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	2103      	movs	r1, #3
 8006c66:	400a      	ands	r2, r1
 8006c68:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <USB_WritePMA+0x40>
  {
    NbWords--;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006c7c:	1dbb      	adds	r3, r7, #6
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <USB_WritePMA+0xec>)
 8006c82:	4694      	mov	ip, r2
 8006c84:	4463      	add	r3, ip
 8006c86:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8c:	e01f      	b.n	8006cce <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	7859      	ldrb	r1, [r3, #1]
 8006c94:	0209      	lsls	r1, r1, #8
 8006c96:	430a      	orrs	r2, r1
 8006c98:	7899      	ldrb	r1, [r3, #2]
 8006c9a:	0409      	lsls	r1, r1, #16
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	78db      	ldrb	r3, [r3, #3]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3304      	adds	r3, #4
 8006cae:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1dc      	bne.n	8006c8e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8006cd4:	2316      	movs	r3, #22
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d020      	beq.n	8006d20 <USB_WritePMA+0xe4>
  {
    count = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]

    do
    {
      tmp = tmp | ((uint32_t)(*(uint8_t *)pBuf) << (8U * count));
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	001a      	movs	r2, r3
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	409a      	lsls	r2, r3
 8006cf2:	0013      	movs	r3, r2
 8006cf4:	6a3a      	ldr	r2, [r7, #32]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	623b      	str	r3, [r7, #32]
      count++;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	3301      	adds	r3, #1
 8006d04:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8006d06:	2116      	movs	r1, #22
 8006d08:	187b      	adds	r3, r7, r1
 8006d0a:	881a      	ldrh	r2, [r3, #0]
 8006d0c:	187b      	adds	r3, r7, r1
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8006d12:	187b      	adds	r3, r7, r1
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <USB_WritePMA+0xaa>

    *pdwVal = tmp;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	6a3a      	ldr	r2, [r7, #32]
 8006d1e:	601a      	str	r2, [r3, #0]
  }
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b00a      	add	sp, #40	; 0x28
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40009800 	.word	0x40009800

08006d2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b08b      	sub	sp, #44	; 0x2c
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	0019      	movs	r1, r3
 8006d38:	1dbb      	adds	r3, r7, #6
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	1d3b      	adds	r3, r7, #4
 8006d3e:	1c0a      	adds	r2, r1, #0
 8006d40:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count, tmp;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	3303      	adds	r3, #3
 8006d48:	089b      	lsrs	r3, r3, #2
 8006d4a:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006d4c:	201a      	movs	r0, #26
 8006d4e:	183b      	adds	r3, r7, r0
 8006d50:	1d3a      	adds	r2, r7, #4
 8006d52:	8812      	ldrh	r2, [r2, #0]
 8006d54:	2103      	movs	r1, #3
 8006d56:	400a      	ands	r2, r1
 8006d58:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006d5e:	1dbb      	adds	r3, r7, #6
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	4a3a      	ldr	r2, [pc, #232]	; (8006e4c <USB_ReadPMA+0x120>)
 8006d64:	4694      	mov	ip, r2
 8006d66:	4463      	add	r3, ip
 8006d68:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8006d6a:	183b      	adds	r3, r7, r0
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7c:	e03c      	b.n	8006df8 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	21ff      	movs	r1, #255	; 0xff
 8006d86:	4011      	ands	r1, r2
 8006d88:	000c      	movs	r4, r1
 8006d8a:	7819      	ldrb	r1, [r3, #0]
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	4001      	ands	r1, r0
 8006d90:	1c08      	adds	r0, r1, #0
 8006d92:	1c21      	adds	r1, r4, #0
 8006d94:	4301      	orrs	r1, r0
 8006d96:	7019      	strb	r1, [r3, #0]
 8006d98:	0a11      	lsrs	r1, r2, #8
 8006d9a:	20ff      	movs	r0, #255	; 0xff
 8006d9c:	4001      	ands	r1, r0
 8006d9e:	000c      	movs	r4, r1
 8006da0:	7859      	ldrb	r1, [r3, #1]
 8006da2:	2000      	movs	r0, #0
 8006da4:	4001      	ands	r1, r0
 8006da6:	1c08      	adds	r0, r1, #0
 8006da8:	1c21      	adds	r1, r4, #0
 8006daa:	4301      	orrs	r1, r0
 8006dac:	7059      	strb	r1, [r3, #1]
 8006dae:	0c11      	lsrs	r1, r2, #16
 8006db0:	20ff      	movs	r0, #255	; 0xff
 8006db2:	4001      	ands	r1, r0
 8006db4:	000c      	movs	r4, r1
 8006db6:	7899      	ldrb	r1, [r3, #2]
 8006db8:	2000      	movs	r0, #0
 8006dba:	4001      	ands	r1, r0
 8006dbc:	1c08      	adds	r0, r1, #0
 8006dbe:	1c21      	adds	r1, r4, #0
 8006dc0:	4301      	orrs	r1, r0
 8006dc2:	7099      	strb	r1, [r3, #2]
 8006dc4:	0e10      	lsrs	r0, r2, #24
 8006dc6:	78da      	ldrb	r2, [r3, #3]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	400a      	ands	r2, r1
 8006dcc:	1c11      	adds	r1, r2, #0
 8006dce:	1c02      	adds	r2, r0, #0
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	623b      	str	r3, [r7, #32]
    pBuf++;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	3301      	adds	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	3301      	adds	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3301      	adds	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	3b01      	subs	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1bf      	bne.n	8006d7e <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8006dfe:	231a      	movs	r3, #26
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01d      	beq.n	8006e44 <USB_ReadPMA+0x118>
  {
    count = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = *(__IO uint32_t *)pdwVal;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	613b      	str	r3, [r7, #16]
    do
    {
      *(uint8_t *)pBuf = (uint8_t)(tmp >> (8U * (uint8_t)(count)));
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	40da      	lsrs	r2, r3
 8006e1c:	0013      	movs	r3, r2
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	701a      	strb	r2, [r3, #0]
      count++;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	3301      	adds	r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
      remaining_bytes-- ;
 8006e30:	211a      	movs	r1, #26
 8006e32:	187b      	adds	r3, r7, r1
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	187b      	adds	r3, r7, r1
 8006e38:	3a01      	subs	r2, #1
 8006e3a:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8006e3c:	187b      	adds	r3, r7, r1
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <USB_ReadPMA+0xe6>
  }
}
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b00b      	add	sp, #44	; 0x2c
 8006e4a:	bd90      	pop	{r4, r7, pc}
 8006e4c:	40009800 	.word	0x40009800

08006e50 <LL_UCPD_Enable>:
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2280      	movs	r2, #128	; 0x80
 8006e5e:	0612      	lsls	r2, r2, #24
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	b002      	add	sp, #8
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a05      	ldr	r2, [pc, #20]	; (8006e94 <LL_UCPD_SetRxOrderSet+0x24>)
 8006e80:	401a      	ands	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	601a      	str	r2, [r3, #0]
}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b002      	add	sp, #8
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	e00fffff 	.word	0xe00fffff

08006e98 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	4a05      	ldr	r2, [pc, #20]	; (8006ebc <LL_UCPD_SetccEnable+0x24>)
 8006ea8:	401a      	ands	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]
}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	fffff3ff 	.word	0xfffff3ff

08006ec0 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec2:	b08b      	sub	sp, #44	; 0x2c
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	240f      	movs	r4, #15
 8006ece:	193b      	adds	r3, r7, r4
 8006ed0:	1c02      	adds	r2, r0, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8006ed4:	193b      	adds	r3, r7, r4
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	0013      	movs	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4a55      	ldr	r2, [pc, #340]	; (8007038 <CAD_Init+0x178>)
 8006ee2:	189b      	adds	r3, r3, r2
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8006ee6:	193b      	adds	r3, r7, r4
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	4954      	ldr	r1, [pc, #336]	; (800703c <CAD_Init+0x17c>)
 8006eec:	0013      	movs	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	18cb      	adds	r3, r1, r3
 8006ef6:	3310      	adds	r3, #16
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8006efc:	193b      	adds	r3, r7, r4
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	494e      	ldr	r1, [pc, #312]	; (800703c <CAD_Init+0x17c>)
 8006f02:	0013      	movs	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	18cb      	adds	r3, r1, r3
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	781a      	ldrb	r2, [r3, #0]
 8006f16:	4949      	ldr	r1, [pc, #292]	; (800703c <CAD_Init+0x17c>)
 8006f18:	0013      	movs	r3, r2
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	18cb      	adds	r3, r1, r3
 8006f22:	330c      	adds	r3, #12
 8006f24:	6819      	ldr	r1, [r3, #0]
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	781a      	ldrb	r2, [r3, #0]
 8006f2a:	4844      	ldr	r0, [pc, #272]	; (800703c <CAD_Init+0x17c>)
 8006f2c:	0013      	movs	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	18c3      	adds	r3, r0, r3
 8006f36:	3310      	adds	r3, #16
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	780a      	ldrb	r2, [r1, #0]
 8006f3c:	0752      	lsls	r2, r2, #29
 8006f3e:	0f92      	lsrs	r2, r2, #30
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	2103      	movs	r1, #3
 8006f44:	400a      	ands	r2, r1
 8006f46:	0010      	movs	r0, r2
 8006f48:	789a      	ldrb	r2, [r3, #2]
 8006f4a:	2103      	movs	r1, #3
 8006f4c:	438a      	bics	r2, r1
 8006f4e:	1c11      	adds	r1, r2, #0
 8006f50:	1c02      	adds	r2, r0, #0
 8006f52:	430a      	orrs	r2, r1
 8006f54:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8006f56:	193b      	adds	r3, r7, r4
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	4938      	ldr	r1, [pc, #224]	; (800703c <CAD_Init+0x17c>)
 8006f5c:	0013      	movs	r3, r2
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	18cb      	adds	r3, r1, r3
 8006f66:	3310      	adds	r3, #16
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	789a      	ldrb	r2, [r3, #2]
 8006f6c:	210c      	movs	r1, #12
 8006f6e:	438a      	bics	r2, r1
 8006f70:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	220c      	movs	r2, #12
 8006f76:	2100      	movs	r1, #0
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f002 ff9d 	bl	8009eb8 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8006f7e:	193b      	adds	r3, r7, r4
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	492e      	ldr	r1, [pc, #184]	; (800703c <CAD_Init+0x17c>)
 8006f84:	0013      	movs	r3, r2
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	1a9b      	subs	r3, r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	18cb      	adds	r3, r1, r3
 8006f8e:	332c      	adds	r3, #44	; 0x2c
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8006f94:	0025      	movs	r5, r4
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	781c      	ldrb	r4, [r3, #0]
 8006f9a:	197b      	adds	r3, r7, r5
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 f888 	bl	80070b4 <USBPD_HW_GetUSPDInstance>
 8006fa4:	0001      	movs	r1, r0
 8006fa6:	4a25      	ldr	r2, [pc, #148]	; (800703c <CAD_Init+0x17c>)
 8006fa8:	0023      	movs	r3, r4
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	1b1b      	subs	r3, r3, r4
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8006fb2:	2614      	movs	r6, #20
 8006fb4:	19bb      	adds	r3, r7, r6
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f7fd ff44 	bl	8004e44 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8006fbc:	002c      	movs	r4, r5
 8006fbe:	193b      	adds	r3, r7, r4
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	491e      	ldr	r1, [pc, #120]	; (800703c <CAD_Init+0x17c>)
 8006fc4:	0013      	movs	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	585b      	ldr	r3, [r3, r1]
 8006fce:	19ba      	adds	r2, r7, r6
 8006fd0:	0011      	movs	r1, r2
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7fd fefc 	bl	8004dd0 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 | LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
 8006fd8:	193b      	adds	r3, r7, r4
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	4917      	ldr	r1, [pc, #92]	; (800703c <CAD_Init+0x17c>)
 8006fde:	0013      	movs	r3, r2
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	585b      	ldr	r3, [r3, r1]
 8006fe8:	22f8      	movs	r2, #248	; 0xf8
 8006fea:	0452      	lsls	r2, r2, #17
 8006fec:	0011      	movs	r1, r2
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f7ff ff3e 	bl	8006e70 <LL_UCPD_SetRxOrderSet>
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8006ff4:	193b      	adds	r3, r7, r4
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	4910      	ldr	r1, [pc, #64]	; (800703c <CAD_Init+0x17c>)
 8006ffa:	0013      	movs	r3, r2
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	585b      	ldr	r3, [r3, r1]
 8007004:	22c0      	movs	r2, #192	; 0xc0
 8007006:	0112      	lsls	r2, r2, #4
 8007008:	0011      	movs	r1, r2
 800700a:	0018      	movs	r0, r3
 800700c:	f7ff ff44 	bl	8006e98 <LL_UCPD_SetccEnable>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8007010:	193b      	adds	r3, r7, r4
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	4909      	ldr	r1, [pc, #36]	; (800703c <CAD_Init+0x17c>)
 8007016:	0013      	movs	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	585b      	ldr	r3, [r3, r1]
 8007020:	0018      	movs	r0, r3
 8007022:	f7ff ff15 	bl	8006e50 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8007026:	193b      	adds	r3, r7, r4
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	0018      	movs	r0, r3
 800702c:	f000 f9fa 	bl	8007424 <USBPDM1_AssertRd>
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
    }
#endif  /* USBPD_TYPE_STATE_MACHINE */
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8007030:	46c0      	nop			; (mov r8, r8)
 8007032:	46bd      	mov	sp, r7
 8007034:	b00b      	add	sp, #44	; 0x2c
 8007036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007038:	20000218 	.word	0x20000218
 800703c:	200004e8 	.word	0x200004e8

08007040 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	0002      	movs	r2, r0
 8007048:	1dfb      	adds	r3, r7, #7
 800704a:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800704c:	1dfb      	adds	r3, r7, #7
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	0018      	movs	r0, r3
 8007052:	f000 fa97 	bl	8007584 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8007056:	1dfb      	adds	r3, r7, #7
 8007058:	7819      	ldrb	r1, [r3, #0]
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <CAD_Enter_ErrorRecovery+0x4c>)
 800705c:	000b      	movs	r3, r1
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	185b      	adds	r3, r3, r1
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	5c99      	ldrb	r1, [r3, r2]
 8007066:	2080      	movs	r0, #128	; 0x80
 8007068:	4240      	negs	r0, r0
 800706a:	4301      	orrs	r1, r0
 800706c:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	781a      	ldrb	r2, [r3, #0]
 8007072:	4907      	ldr	r1, [pc, #28]	; (8007090 <CAD_Enter_ErrorRecovery+0x50>)
 8007074:	0013      	movs	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	18cb      	adds	r3, r1, r3
 800707e:	332c      	adds	r3, #44	; 0x2c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4798      	blx	r3
}
 8007084:	46c0      	nop			; (mov r8, r8)
 8007086:	46bd      	mov	sp, r7
 8007088:	b002      	add	sp, #8
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000218 	.word	0x20000218
 8007090:	200004e8 	.word	0x200004e8

08007094 <CAD_StateMachine>:

  return _timing;
}
#elif defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	230f      	movs	r3, #15
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	1c02      	adds	r2, r0, #0
 80070a4:	701a      	strb	r2, [r3, #0]
  /* Not used in NO_PD lib but should exist for CORE library */
  return CAD_INFINITE_TIME;
 80070a6:	2301      	movs	r3, #1
 80070a8:	425b      	negs	r3, r3
}
 80070aa:	0018      	movs	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	b004      	add	sp, #16
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	0002      	movs	r2, r0
 80070bc:	1dfb      	adds	r3, r7, #7
 80070be:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 80070c0:	4b02      	ldr	r3, [pc, #8]	; (80070cc <USBPD_HW_GetUSPDInstance+0x18>)
#endif
}
 80070c2:	0018      	movs	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	b002      	add	sp, #8
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	4000a000 	.word	0x4000a000

080070d0 <LL_AHB1_GRP1_EnableClock>:
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80070d8:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80070da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80070e4:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4013      	ands	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	46c0      	nop			; (mov r8, r8)
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b004      	add	sp, #16
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40021000 	.word	0x40021000

080070fc <LL_APB1_GRP1_EnableClock>:
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8007104:	4b07      	ldr	r3, [pc, #28]	; (8007124 <LL_APB1_GRP1_EnableClock+0x28>)
 8007106:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <LL_APB1_GRP1_EnableClock+0x28>)
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	430a      	orrs	r2, r1
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007110:	4b04      	ldr	r3, [pc, #16]	; (8007124 <LL_APB1_GRP1_EnableClock+0x28>)
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	4013      	ands	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800711a:	68fb      	ldr	r3, [r7, #12]
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b004      	add	sp, #16
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40021000 	.word	0x40021000

08007128 <LL_APB2_GRP1_EnableClock>:
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <LL_APB2_GRP1_EnableClock+0x28>)
 8007132:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <LL_APB2_GRP1_EnableClock+0x28>)
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	430a      	orrs	r2, r1
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <LL_APB2_GRP1_EnableClock+0x28>)
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	4013      	ands	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007146:	68fb      	ldr	r3, [r7, #12]
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b004      	add	sp, #16
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40021000 	.word	0x40021000

08007154 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	4a03      	ldr	r2, [pc, #12]	; (8007170 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8007162:	401a      	ands	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
}
 8007168:	46c0      	nop			; (mov r8, r8)
 800716a:	46bd      	mov	sp, r7
 800716c:	b002      	add	sp, #8
 800716e:	bd80      	pop	{r7, pc}
 8007170:	ffdfffff 	.word	0xffdfffff

08007174 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2280      	movs	r2, #128	; 0x80
 8007182:	0392      	lsls	r2, r2, #14
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60da      	str	r2, [r3, #12]
}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	46bd      	mov	sp, r7
 800718e:	b002      	add	sp, #8
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	4a03      	ldr	r2, [pc, #12]	; (80071b0 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 80071a2:	401a      	ands	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60da      	str	r2, [r3, #12]
}
 80071a8:	46c0      	nop			; (mov r8, r8)
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b002      	add	sp, #8
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	ffefffff 	.word	0xffefffff

080071b4 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2280      	movs	r2, #128	; 0x80
 80071c2:	0352      	lsls	r2, r2, #13
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60da      	str	r2, [r3, #12]
}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b002      	add	sp, #8
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <LL_UCPD_SetccEnable>:
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	4a05      	ldr	r2, [pc, #20]	; (80071f8 <LL_UCPD_SetccEnable+0x24>)
 80071e4:	401a      	ands	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]
}
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b002      	add	sp, #8
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	fffff3ff 	.word	0xfffff3ff

080071fc <LL_UCPD_SetSNKRole>:
  * @rmtoll CR        ANAMODE          LL_UCPD_SetSNKRole
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetSNKRole(UCPD_TypeDef *UCPDx)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2280      	movs	r2, #128	; 0x80
 800720a:	0092      	lsls	r2, r2, #2
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60da      	str	r2, [r3, #12]
}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	46bd      	mov	sp, r7
 8007216:	b002      	add	sp, #8
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <LL_UCPD_SetSRCRole>:
  * @rmtoll CR        ANAMODE          LL_UCPD_SetSRCRole
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetSRCRole(UCPD_TypeDef *UCPDx)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4a03      	ldr	r2, [pc, #12]	; (8007238 <LL_UCPD_SetSRCRole+0x1c>)
 800722a:	401a      	ands	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60da      	str	r2, [r3, #12]
}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	b002      	add	sp, #8
 8007236:	bd80      	pop	{r7, pc}
 8007238:	fffffdff 	.word	0xfffffdff

0800723c <LL_UCPD_SetRpResistor>:
  *         @arg @ref LL_UCPD_RESISTOR_3_0A
  *         @arg @ref LL_UCPD_RESISTOR_NONE
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRpResistor(UCPD_TypeDef *UCPDx, uint32_t Resistor)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	4a05      	ldr	r2, [pc, #20]	; (8007260 <LL_UCPD_SetRpResistor+0x24>)
 800724c:	401a      	ands	r2, r3
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	431a      	orrs	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60da      	str	r2, [r3, #12]
}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	46bd      	mov	sp, r7
 800725a:	b002      	add	sp, #8
 800725c:	bd80      	pop	{r7, pc}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	fffffe7f 	.word	0xfffffe7f

08007264 <LL_UCPD_RxDisable>:
  * @rmtoll CR        PHYRXEN          LL_UCPD_RxDisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDisable(UCPD_TypeDef *UCPDx)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	4393      	bics	r3, r2
 8007274:	001a      	movs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60da      	str	r2, [r3, #12]
}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	46bd      	mov	sp, r7
 800727e:	b002      	add	sp, #8
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	055b      	lsls	r3, r3, #21
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff ff36 	bl	80070fc <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	015b      	lsls	r3, r3, #5
 8007294:	0018      	movs	r0, r3
 8007296:	f7ff ff1b 	bl	80070d0 <LL_AHB1_GRP1_EnableClock>
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBPDM1_AssertRp>:
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
}
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	0002      	movs	r2, r0
 80072a8:	1dfb      	adds	r3, r7, #7
 80072aa:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80072ac:	2001      	movs	r0, #1
 80072ae:	f7ff ff3b 	bl	8007128 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 80072b2:	1dfb      	adds	r3, r7, #7
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	4953      	ldr	r1, [pc, #332]	; (8007404 <USBPDM1_AssertRp+0x164>)
 80072b8:	0013      	movs	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	18cb      	adds	r3, r1, r3
 80072c2:	3310      	adds	r3, #16
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	789b      	ldrb	r3, [r3, #2]
 80072c8:	079b      	lsls	r3, r3, #30
 80072ca:	0f9b      	lsrs	r3, r3, #30
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d021      	beq.n	8007316 <USBPDM1_AssertRp+0x76>
 80072d2:	dc2f      	bgt.n	8007334 <USBPDM1_AssertRp+0x94>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <USBPDM1_AssertRp+0x3e>
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d00d      	beq.n	80072f8 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 80072dc:	e02a      	b.n	8007334 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 80072de:	1dfb      	adds	r3, r7, #7
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	4948      	ldr	r1, [pc, #288]	; (8007404 <USBPDM1_AssertRp+0x164>)
 80072e4:	0013      	movs	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	585b      	ldr	r3, [r3, r1]
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	0018      	movs	r0, r3
 80072f2:	f7ff ffa3 	bl	800723c <LL_UCPD_SetRpResistor>
      break;
 80072f6:	e01e      	b.n	8007336 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80072f8:	1dfb      	adds	r3, r7, #7
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	4941      	ldr	r1, [pc, #260]	; (8007404 <USBPDM1_AssertRp+0x164>)
 80072fe:	0013      	movs	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	585b      	ldr	r3, [r3, r1]
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	0052      	lsls	r2, r2, #1
 800730c:	0011      	movs	r1, r2
 800730e:	0018      	movs	r0, r3
 8007310:	f7ff ff94 	bl	800723c <LL_UCPD_SetRpResistor>
      break;
 8007314:	e00f      	b.n	8007336 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8007316:	1dfb      	adds	r3, r7, #7
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	493a      	ldr	r1, [pc, #232]	; (8007404 <USBPDM1_AssertRp+0x164>)
 800731c:	0013      	movs	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	585b      	ldr	r3, [r3, r1]
 8007326:	22c0      	movs	r2, #192	; 0xc0
 8007328:	0052      	lsls	r2, r2, #1
 800732a:	0011      	movs	r1, r2
 800732c:	0018      	movs	r0, r3
 800732e:	f7ff ff85 	bl	800723c <LL_UCPD_SetRpResistor>
      break;
 8007332:	e000      	b.n	8007336 <USBPDM1_AssertRp+0x96>
      break;
 8007334:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8007336:	1dfb      	adds	r3, r7, #7
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	4932      	ldr	r1, [pc, #200]	; (8007404 <USBPDM1_AssertRp+0x164>)
 800733c:	0013      	movs	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	585b      	ldr	r3, [r3, r1]
 8007346:	2100      	movs	r1, #0
 8007348:	0018      	movs	r0, r3
 800734a:	f7ff ff43 	bl	80071d4 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 800734e:	1dfb      	adds	r3, r7, #7
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	492c      	ldr	r1, [pc, #176]	; (8007404 <USBPDM1_AssertRp+0x164>)
 8007354:	0013      	movs	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	585b      	ldr	r3, [r3, r1]
 800735e:	0018      	movs	r0, r3
 8007360:	f7ff ff5c 	bl	800721c <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8007364:	1dfb      	adds	r3, r7, #7
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	4926      	ldr	r1, [pc, #152]	; (8007404 <USBPDM1_AssertRp+0x164>)
 800736a:	0013      	movs	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	18cb      	adds	r3, r1, r3
 8007374:	3334      	adds	r3, #52	; 0x34
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10e      	bne.n	800739a <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800737c:	1dfb      	adds	r3, r7, #7
 800737e:	781a      	ldrb	r2, [r3, #0]
 8007380:	4920      	ldr	r1, [pc, #128]	; (8007404 <USBPDM1_AssertRp+0x164>)
 8007382:	0013      	movs	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	585b      	ldr	r3, [r3, r1]
 800738c:	22c0      	movs	r2, #192	; 0xc0
 800738e:	0112      	lsls	r2, r2, #4
 8007390:	0011      	movs	r1, r2
 8007392:	0018      	movs	r0, r3
 8007394:	f7ff ff1e 	bl	80071d4 <LL_UCPD_SetccEnable>
 8007398:	e01b      	b.n	80073d2 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 800739a:	1dfb      	adds	r3, r7, #7
 800739c:	781a      	ldrb	r2, [r3, #0]
 800739e:	4919      	ldr	r1, [pc, #100]	; (8007404 <USBPDM1_AssertRp+0x164>)
 80073a0:	0013      	movs	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	5858      	ldr	r0, [r3, r1]
 80073aa:	1dfb      	adds	r3, r7, #7
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	4915      	ldr	r1, [pc, #84]	; (8007404 <USBPDM1_AssertRp+0x164>)
 80073b0:	0013      	movs	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	18cb      	adds	r3, r1, r3
 80073ba:	3334      	adds	r3, #52	; 0x34
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d102      	bne.n	80073c8 <USBPDM1_AssertRp+0x128>
 80073c2:	2380      	movs	r3, #128	; 0x80
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	e001      	b.n	80073cc <USBPDM1_AssertRp+0x12c>
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	0019      	movs	r1, r3
 80073ce:	f7ff ff01 	bl	80071d4 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 80073d2:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <USBPDM1_AssertRp+0x168>)
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	1dfb      	adds	r3, r7, #7
 80073d8:	781a      	ldrb	r2, [r3, #0]
 80073da:	480a      	ldr	r0, [pc, #40]	; (8007404 <USBPDM1_AssertRp+0x164>)
 80073dc:	0013      	movs	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	581b      	ldr	r3, [r3, r0]
 80073e6:	4a09      	ldr	r2, [pc, #36]	; (800740c <USBPDM1_AssertRp+0x16c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d102      	bne.n	80073f2 <USBPDM1_AssertRp+0x152>
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	e001      	b.n	80073f6 <USBPDM1_AssertRp+0x156>
 80073f2:	2380      	movs	r3, #128	; 0x80
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4a04      	ldr	r2, [pc, #16]	; (8007408 <USBPDM1_AssertRp+0x168>)
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6013      	str	r3, [r2, #0]
}
 80073fc:	46c0      	nop			; (mov r8, r8)
 80073fe:	46bd      	mov	sp, r7
 8007400:	b002      	add	sp, #8
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200004e8 	.word	0x200004e8
 8007408:	40010000 	.word	0x40010000
 800740c:	4000a000 	.word	0x4000a000

08007410 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	0002      	movs	r2, r0
 8007418:	1dfb      	adds	r3, r7, #7
 800741a:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800741c:	46c0      	nop			; (mov r8, r8)
 800741e:	46bd      	mov	sp, r7
 8007420:	b002      	add	sp, #8
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	0002      	movs	r2, r0
 800742c:	1dfb      	adds	r3, r7, #7
 800742e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8007430:	1dfb      	adds	r3, r7, #7
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	494b      	ldr	r1, [pc, #300]	; (8007564 <USBPDM1_AssertRd+0x140>)
 8007436:	0013      	movs	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	585b      	ldr	r3, [r3, r1]
 8007440:	0018      	movs	r0, r3
 8007442:	f7ff fe97 	bl	8007174 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8007446:	1dfb      	adds	r3, r7, #7
 8007448:	781a      	ldrb	r2, [r3, #0]
 800744a:	4946      	ldr	r1, [pc, #280]	; (8007564 <USBPDM1_AssertRd+0x140>)
 800744c:	0013      	movs	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	585b      	ldr	r3, [r3, r1]
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff feac 	bl	80071b4 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800745c:	2001      	movs	r0, #1
 800745e:	f7ff fe63 	bl	8007128 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8007462:	1dfb      	adds	r3, r7, #7
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	493f      	ldr	r1, [pc, #252]	; (8007564 <USBPDM1_AssertRd+0x140>)
 8007468:	0013      	movs	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	585b      	ldr	r3, [r3, r1]
 8007472:	2100      	movs	r1, #0
 8007474:	0018      	movs	r0, r3
 8007476:	f7ff fead 	bl	80071d4 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 800747a:	1dfb      	adds	r3, r7, #7
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	4939      	ldr	r1, [pc, #228]	; (8007564 <USBPDM1_AssertRd+0x140>)
 8007480:	0013      	movs	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	585b      	ldr	r3, [r3, r1]
 800748a:	0018      	movs	r0, r3
 800748c:	f7ff feb6 	bl	80071fc <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8007490:	1dfb      	adds	r3, r7, #7
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	4933      	ldr	r1, [pc, #204]	; (8007564 <USBPDM1_AssertRd+0x140>)
 8007496:	0013      	movs	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	18cb      	adds	r3, r1, r3
 80074a0:	3334      	adds	r3, #52	; 0x34
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10e      	bne.n	80074c6 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80074a8:	1dfb      	adds	r3, r7, #7
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	492d      	ldr	r1, [pc, #180]	; (8007564 <USBPDM1_AssertRd+0x140>)
 80074ae:	0013      	movs	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	585b      	ldr	r3, [r3, r1]
 80074b8:	22c0      	movs	r2, #192	; 0xc0
 80074ba:	0112      	lsls	r2, r2, #4
 80074bc:	0011      	movs	r1, r2
 80074be:	0018      	movs	r0, r3
 80074c0:	f7ff fe88 	bl	80071d4 <LL_UCPD_SetccEnable>
 80074c4:	e01b      	b.n	80074fe <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	4926      	ldr	r1, [pc, #152]	; (8007564 <USBPDM1_AssertRd+0x140>)
 80074cc:	0013      	movs	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	5858      	ldr	r0, [r3, r1]
 80074d6:	1dfb      	adds	r3, r7, #7
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	4922      	ldr	r1, [pc, #136]	; (8007564 <USBPDM1_AssertRd+0x140>)
 80074dc:	0013      	movs	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	18cb      	adds	r3, r1, r3
 80074e6:	3334      	adds	r3, #52	; 0x34
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d102      	bne.n	80074f4 <USBPDM1_AssertRd+0xd0>
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	e001      	b.n	80074f8 <USBPDM1_AssertRd+0xd4>
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	0019      	movs	r1, r3
 80074fa:	f7ff fe6b 	bl	80071d4 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 80074fe:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <USBPDM1_AssertRd+0x144>)
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	1dfb      	adds	r3, r7, #7
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	4817      	ldr	r0, [pc, #92]	; (8007564 <USBPDM1_AssertRd+0x140>)
 8007508:	0013      	movs	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	1a9b      	subs	r3, r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	581b      	ldr	r3, [r3, r0]
 8007512:	4a16      	ldr	r2, [pc, #88]	; (800756c <USBPDM1_AssertRd+0x148>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d102      	bne.n	800751e <USBPDM1_AssertRd+0xfa>
 8007518:	2380      	movs	r3, #128	; 0x80
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	e001      	b.n	8007522 <USBPDM1_AssertRd+0xfe>
 800751e:	2380      	movs	r3, #128	; 0x80
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	4a11      	ldr	r2, [pc, #68]	; (8007568 <USBPDM1_AssertRd+0x144>)
 8007524:	430b      	orrs	r3, r1
 8007526:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8007528:	2001      	movs	r0, #1
 800752a:	f7f9 fe95 	bl	8001258 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 800752e:	1dfb      	adds	r3, r7, #7
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	490c      	ldr	r1, [pc, #48]	; (8007564 <USBPDM1_AssertRd+0x140>)
 8007534:	0013      	movs	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	585b      	ldr	r3, [r3, r1]
 800753e:	0018      	movs	r0, r3
 8007540:	f7ff fe08 	bl	8007154 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8007544:	1dfb      	adds	r3, r7, #7
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	4906      	ldr	r1, [pc, #24]	; (8007564 <USBPDM1_AssertRd+0x140>)
 800754a:	0013      	movs	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	585b      	ldr	r3, [r3, r1]
 8007554:	0018      	movs	r0, r3
 8007556:	f7ff fe1d 	bl	8007194 <LL_UCPD_TypeCDetectionCC1Enable>
#endif
}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b002      	add	sp, #8
 8007560:	bd80      	pop	{r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	200004e8 	.word	0x200004e8
 8007568:	40010000 	.word	0x40010000
 800756c:	4000a000 	.word	0x4000a000

08007570 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	0002      	movs	r2, r0
 8007578:	1dfb      	adds	r3, r7, #7
 800757a:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 800757c:	46c0      	nop			; (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	b002      	add	sp, #8
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	0002      	movs	r2, r0
 800758c:	1dfb      	adds	r3, r7, #7
 800758e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8007590:	2001      	movs	r0, #1
 8007592:	f7ff fdc9 	bl	8007128 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8007596:	1dfb      	adds	r3, r7, #7
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	4922      	ldr	r1, [pc, #136]	; (8007624 <USBPDM1_EnterErrorRecovery+0xa0>)
 800759c:	0013      	movs	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	585b      	ldr	r3, [r3, r1]
 80075a6:	0018      	movs	r0, r3
 80075a8:	f7ff fe38 	bl	800721c <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80075ac:	1dfb      	adds	r3, r7, #7
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	491c      	ldr	r1, [pc, #112]	; (8007624 <USBPDM1_EnterErrorRecovery+0xa0>)
 80075b2:	0013      	movs	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	585b      	ldr	r3, [r3, r1]
 80075bc:	2100      	movs	r1, #0
 80075be:	0018      	movs	r0, r3
 80075c0:	f7ff fe3c 	bl	800723c <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80075c4:	1dfb      	adds	r3, r7, #7
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	4916      	ldr	r1, [pc, #88]	; (8007624 <USBPDM1_EnterErrorRecovery+0xa0>)
 80075ca:	0013      	movs	r3, r2
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	585b      	ldr	r3, [r3, r1]
 80075d4:	2100      	movs	r1, #0
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7ff fdfc 	bl	80071d4 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 80075dc:	4b12      	ldr	r3, [pc, #72]	; (8007628 <USBPDM1_EnterErrorRecovery+0xa4>)
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	1dfb      	adds	r3, r7, #7
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	480f      	ldr	r0, [pc, #60]	; (8007624 <USBPDM1_EnterErrorRecovery+0xa0>)
 80075e6:	0013      	movs	r3, r2
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	581b      	ldr	r3, [r3, r0]
 80075f0:	4a0e      	ldr	r2, [pc, #56]	; (800762c <USBPDM1_EnterErrorRecovery+0xa8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d102      	bne.n	80075fc <USBPDM1_EnterErrorRecovery+0x78>
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	e001      	b.n	8007600 <USBPDM1_EnterErrorRecovery+0x7c>
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4a09      	ldr	r2, [pc, #36]	; (8007628 <USBPDM1_EnterErrorRecovery+0xa4>)
 8007602:	430b      	orrs	r3, r1
 8007604:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	4906      	ldr	r1, [pc, #24]	; (8007624 <USBPDM1_EnterErrorRecovery+0xa0>)
 800760c:	0013      	movs	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	585b      	ldr	r3, [r3, r1]
 8007616:	0018      	movs	r0, r3
 8007618:	f7ff fe24 	bl	8007264 <LL_UCPD_RxDisable>
}
 800761c:	46c0      	nop			; (mov r8, r8)
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200004e8 	.word	0x200004e8
 8007628:	40010000 	.word	0x40010000
 800762c:	4000a000 	.word	0x4000a000

08007630 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	000a      	movs	r2, r1
 800763a:	1cfb      	adds	r3, r7, #3
 800763c:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800763e:	2387      	movs	r3, #135	; 0x87
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	0018      	movs	r0, r3
 8007644:	f002 fbb2 	bl	8009dac <USBD_static_malloc>
 8007648:	0003      	movs	r3, r0
 800764a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <USBD_CDC_Init+0x30>
  {
    pdev->pClassData = NULL;
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	23af      	movs	r3, #175	; 0xaf
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	2100      	movs	r1, #0
 800765a:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800765c:	2302      	movs	r3, #2
 800765e:	e06e      	b.n	800773e <USBD_CDC_Init+0x10e>
  }

  pdev->pClassData = (void *)hcdc;
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	23af      	movs	r3, #175	; 0xaf
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	68f9      	ldr	r1, [r7, #12]
 8007668:	50d1      	str	r1, [r2, r3]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	7c1b      	ldrb	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d11a      	bne.n	80076a8 <USBD_CDC_Init+0x78>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	2181      	movs	r1, #129	; 0x81
 800767c:	f002 f9d1 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	2101      	movs	r1, #1
 8007690:	f002 f9c7 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	23bc      	movs	r3, #188	; 0xbc
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	2101      	movs	r1, #1
 800769c:	52d1      	strh	r1, [r2, r3]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	224e      	movs	r2, #78	; 0x4e
 80076a2:	2110      	movs	r1, #16
 80076a4:	5299      	strh	r1, [r3, r2]
 80076a6:	e017      	b.n	80076d8 <USBD_CDC_Init+0xa8>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	2202      	movs	r2, #2
 80076ae:	2181      	movs	r1, #129	; 0x81
 80076b0:	f002 f9b7 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	2340      	movs	r3, #64	; 0x40
 80076be:	2202      	movs	r2, #2
 80076c0:	2101      	movs	r1, #1
 80076c2:	f002 f9ae 	bl	8009a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	23bc      	movs	r3, #188	; 0xbc
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	2101      	movs	r1, #1
 80076ce:	52d1      	strh	r1, [r2, r3]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	224e      	movs	r2, #78	; 0x4e
 80076d4:	2110      	movs	r1, #16
 80076d6:	5299      	strh	r1, [r3, r2]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	2308      	movs	r3, #8
 80076dc:	2203      	movs	r2, #3
 80076de:	2182      	movs	r1, #130	; 0x82
 80076e0:	f002 f99f 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	224c      	movs	r2, #76	; 0x4c
 80076e8:	2101      	movs	r1, #1
 80076ea:	5299      	strh	r1, [r3, r2]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	23b0      	movs	r3, #176	; 0xb0
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	58d3      	ldr	r3, [r2, r3]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	2385      	movs	r3, #133	; 0x85
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	2100      	movs	r1, #0
 8007700:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	2386      	movs	r3, #134	; 0x86
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	2100      	movs	r1, #0
 800770a:	50d1      	str	r1, [r2, r3]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7c1b      	ldrb	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10a      	bne.n	800772a <USBD_CDC_Init+0xfa>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	2381      	movs	r3, #129	; 0x81
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	58d2      	ldr	r2, [r2, r3]
 800771c:	2380      	movs	r3, #128	; 0x80
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	2101      	movs	r1, #1
 8007724:	f002 fac1 	bl	8009caa <USBD_LL_PrepareReceive>
 8007728:	e008      	b.n	800773c <USBD_CDC_Init+0x10c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	2381      	movs	r3, #129	; 0x81
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	58d2      	ldr	r2, [r2, r3]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	2340      	movs	r3, #64	; 0x40
 8007736:	2101      	movs	r1, #1
 8007738:	f002 fab7 	bl	8009caa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	0018      	movs	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	b004      	add	sp, #16
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	000a      	movs	r2, r1
 8007750:	1cfb      	adds	r3, r7, #3
 8007752:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2181      	movs	r1, #129	; 0x81
 8007758:	0018      	movs	r0, r3
 800775a:	f002 f999 	bl	8009a90 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2101      	movs	r1, #1
 8007768:	0018      	movs	r0, r3
 800776a:	f002 f991 	bl	8009a90 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	23bc      	movs	r3, #188	; 0xbc
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	2100      	movs	r1, #0
 8007776:	52d1      	strh	r1, [r2, r3]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2182      	movs	r1, #130	; 0x82
 800777c:	0018      	movs	r0, r3
 800777e:	f002 f987 	bl	8009a90 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	224c      	movs	r2, #76	; 0x4c
 8007786:	2100      	movs	r1, #0
 8007788:	5299      	strh	r1, [r3, r2]
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	224e      	movs	r2, #78	; 0x4e
 800778e:	2100      	movs	r1, #0
 8007790:	5299      	strh	r1, [r3, r2]

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	23af      	movs	r3, #175	; 0xaf
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	58d3      	ldr	r3, [r2, r3]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d011      	beq.n	80077c2 <USBD_CDC_DeInit+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	23b0      	movs	r3, #176	; 0xb0
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	58d3      	ldr	r3, [r2, r3]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	23af      	movs	r3, #175	; 0xaf
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	58d3      	ldr	r3, [r2, r3]
 80077b2:	0018      	movs	r0, r3
 80077b4:	f002 fb06 	bl	8009dc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	23af      	movs	r3, #175	; 0xaf
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	2100      	movs	r1, #0
 80077c0:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	0018      	movs	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	b002      	add	sp, #8
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	23af      	movs	r3, #175	; 0xaf
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	58d3      	ldr	r3, [r2, r3]
 80077de:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80077e0:	230d      	movs	r3, #13
 80077e2:	18fb      	adds	r3, r7, r3
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80077e8:	230a      	movs	r3, #10
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	2200      	movs	r2, #0
 80077ee:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f0:	2317      	movs	r3, #23
 80077f2:	18fb      	adds	r3, r7, r3
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_CDC_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	e0be      	b.n	8007980 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	001a      	movs	r2, r3
 8007808:	2360      	movs	r3, #96	; 0x60
 800780a:	4013      	ands	r3, r2
 800780c:	d048      	beq.n	80078a0 <USBD_CDC_Setup+0xd4>
 800780e:	2b20      	cmp	r3, #32
 8007810:	d000      	beq.n	8007814 <USBD_CDC_Setup+0x48>
 8007812:	e0a7      	b.n	8007964 <USBD_CDC_Setup+0x198>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d036      	beq.n	800788a <USBD_CDC_Setup+0xbe>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b25b      	sxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	da1c      	bge.n	8007860 <USBD_CDC_Setup+0x94>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	23b0      	movs	r3, #176	; 0xb0
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	58d3      	ldr	r3, [r2, r3]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007834:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	88d2      	ldrh	r2, [r2, #6]
 800783a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	88db      	ldrh	r3, [r3, #6]
 8007840:	220e      	movs	r2, #14
 8007842:	18ba      	adds	r2, r7, r2
 8007844:	b299      	uxth	r1, r3
 8007846:	2907      	cmp	r1, #7
 8007848:	d900      	bls.n	800784c <USBD_CDC_Setup+0x80>
 800784a:	2307      	movs	r3, #7
 800784c:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800784e:	6939      	ldr	r1, [r7, #16]
 8007850:	230e      	movs	r3, #14
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0018      	movs	r0, r3
 800785a:	f001 fc94 	bl	8009186 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800785e:	e08c      	b.n	800797a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	7859      	ldrb	r1, [r3, #1]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	2380      	movs	r3, #128	; 0x80
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	88db      	ldrh	r3, [r3, #6]
 8007870:	b2d9      	uxtb	r1, r3
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4a44      	ldr	r2, [pc, #272]	; (8007988 <USBD_CDC_Setup+0x1bc>)
 8007876:	5499      	strb	r1, [r3, r2]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007878:	6939      	ldr	r1, [r7, #16]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	001a      	movs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	0018      	movs	r0, r3
 8007884:	f001 fcac 	bl	80091e0 <USBD_CtlPrepareRx>
      break;
 8007888:	e077      	b.n	800797a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	23b0      	movs	r3, #176	; 0xb0
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	58d3      	ldr	r3, [r2, r3]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	7850      	ldrb	r0, [r2, #1]
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	4798      	blx	r3
      break;
 800789e:	e06c      	b.n	800797a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b0b      	cmp	r3, #11
 80078a6:	d03c      	beq.n	8007922 <USBD_CDC_Setup+0x156>
 80078a8:	dc4d      	bgt.n	8007946 <USBD_CDC_Setup+0x17a>
 80078aa:	2b0a      	cmp	r3, #10
 80078ac:	d01f      	beq.n	80078ee <USBD_CDC_Setup+0x122>
 80078ae:	dc4a      	bgt.n	8007946 <USBD_CDC_Setup+0x17a>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <USBD_CDC_Setup+0xee>
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d051      	beq.n	800795c <USBD_CDC_Setup+0x190>
 80078b8:	e045      	b.n	8007946 <USBD_CDC_Setup+0x17a>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	23a7      	movs	r3, #167	; 0xa7
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	5cd3      	ldrb	r3, [r2, r3]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d107      	bne.n	80078d8 <USBD_CDC_Setup+0x10c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80078c8:	230a      	movs	r3, #10
 80078ca:	18f9      	adds	r1, r7, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	0018      	movs	r0, r3
 80078d2:	f001 fc58 	bl	8009186 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078d6:	e044      	b.n	8007962 <USBD_CDC_Setup+0x196>
            USBD_CtlError(pdev, req);
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0011      	movs	r1, r2
 80078de:	0018      	movs	r0, r3
 80078e0:	f001 fbc9 	bl	8009076 <USBD_CtlError>
            ret = USBD_FAIL;
 80078e4:	2317      	movs	r3, #23
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2203      	movs	r2, #3
 80078ea:	701a      	strb	r2, [r3, #0]
          break;
 80078ec:	e039      	b.n	8007962 <USBD_CDC_Setup+0x196>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	23a7      	movs	r3, #167	; 0xa7
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	5cd3      	ldrb	r3, [r2, r3]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d107      	bne.n	800790c <USBD_CDC_Setup+0x140>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80078fc:	230d      	movs	r3, #13
 80078fe:	18f9      	adds	r1, r7, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	0018      	movs	r0, r3
 8007906:	f001 fc3e 	bl	8009186 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800790a:	e02a      	b.n	8007962 <USBD_CDC_Setup+0x196>
            USBD_CtlError(pdev, req);
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	0011      	movs	r1, r2
 8007912:	0018      	movs	r0, r3
 8007914:	f001 fbaf 	bl	8009076 <USBD_CtlError>
            ret = USBD_FAIL;
 8007918:	2317      	movs	r3, #23
 800791a:	18fb      	adds	r3, r7, r3
 800791c:	2203      	movs	r2, #3
 800791e:	701a      	strb	r2, [r3, #0]
          break;
 8007920:	e01f      	b.n	8007962 <USBD_CDC_Setup+0x196>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	23a7      	movs	r3, #167	; 0xa7
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	5cd3      	ldrb	r3, [r2, r3]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b03      	cmp	r3, #3
 800792e:	d017      	beq.n	8007960 <USBD_CDC_Setup+0x194>
          {
            USBD_CtlError(pdev, req);
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	0011      	movs	r1, r2
 8007936:	0018      	movs	r0, r3
 8007938:	f001 fb9d 	bl	8009076 <USBD_CtlError>
            ret = USBD_FAIL;
 800793c:	2317      	movs	r3, #23
 800793e:	18fb      	adds	r3, r7, r3
 8007940:	2203      	movs	r2, #3
 8007942:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007944:	e00c      	b.n	8007960 <USBD_CDC_Setup+0x194>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	0011      	movs	r1, r2
 800794c:	0018      	movs	r0, r3
 800794e:	f001 fb92 	bl	8009076 <USBD_CtlError>
          ret = USBD_FAIL;
 8007952:	2317      	movs	r3, #23
 8007954:	18fb      	adds	r3, r7, r3
 8007956:	2203      	movs	r2, #3
 8007958:	701a      	strb	r2, [r3, #0]
          break;
 800795a:	e002      	b.n	8007962 <USBD_CDC_Setup+0x196>
          break;
 800795c:	46c0      	nop			; (mov r8, r8)
 800795e:	e00c      	b.n	800797a <USBD_CDC_Setup+0x1ae>
          break;
 8007960:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007962:	e00a      	b.n	800797a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	0011      	movs	r1, r2
 800796a:	0018      	movs	r0, r3
 800796c:	f001 fb83 	bl	8009076 <USBD_CtlError>
      ret = USBD_FAIL;
 8007970:	2317      	movs	r3, #23
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	2203      	movs	r2, #3
 8007976:	701a      	strb	r2, [r3, #0]
      break;
 8007978:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 800797a:	2317      	movs	r3, #23
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	781b      	ldrb	r3, [r3, #0]
}
 8007980:	0018      	movs	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	b006      	add	sp, #24
 8007986:	bd80      	pop	{r7, pc}
 8007988:	00000201 	.word	0x00000201

0800798c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	000a      	movs	r2, r1
 8007996:	1cfb      	adds	r3, r7, #3
 8007998:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	23b1      	movs	r3, #177	; 0xb1
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	58d3      	ldr	r3, [r2, r3]
 80079a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	23af      	movs	r3, #175	; 0xaf
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	58d3      	ldr	r3, [r2, r3]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <USBD_CDC_DataIn+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e05a      	b.n	8007a6a <USBD_CDC_DataIn+0xde>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	23af      	movs	r3, #175	; 0xaf
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	58d3      	ldr	r3, [r2, r3]
 80079bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80079be:	1cfb      	adds	r3, r7, #3
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	0013      	movs	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	189b      	adds	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	18cb      	adds	r3, r1, r3
 80079ce:	3318      	adds	r3, #24
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02b      	beq.n	8007a2e <USBD_CDC_DataIn+0xa2>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80079d6:	1cfb      	adds	r3, r7, #3
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	0013      	movs	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	189b      	adds	r3, r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	18cb      	adds	r3, r1, r3
 80079e6:	3318      	adds	r3, #24
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	1cfb      	adds	r3, r7, #3
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	0013      	movs	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	189b      	adds	r3, r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	18cb      	adds	r3, r1, r3
 80079fa:	3348      	adds	r3, #72	; 0x48
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	0019      	movs	r1, r3
 8007a00:	f7f8 fca8 	bl	8000354 <__aeabi_uidivmod>
 8007a04:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007a06:	d112      	bne.n	8007a2e <USBD_CDC_DataIn+0xa2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007a08:	1cfb      	adds	r3, r7, #3
 8007a0a:	781a      	ldrb	r2, [r3, #0]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	0013      	movs	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	189b      	adds	r3, r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	18cb      	adds	r3, r1, r3
 8007a18:	3318      	adds	r3, #24
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a1e:	1cfb      	adds	r3, r7, #3
 8007a20:	7819      	ldrb	r1, [r3, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	f002 f90f 	bl	8009c4a <USBD_LL_Transmit>
 8007a2c:	e01c      	b.n	8007a68 <USBD_CDC_DataIn+0xdc>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	2385      	movs	r3, #133	; 0x85
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	2100      	movs	r1, #0
 8007a36:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	23b0      	movs	r3, #176	; 0xb0
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	58d3      	ldr	r3, [r2, r3]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d010      	beq.n	8007a68 <USBD_CDC_DataIn+0xdc>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	23b0      	movs	r3, #176	; 0xb0
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	58d3      	ldr	r3, [r2, r3]
 8007a4e:	691c      	ldr	r4, [r3, #16]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	2382      	movs	r3, #130	; 0x82
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	58d0      	ldr	r0, [r2, r3]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2284      	movs	r2, #132	; 0x84
 8007a5c:	0092      	lsls	r2, r2, #2
 8007a5e:	1899      	adds	r1, r3, r2
 8007a60:	1cfb      	adds	r3, r7, #3
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	001a      	movs	r2, r3
 8007a66:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b005      	add	sp, #20
 8007a70:	bd90      	pop	{r4, r7, pc}

08007a72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b084      	sub	sp, #16
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	000a      	movs	r2, r1
 8007a7c:	1cfb      	adds	r3, r7, #3
 8007a7e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	23af      	movs	r3, #175	; 0xaf
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	58d3      	ldr	r3, [r2, r3]
 8007a88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	23af      	movs	r3, #175	; 0xaf
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	58d3      	ldr	r3, [r2, r3]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <USBD_CDC_DataOut+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e01c      	b.n	8007ad4 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a9a:	1cfb      	adds	r3, r7, #3
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0011      	movs	r1, r2
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f002 f931 	bl	8009d0a <USBD_LL_GetRxDataSize>
 8007aa8:	0001      	movs	r1, r0
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	2383      	movs	r3, #131	; 0x83
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	23b0      	movs	r3, #176	; 0xb0
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	58d3      	ldr	r3, [r2, r3]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68f9      	ldr	r1, [r7, #12]
 8007abe:	2381      	movs	r3, #129	; 0x81
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	58c8      	ldr	r0, [r1, r3]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2183      	movs	r1, #131	; 0x83
 8007ac8:	0089      	lsls	r1, r1, #2
 8007aca:	468c      	mov	ip, r1
 8007acc:	4463      	add	r3, ip
 8007ace:	0019      	movs	r1, r3
 8007ad0:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b004      	add	sp, #16
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	23af      	movs	r3, #175	; 0xaf
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	58d3      	ldr	r3, [r2, r3]
 8007aec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_CDC_EP0_RxReady+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e020      	b.n	8007b3a <USBD_CDC_EP0_RxReady+0x5e>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	23b0      	movs	r3, #176	; 0xb0
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	58d3      	ldr	r3, [r2, r3]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d019      	beq.n	8007b38 <USBD_CDC_EP0_RxReady+0x5c>
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	2380      	movs	r3, #128	; 0x80
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	5cd3      	ldrb	r3, [r2, r3]
 8007b0c:	2bff      	cmp	r3, #255	; 0xff
 8007b0e:	d013      	beq.n	8007b38 <USBD_CDC_EP0_RxReady+0x5c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	23b0      	movs	r3, #176	; 0xb0
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	58d3      	ldr	r3, [r2, r3]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	2280      	movs	r2, #128	; 0x80
 8007b1e:	0092      	lsls	r2, r2, #2
 8007b20:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 8007b22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4c07      	ldr	r4, [pc, #28]	; (8007b44 <USBD_CDC_EP0_RxReady+0x68>)
 8007b28:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	21ff      	movs	r1, #255	; 0xff
 8007b36:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	b005      	add	sp, #20
 8007b40:	bd90      	pop	{r4, r7, pc}
 8007b42:	46c0      	nop			; (mov r8, r8)
 8007b44:	00000201 	.word	0x00000201

08007b48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2243      	movs	r2, #67	; 0x43
 8007b54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007b56:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000098 	.word	0x20000098

08007b64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2243      	movs	r2, #67	; 0x43
 8007b70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007b72:	4b02      	ldr	r3, [pc, #8]	; (8007b7c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8007b74:	0018      	movs	r0, r3
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b002      	add	sp, #8
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000054 	.word	0x20000054

08007b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2243      	movs	r2, #67	; 0x43
 8007b8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007b8e:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8007b90:	0018      	movs	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b002      	add	sp, #8
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200000dc 	.word	0x200000dc

08007b9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	220a      	movs	r2, #10
 8007ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007baa:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007bac:	0018      	movs	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20000010 	.word	0x20000010

08007bb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e005      	b.n	8007bd8 <USBD_CDC_RegisterInterface+0x20>
  }

  pdev->pUserData = fops;
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	23b0      	movs	r3, #176	; 0xb0
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	0018      	movs	r0, r3
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	23af      	movs	r3, #175	; 0xaf
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	58d3      	ldr	r3, [r2, r3]
 8007bf4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <USBD_CDC_SetTxBuffer+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e00a      	b.n	8007c16 <USBD_CDC_SetTxBuffer+0x36>
  }

  hcdc->TxBuffer = pbuff;
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	2382      	movs	r3, #130	; 0x82
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	2384      	movs	r3, #132	; 0x84
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	0018      	movs	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b006      	add	sp, #24
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	23af      	movs	r3, #175	; 0xaf
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	58d3      	ldr	r3, [r2, r3]
 8007c30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <USBD_CDC_SetRxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e005      	b.n	8007c48 <USBD_CDC_SetRxBuffer+0x2a>
  }

  hcdc->RxBuffer = pbuff;
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	2381      	movs	r3, #129	; 0x81
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	0018      	movs	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	b004      	add	sp, #16
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	23af      	movs	r3, #175	; 0xaf
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	58d3      	ldr	r3, [r2, r3]
 8007c60:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c62:	230f      	movs	r3, #15
 8007c64:	18fb      	adds	r3, r7, r3
 8007c66:	2201      	movs	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]

  if (pdev->pClassData == NULL)
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	23af      	movs	r3, #175	; 0xaf
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	58d3      	ldr	r3, [r2, r3]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <USBD_CDC_TransmitPacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e024      	b.n	8007cc4 <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	2385      	movs	r3, #133	; 0x85
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	58d3      	ldr	r3, [r2, r3]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d11b      	bne.n	8007cbe <USBD_CDC_TransmitPacket+0x6e>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	2385      	movs	r3, #133	; 0x85
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	2384      	movs	r3, #132	; 0x84
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	58d2      	ldr	r2, [r2, r3]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	2382      	movs	r3, #130	; 0x82
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	58d1      	ldr	r1, [r2, r3]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	2384      	movs	r3, #132	; 0x84
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	58d3      	ldr	r3, [r2, r3]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	000a      	movs	r2, r1
 8007cb0:	2181      	movs	r1, #129	; 0x81
 8007cb2:	f001 ffca 	bl	8009c4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007cb6:	230f      	movs	r3, #15
 8007cb8:	18fb      	adds	r3, r7, r3
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 8007cbe:	230f      	movs	r3, #15
 8007cc0:	18fb      	adds	r3, r7, r3
 8007cc2:	781b      	ldrb	r3, [r3, #0]
}
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b004      	add	sp, #16
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	23af      	movs	r3, #175	; 0xaf
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	58d3      	ldr	r3, [r2, r3]
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	23af      	movs	r3, #175	; 0xaf
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	58d3      	ldr	r3, [r2, r3]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e018      	b.n	8007d20 <USBD_CDC_ReceivePacket+0x54>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	7c1b      	ldrb	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	2381      	movs	r3, #129	; 0x81
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	58d2      	ldr	r2, [r2, r3]
 8007cfe:	2380      	movs	r3, #128	; 0x80
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	2101      	movs	r1, #1
 8007d06:	f001 ffd0 	bl	8009caa <USBD_LL_PrepareReceive>
 8007d0a:	e008      	b.n	8007d1e <USBD_CDC_ReceivePacket+0x52>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	2381      	movs	r3, #129	; 0x81
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	58d2      	ldr	r2, [r2, r3]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	2340      	movs	r3, #64	; 0x40
 8007d18:	2101      	movs	r1, #1
 8007d1a:	f001 ffc6 	bl	8009caa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	0018      	movs	r0, r3
 8007d22:	46bd      	mov	sp, r7
 8007d24:	b004      	add	sp, #16
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d28:	b5b0      	push	{r4, r5, r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	1dfb      	adds	r3, r7, #7
 8007d34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e029      	b.n	8007d94 <USBD_Init+0x6c>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	23ae      	movs	r3, #174	; 0xae
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	2100      	movs	r1, #0
 8007d48:	50d1      	str	r1, [r2, r3]
  pdev->pUserData = NULL;
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	23b0      	movs	r3, #176	; 0xb0
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	2100      	movs	r1, #0
 8007d52:	50d1      	str	r1, [r2, r3]
  pdev->pConfDesc = NULL;
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	23b3      	movs	r3, #179	; 0xb3
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	23ad      	movs	r3, #173	; 0xad
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	23a7      	movs	r3, #167	; 0xa7
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	2101      	movs	r1, #1
 8007d76:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1dfa      	adds	r2, r7, #7
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d80:	2517      	movs	r5, #23
 8007d82:	197c      	adds	r4, r7, r5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	0018      	movs	r0, r3
 8007d88:	f001 fdb4 	bl	80098f4 <USBD_LL_Init>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	7023      	strb	r3, [r4, #0]

  return ret;
 8007d90:	197b      	adds	r3, r7, r5
 8007d92:	781b      	ldrb	r3, [r3, #0]
}
 8007d94:	0018      	movs	r0, r3
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b006      	add	sp, #24
 8007d9a:	bdb0      	pop	{r4, r5, r7, pc}

08007d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007da6:	230e      	movs	r3, #14
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	2200      	movs	r2, #0
 8007dac:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e01a      	b.n	8007dee <USBD_RegisterClass+0x52>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	23ae      	movs	r3, #174	; 0xae
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	23ae      	movs	r3, #174	; 0xae
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	58d3      	ldr	r3, [r2, r3]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00d      	beq.n	8007dec <USBD_RegisterClass+0x50>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	23ae      	movs	r3, #174	; 0xae
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	58d3      	ldr	r3, [r2, r3]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	220e      	movs	r2, #14
 8007ddc:	18ba      	adds	r2, r7, r2
 8007dde:	0010      	movs	r0, r2
 8007de0:	4798      	blx	r3
 8007de2:	0001      	movs	r1, r0
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	23b3      	movs	r3, #179	; 0xb3
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b004      	add	sp, #16
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	0018      	movs	r0, r3
 8007e02:	f001 fde9 	bl	80099d8 <USBD_LL_Start>
 8007e06:	0003      	movs	r3, r0
}
 8007e08:	0018      	movs	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	b002      	add	sp, #8
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	000a      	movs	r2, r1
 8007e2c:	1cfb      	adds	r3, r7, #3
 8007e2e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e30:	210f      	movs	r1, #15
 8007e32:	187b      	adds	r3, r7, r1
 8007e34:	2203      	movs	r2, #3
 8007e36:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	23ae      	movs	r3, #174	; 0xae
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	58d3      	ldr	r3, [r2, r3]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	23ae      	movs	r3, #174	; 0xae
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	58d3      	ldr	r3, [r2, r3]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	187c      	adds	r4, r7, r1
 8007e50:	1cfa      	adds	r2, r7, #3
 8007e52:	7811      	ldrb	r1, [r2, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	0010      	movs	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	0003      	movs	r3, r0
 8007e5c:	7023      	strb	r3, [r4, #0]
  }

  return ret;
 8007e5e:	230f      	movs	r3, #15
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	781b      	ldrb	r3, [r3, #0]
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b005      	add	sp, #20
 8007e6a:	bd90      	pop	{r4, r7, pc}

08007e6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	000a      	movs	r2, r1
 8007e76:	1cfb      	adds	r3, r7, #3
 8007e78:	701a      	strb	r2, [r3, #0]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	23ae      	movs	r3, #174	; 0xae
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	58d3      	ldr	r3, [r2, r3]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <USBD_ClrClassConfig+0x2e>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	23ae      	movs	r3, #174	; 0xae
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	58d3      	ldr	r3, [r2, r3]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	1cfa      	adds	r2, r7, #3
 8007e92:	7811      	ldrb	r1, [r2, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	0010      	movs	r0, r2
 8007e98:	4798      	blx	r3
  }

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	b002      	add	sp, #8
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a30      	ldr	r2, [pc, #192]	; (8007f74 <USBD_LL_SetupStage+0xd0>)
 8007eb2:	4694      	mov	ip, r2
 8007eb4:	4463      	add	r3, ip
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	0011      	movs	r1, r2
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f001 f89e 	bl	8008ffc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	23a5      	movs	r3, #165	; 0xa5
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	23ac      	movs	r3, #172	; 0xac
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	5ad3      	ldrh	r3, [r2, r3]
 8007ed2:	0019      	movs	r1, r3
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	23a6      	movs	r3, #166	; 0xa6
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a25      	ldr	r2, [pc, #148]	; (8007f74 <USBD_LL_SetupStage+0xd0>)
 8007ee0:	5c9b      	ldrb	r3, [r3, r2]
 8007ee2:	001a      	movs	r2, r3
 8007ee4:	231f      	movs	r3, #31
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d01f      	beq.n	8007f2c <USBD_LL_SetupStage+0x88>
 8007eec:	d82b      	bhi.n	8007f46 <USBD_LL_SetupStage+0xa2>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <USBD_LL_SetupStage+0x54>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d00d      	beq.n	8007f12 <USBD_LL_SetupStage+0x6e>
 8007ef6:	e026      	b.n	8007f46 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <USBD_LL_SetupStage+0xd0>)
 8007efc:	189a      	adds	r2, r3, r2
 8007efe:	230f      	movs	r3, #15
 8007f00:	18fc      	adds	r4, r7, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	0011      	movs	r1, r2
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 fa42 	bl	8008390 <USBD_StdDevReq>
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	7023      	strb	r3, [r4, #0]
      break;
 8007f10:	e029      	b.n	8007f66 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <USBD_LL_SetupStage+0xd0>)
 8007f16:	189a      	adds	r2, r3, r2
 8007f18:	230f      	movs	r3, #15
 8007f1a:	18fc      	adds	r4, r7, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	0011      	movs	r1, r2
 8007f20:	0018      	movs	r0, r3
 8007f22:	f000 faaf 	bl	8008484 <USBD_StdItfReq>
 8007f26:	0003      	movs	r3, r0
 8007f28:	7023      	strb	r3, [r4, #0]
      break;
 8007f2a:	e01c      	b.n	8007f66 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <USBD_LL_SetupStage+0xd0>)
 8007f30:	189a      	adds	r2, r3, r2
 8007f32:	230f      	movs	r3, #15
 8007f34:	18fc      	adds	r4, r7, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	0011      	movs	r1, r2
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 fafc 	bl	8008538 <USBD_StdEPReq>
 8007f40:	0003      	movs	r3, r0
 8007f42:	7023      	strb	r3, [r4, #0]
      break;
 8007f44:	e00f      	b.n	8007f66 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <USBD_LL_SetupStage+0xd0>)
 8007f4a:	5c9b      	ldrb	r3, [r3, r2]
 8007f4c:	227f      	movs	r2, #127	; 0x7f
 8007f4e:	4393      	bics	r3, r2
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	230f      	movs	r3, #15
 8007f54:	18fc      	adds	r4, r7, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	0011      	movs	r1, r2
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f001 fdc3 	bl	8009ae6 <USBD_LL_StallEP>
 8007f60:	0003      	movs	r3, r0
 8007f62:	7023      	strb	r3, [r4, #0]
      break;
 8007f64:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007f66:	230f      	movs	r3, #15
 8007f68:	18fb      	adds	r3, r7, r3
 8007f6a:	781b      	ldrb	r3, [r3, #0]
}
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b005      	add	sp, #20
 8007f72:	bd90      	pop	{r4, r7, pc}
 8007f74:	000002aa 	.word	0x000002aa

08007f78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	607a      	str	r2, [r7, #4]
 8007f82:	200b      	movs	r0, #11
 8007f84:	183b      	adds	r3, r7, r0
 8007f86:	1c0a      	adds	r2, r1, #0
 8007f88:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f8a:	183b      	adds	r3, r7, r0
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d13f      	bne.n	8008012 <USBD_LL_DataOutStage+0x9a>
  {
    pep = &pdev->ep_out[0];
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3355      	adds	r3, #85	; 0x55
 8007f96:	33ff      	adds	r3, #255	; 0xff
 8007f98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	23a5      	movs	r3, #165	; 0xa5
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	58d3      	ldr	r3, [r2, r3]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d159      	bne.n	800805a <USBD_LL_DataOutStage+0xe2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d914      	bls.n	8007fdc <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	68d9      	ldr	r1, [r3, #12]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	000b      	movs	r3, r1
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d900      	bls.n	8007fd0 <USBD_LL_DataOutStage+0x58>
 8007fce:	0013      	movs	r3, r2
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	001a      	movs	r2, r3
 8007fd6:	f001 f923 	bl	8009220 <USBD_CtlContinueRx>
 8007fda:	e03e      	b.n	800805a <USBD_LL_DataOutStage+0xe2>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	23a7      	movs	r3, #167	; 0xa7
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	5cd3      	ldrb	r3, [r2, r3]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d10e      	bne.n	8008008 <USBD_LL_DataOutStage+0x90>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	23ae      	movs	r3, #174	; 0xae
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	58d3      	ldr	r3, [r2, r3]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <USBD_LL_DataOutStage+0x90>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	23ae      	movs	r3, #174	; 0xae
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	58d3      	ldr	r3, [r2, r3]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	0010      	movs	r0, r2
 8008006:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	0018      	movs	r0, r3
 800800c:	f001 f919 	bl	8009242 <USBD_CtlSendStatus>
 8008010:	e023      	b.n	800805a <USBD_LL_DataOutStage+0xe2>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	23a7      	movs	r3, #167	; 0xa7
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	5cd3      	ldrb	r3, [r2, r3]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b03      	cmp	r3, #3
 800801e:	d11c      	bne.n	800805a <USBD_LL_DataOutStage+0xe2>
    {
      if (pdev->pClass->DataOut != NULL)
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	23ae      	movs	r3, #174	; 0xae
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	58d3      	ldr	r3, [r2, r3]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d015      	beq.n	800805a <USBD_LL_DataOutStage+0xe2>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	23ae      	movs	r3, #174	; 0xae
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	58d3      	ldr	r3, [r2, r3]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2517      	movs	r5, #23
 800803a:	197c      	adds	r4, r7, r5
 800803c:	220b      	movs	r2, #11
 800803e:	18ba      	adds	r2, r7, r2
 8008040:	7811      	ldrb	r1, [r2, #0]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	0010      	movs	r0, r2
 8008046:	4798      	blx	r3
 8008048:	0003      	movs	r3, r0
 800804a:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800804c:	197b      	adds	r3, r7, r5
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <USBD_LL_DataOutStage+0xe2>
        {
          return ret;
 8008054:	197b      	adds	r3, r7, r5
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	e000      	b.n	800805c <USBD_LL_DataOutStage+0xe4>
        }
      }
    }
  }

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	0018      	movs	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	b006      	add	sp, #24
 8008062:	bdb0      	pop	{r4, r5, r7, pc}

08008064 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008064:	b5b0      	push	{r4, r5, r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	607a      	str	r2, [r7, #4]
 800806e:	200b      	movs	r0, #11
 8008070:	183b      	adds	r3, r7, r0
 8008072:	1c0a      	adds	r2, r1, #0
 8008074:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008076:	183b      	adds	r3, r7, r0
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d000      	beq.n	8008080 <USBD_LL_DataInStage+0x1c>
 800807e:	e078      	b.n	8008172 <USBD_LL_DataInStage+0x10e>
  {
    pep = &pdev->ep_in[0];
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3314      	adds	r3, #20
 8008084:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	23a5      	movs	r3, #165	; 0xa5
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	58d3      	ldr	r3, [r2, r3]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d15f      	bne.n	8008152 <USBD_LL_DataInStage+0xee>
    {
      if (pep->rem_length > pep->maxpacket)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	429a      	cmp	r2, r3
 800809c:	d914      	bls.n	80080c8 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	1ad2      	subs	r2, r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	0018      	movs	r0, r3
 80080b6:	f001 f882 	bl	80091be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	2300      	movs	r3, #0
 80080be:	2200      	movs	r2, #0
 80080c0:	2100      	movs	r1, #0
 80080c2:	f001 fdf2 	bl	8009caa <USBD_LL_PrepareReceive>
 80080c6:	e044      	b.n	8008152 <USBD_LL_DataInStage+0xee>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d11f      	bne.n	8008114 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080dc:	429a      	cmp	r2, r3
 80080de:	d319      	bcc.n	8008114 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	23a6      	movs	r3, #166	; 0xa6
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d211      	bcs.n	8008114 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	0018      	movs	r0, r3
 80080f8:	f001 f861 	bl	80091be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	23a6      	movs	r3, #166	; 0xa6
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	2100      	movs	r1, #0
 8008104:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	2300      	movs	r3, #0
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	f001 fdcc 	bl	8009caa <USBD_LL_PrepareReceive>
 8008112:	e01e      	b.n	8008152 <USBD_LL_DataInStage+0xee>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	23a7      	movs	r3, #167	; 0xa7
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	5cd3      	ldrb	r3, [r2, r3]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b03      	cmp	r3, #3
 8008120:	d10e      	bne.n	8008140 <USBD_LL_DataInStage+0xdc>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	23ae      	movs	r3, #174	; 0xae
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	58d3      	ldr	r3, [r2, r3]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <USBD_LL_DataInStage+0xdc>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	23ae      	movs	r3, #174	; 0xae
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	58d3      	ldr	r3, [r2, r3]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	0010      	movs	r0, r2
 800813e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2180      	movs	r1, #128	; 0x80
 8008144:	0018      	movs	r0, r3
 8008146:	f001 fcce 	bl	8009ae6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	0018      	movs	r0, r3
 800814e:	f001 f88c 	bl	800926a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	23a8      	movs	r3, #168	; 0xa8
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	5cd3      	ldrb	r3, [r2, r3]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d12d      	bne.n	80081ba <USBD_LL_DataInStage+0x156>
    {
      (void)USBD_RunTestMode(pdev);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	0018      	movs	r0, r3
 8008162:	f7ff fe55 	bl	8007e10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	23a8      	movs	r3, #168	; 0xa8
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	2100      	movs	r1, #0
 800816e:	54d1      	strb	r1, [r2, r3]
 8008170:	e023      	b.n	80081ba <USBD_LL_DataInStage+0x156>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	23a7      	movs	r3, #167	; 0xa7
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	5cd3      	ldrb	r3, [r2, r3]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b03      	cmp	r3, #3
 800817e:	d11c      	bne.n	80081ba <USBD_LL_DataInStage+0x156>
    {
      if (pdev->pClass->DataIn != NULL)
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	23ae      	movs	r3, #174	; 0xae
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	58d3      	ldr	r3, [r2, r3]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d015      	beq.n	80081ba <USBD_LL_DataInStage+0x156>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	23ae      	movs	r3, #174	; 0xae
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	58d3      	ldr	r3, [r2, r3]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	2517      	movs	r5, #23
 800819a:	197c      	adds	r4, r7, r5
 800819c:	220b      	movs	r2, #11
 800819e:	18ba      	adds	r2, r7, r2
 80081a0:	7811      	ldrb	r1, [r2, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	0010      	movs	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	0003      	movs	r3, r0
 80081aa:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 80081ac:	197b      	adds	r3, r7, r5
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <USBD_LL_DataInStage+0x156>
        {
          return ret;
 80081b4:	197b      	adds	r3, r7, r5
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	e000      	b.n	80081bc <USBD_LL_DataInStage+0x158>
        }
      }
    }
  }

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	b006      	add	sp, #24
 80081c2:	bdb0      	pop	{r4, r5, r7, pc}

080081c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	23a7      	movs	r3, #167	; 0xa7
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	2101      	movs	r1, #1
 80081d4:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	23a5      	movs	r3, #165	; 0xa5
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	2100      	movs	r1, #0
 80081de:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	23a9      	movs	r3, #169	; 0xa9
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	2100      	movs	r1, #0
 80081ee:	50d1      	str	r1, [r2, r3]

  if (pdev->pClass == NULL)
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	23ae      	movs	r3, #174	; 0xae
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	58d3      	ldr	r3, [r2, r3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <USBD_LL_Reset+0x3c>
  {
    return USBD_FAIL;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e034      	b.n	800826a <USBD_LL_Reset+0xa6>
  }

  if (pdev->pClassData != NULL)
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	23af      	movs	r3, #175	; 0xaf
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	58d3      	ldr	r3, [r2, r3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d011      	beq.n	8008230 <USBD_LL_Reset+0x6c>
  {
    if (pdev->pClass->DeInit != NULL)
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	23ae      	movs	r3, #174	; 0xae
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	58d3      	ldr	r3, [r2, r3]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <USBD_LL_Reset+0x6c>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	23ae      	movs	r3, #174	; 0xae
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	58d3      	ldr	r3, [r2, r3]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	b2d9      	uxtb	r1, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	0018      	movs	r0, r3
 800822e:	4790      	blx	r2
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	2340      	movs	r3, #64	; 0x40
 8008234:	2200      	movs	r2, #0
 8008236:	2100      	movs	r1, #0
 8008238:	f001 fbf3 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	23b2      	movs	r3, #178	; 0xb2
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	2101      	movs	r1, #1
 8008244:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	23b0      	movs	r3, #176	; 0xb0
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	2140      	movs	r1, #64	; 0x40
 800824e:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	2200      	movs	r2, #0
 8008256:	2180      	movs	r1, #128	; 0x80
 8008258:	f001 fbe3 	bl	8009a22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2240      	movs	r2, #64	; 0x40
 8008266:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	0018      	movs	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	b002      	add	sp, #8
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	000a      	movs	r2, r1
 800827c:	1cfb      	adds	r3, r7, #3
 800827e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	1cfa      	adds	r2, r7, #3
 8008284:	7812      	ldrb	r2, [r2, #0]
 8008286:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	0018      	movs	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	b002      	add	sp, #8
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	23a7      	movs	r3, #167	; 0xa7
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	5cd3      	ldrb	r3, [r2, r3]
 80082a4:	b2d9      	uxtb	r1, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a05      	ldr	r2, [pc, #20]	; (80082c0 <USBD_LL_Suspend+0x2c>)
 80082aa:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	23a7      	movs	r3, #167	; 0xa7
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	2104      	movs	r1, #4
 80082b4:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	0018      	movs	r0, r3
 80082ba:	46bd      	mov	sp, r7
 80082bc:	b002      	add	sp, #8
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	0000029d 	.word	0x0000029d

080082c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	23a7      	movs	r3, #167	; 0xa7
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	5cd3      	ldrb	r3, [r2, r3]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d107      	bne.n	80082ea <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a05      	ldr	r2, [pc, #20]	; (80082f4 <USBD_LL_Resume+0x30>)
 80082de:	5c9b      	ldrb	r3, [r3, r2]
 80082e0:	b2d9      	uxtb	r1, r3
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	23a7      	movs	r3, #167	; 0xa7
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	0018      	movs	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	b002      	add	sp, #8
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	0000029d 	.word	0x0000029d

080082f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	23ae      	movs	r3, #174	; 0xae
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	58d3      	ldr	r3, [r2, r3]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <USBD_LL_SOF+0x18>
  {
    return USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	e016      	b.n	800833e <USBD_LL_SOF+0x46>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	23a7      	movs	r3, #167	; 0xa7
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	5cd3      	ldrb	r3, [r2, r3]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b03      	cmp	r3, #3
 800831c:	d10e      	bne.n	800833c <USBD_LL_SOF+0x44>
  {
    if (pdev->pClass->SOF != NULL)
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	23ae      	movs	r3, #174	; 0xae
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	58d3      	ldr	r3, [r2, r3]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <USBD_LL_SOF+0x44>
    {
      (void)pdev->pClass->SOF(pdev);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	23ae      	movs	r3, #174	; 0xae
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	58d3      	ldr	r3, [r2, r3]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	0010      	movs	r0, r2
 800833a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	0018      	movs	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	b002      	add	sp, #8
 8008344:	bd80      	pop	{r7, pc}

08008346 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	2112      	movs	r1, #18
 8008358:	187b      	adds	r3, r7, r1
 800835a:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	3301      	adds	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	781a      	ldrb	r2, [r3, #0]
 8008366:	2010      	movs	r0, #16
 8008368:	183b      	adds	r3, r7, r0
 800836a:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800836c:	183b      	adds	r3, r7, r0
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	b21a      	sxth	r2, r3
 8008374:	187b      	adds	r3, r7, r1
 8008376:	2100      	movs	r1, #0
 8008378:	5e5b      	ldrsh	r3, [r3, r1]
 800837a:	4313      	orrs	r3, r2
 800837c:	b21a      	sxth	r2, r3
 800837e:	210e      	movs	r1, #14
 8008380:	187b      	adds	r3, r7, r1
 8008382:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8008384:	187b      	adds	r3, r7, r1
 8008386:	881b      	ldrh	r3, [r3, #0]
}
 8008388:	0018      	movs	r0, r3
 800838a:	46bd      	mov	sp, r7
 800838c:	b006      	add	sp, #24
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	230f      	movs	r3, #15
 800839c:	18fb      	adds	r3, r7, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	001a      	movs	r2, r3
 80083a8:	2360      	movs	r3, #96	; 0x60
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d004      	beq.n	80083ba <USBD_StdDevReq+0x2a>
 80083b0:	d857      	bhi.n	8008462 <USBD_StdDevReq+0xd2>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00f      	beq.n	80083d6 <USBD_StdDevReq+0x46>
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d153      	bne.n	8008462 <USBD_StdDevReq+0xd2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	23ae      	movs	r3, #174	; 0xae
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	58d3      	ldr	r3, [r2, r3]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	220f      	movs	r2, #15
 80083c6:	18bc      	adds	r4, r7, r2
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	0010      	movs	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	0003      	movs	r3, r0
 80083d2:	7023      	strb	r3, [r4, #0]
      break;
 80083d4:	e04c      	b.n	8008470 <USBD_StdDevReq+0xe0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d839      	bhi.n	8008452 <USBD_StdDevReq+0xc2>
 80083de:	009a      	lsls	r2, r3, #2
 80083e0:	4b27      	ldr	r3, [pc, #156]	; (8008480 <USBD_StdDevReq+0xf0>)
 80083e2:	18d3      	adds	r3, r2, r3
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	0011      	movs	r1, r2
 80083ee:	0018      	movs	r0, r3
 80083f0:	f000 fa58 	bl	80088a4 <USBD_GetDescriptor>
          break;
 80083f4:	e034      	b.n	8008460 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	0011      	movs	r1, r2
 80083fc:	0018      	movs	r0, r3
 80083fe:	f000 fc2b 	bl	8008c58 <USBD_SetAddress>
          break;
 8008402:	e02d      	b.n	8008460 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008404:	230f      	movs	r3, #15
 8008406:	18fc      	adds	r4, r7, r3
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	0011      	movs	r1, r2
 800840e:	0018      	movs	r0, r3
 8008410:	f000 fc78 	bl	8008d04 <USBD_SetConfig>
 8008414:	0003      	movs	r3, r0
 8008416:	7023      	strb	r3, [r4, #0]
          break;
 8008418:	e022      	b.n	8008460 <USBD_StdDevReq+0xd0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	0011      	movs	r1, r2
 8008420:	0018      	movs	r0, r3
 8008422:	f000 fd37 	bl	8008e94 <USBD_GetConfig>
          break;
 8008426:	e01b      	b.n	8008460 <USBD_StdDevReq+0xd0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0011      	movs	r1, r2
 800842e:	0018      	movs	r0, r3
 8008430:	f000 fd6c 	bl	8008f0c <USBD_GetStatus>
          break;
 8008434:	e014      	b.n	8008460 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0011      	movs	r1, r2
 800843c:	0018      	movs	r0, r3
 800843e:	f000 fda0 	bl	8008f82 <USBD_SetFeature>
          break;
 8008442:	e00d      	b.n	8008460 <USBD_StdDevReq+0xd0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	0011      	movs	r1, r2
 800844a:	0018      	movs	r0, r3
 800844c:	f000 fdaf 	bl	8008fae <USBD_ClrFeature>
          break;
 8008450:	e006      	b.n	8008460 <USBD_StdDevReq+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	0011      	movs	r1, r2
 8008458:	0018      	movs	r0, r3
 800845a:	f000 fe0c 	bl	8009076 <USBD_CtlError>
          break;
 800845e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008460:	e006      	b.n	8008470 <USBD_StdDevReq+0xe0>

    default:
      USBD_CtlError(pdev, req);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0011      	movs	r1, r2
 8008468:	0018      	movs	r0, r3
 800846a:	f000 fe04 	bl	8009076 <USBD_CtlError>
      break;
 800846e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008470:	230f      	movs	r3, #15
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	781b      	ldrb	r3, [r3, #0]
}
 8008476:	0018      	movs	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	b005      	add	sp, #20
 800847c:	bd90      	pop	{r4, r7, pc}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	0800a0c4 	.word	0x0800a0c4

08008484 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008484:	b5b0      	push	{r4, r5, r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800848e:	230f      	movs	r3, #15
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	001a      	movs	r2, r3
 800849c:	2360      	movs	r3, #96	; 0x60
 800849e:	4013      	ands	r3, r2
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	d004      	beq.n	80084ae <USBD_StdItfReq+0x2a>
 80084a4:	d83a      	bhi.n	800851c <USBD_StdItfReq+0x98>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <USBD_StdItfReq+0x2a>
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d136      	bne.n	800851c <USBD_StdItfReq+0x98>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	23a7      	movs	r3, #167	; 0xa7
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	5cd3      	ldrb	r3, [r2, r3]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	3b01      	subs	r3, #1
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d825      	bhi.n	800850a <USBD_StdItfReq+0x86>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d819      	bhi.n	80084fc <USBD_StdItfReq+0x78>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	23ae      	movs	r3, #174	; 0xae
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	58d3      	ldr	r3, [r2, r3]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	250f      	movs	r5, #15
 80084d4:	197c      	adds	r4, r7, r5
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	0010      	movs	r0, r2
 80084dc:	4798      	blx	r3
 80084de:	0003      	movs	r3, r0
 80084e0:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d116      	bne.n	8008518 <USBD_StdItfReq+0x94>
 80084ea:	197b      	adds	r3, r7, r5
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d112      	bne.n	8008518 <USBD_StdItfReq+0x94>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f000 fea4 	bl	8009242 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084fa:	e00d      	b.n	8008518 <USBD_StdItfReq+0x94>
            USBD_CtlError(pdev, req);
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	0011      	movs	r1, r2
 8008502:	0018      	movs	r0, r3
 8008504:	f000 fdb7 	bl	8009076 <USBD_CtlError>
          break;
 8008508:	e006      	b.n	8008518 <USBD_StdItfReq+0x94>

        default:
          USBD_CtlError(pdev, req);
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	0011      	movs	r1, r2
 8008510:	0018      	movs	r0, r3
 8008512:	f000 fdb0 	bl	8009076 <USBD_CtlError>
          break;
 8008516:	e000      	b.n	800851a <USBD_StdItfReq+0x96>
          break;
 8008518:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800851a:	e006      	b.n	800852a <USBD_StdItfReq+0xa6>

    default:
      USBD_CtlError(pdev, req);
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	0011      	movs	r1, r2
 8008522:	0018      	movs	r0, r3
 8008524:	f000 fda7 	bl	8009076 <USBD_CtlError>
      break;
 8008528:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800852a:	230f      	movs	r3, #15
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	781b      	ldrb	r3, [r3, #0]
}
 8008530:	0018      	movs	r0, r3
 8008532:	46bd      	mov	sp, r7
 8008534:	b004      	add	sp, #16
 8008536:	bdb0      	pop	{r4, r5, r7, pc}

08008538 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008542:	230f      	movs	r3, #15
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
  ep_addr = LOBYTE(req->wIndex);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	889a      	ldrh	r2, [r3, #4]
 800854e:	230e      	movs	r3, #14
 8008550:	18fb      	adds	r3, r7, r3
 8008552:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	001a      	movs	r2, r3
 800855a:	2360      	movs	r3, #96	; 0x60
 800855c:	4013      	ands	r3, r2
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d006      	beq.n	8008570 <USBD_StdEPReq+0x38>
 8008562:	d900      	bls.n	8008566 <USBD_StdEPReq+0x2e>
 8008564:	e18f      	b.n	8008886 <USBD_StdEPReq+0x34e>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <USBD_StdEPReq+0x54>
 800856a:	2b20      	cmp	r3, #32
 800856c:	d000      	beq.n	8008570 <USBD_StdEPReq+0x38>
 800856e:	e18a      	b.n	8008886 <USBD_StdEPReq+0x34e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	23ae      	movs	r3, #174	; 0xae
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	58d3      	ldr	r3, [r2, r3]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	220f      	movs	r2, #15
 800857c:	18bc      	adds	r4, r7, r2
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	0010      	movs	r0, r2
 8008584:	4798      	blx	r3
 8008586:	0003      	movs	r3, r0
 8008588:	7023      	strb	r3, [r4, #0]
      break;
 800858a:	e183      	b.n	8008894 <USBD_StdEPReq+0x35c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	785b      	ldrb	r3, [r3, #1]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d007      	beq.n	80085a4 <USBD_StdEPReq+0x6c>
 8008594:	dd00      	ble.n	8008598 <USBD_StdEPReq+0x60>
 8008596:	e16e      	b.n	8008876 <USBD_StdEPReq+0x33e>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d100      	bne.n	800859e <USBD_StdEPReq+0x66>
 800859c:	e0a3      	b.n	80086e6 <USBD_StdEPReq+0x1ae>
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d04d      	beq.n	800863e <USBD_StdEPReq+0x106>
 80085a2:	e168      	b.n	8008876 <USBD_StdEPReq+0x33e>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	23a7      	movs	r3, #167	; 0xa7
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	5cd3      	ldrb	r3, [r2, r3]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d002      	beq.n	80085b8 <USBD_StdEPReq+0x80>
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d01e      	beq.n	80085f4 <USBD_StdEPReq+0xbc>
 80085b6:	e03a      	b.n	800862e <USBD_StdEPReq+0xf6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b8:	220e      	movs	r2, #14
 80085ba:	18bb      	adds	r3, r7, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d011      	beq.n	80085e6 <USBD_StdEPReq+0xae>
 80085c2:	18bb      	adds	r3, r7, r2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b80      	cmp	r3, #128	; 0x80
 80085c8:	d00d      	beq.n	80085e6 <USBD_StdEPReq+0xae>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ca:	18bb      	adds	r3, r7, r2
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	0011      	movs	r1, r2
 80085d2:	0018      	movs	r0, r3
 80085d4:	f001 fa87 	bl	8009ae6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2180      	movs	r1, #128	; 0x80
 80085dc:	0018      	movs	r0, r3
 80085de:	f001 fa82 	bl	8009ae6 <USBD_LL_StallEP>
 80085e2:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085e4:	e02a      	b.n	800863c <USBD_StdEPReq+0x104>
                USBD_CtlError(pdev, req);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	0011      	movs	r1, r2
 80085ec:	0018      	movs	r0, r3
 80085ee:	f000 fd42 	bl	8009076 <USBD_CtlError>
              break;
 80085f2:	e023      	b.n	800863c <USBD_StdEPReq+0x104>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	885b      	ldrh	r3, [r3, #2]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d113      	bne.n	8008624 <USBD_StdEPReq+0xec>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085fc:	220e      	movs	r2, #14
 80085fe:	18bb      	adds	r3, r7, r2
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <USBD_StdEPReq+0xec>
 8008606:	18bb      	adds	r3, r7, r2
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	d00a      	beq.n	8008624 <USBD_StdEPReq+0xec>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	88db      	ldrh	r3, [r3, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <USBD_StdEPReq+0xec>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008616:	18bb      	adds	r3, r7, r2
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	0011      	movs	r1, r2
 800861e:	0018      	movs	r0, r3
 8008620:	f001 fa61 	bl	8009ae6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	0018      	movs	r0, r3
 8008628:	f000 fe0b 	bl	8009242 <USBD_CtlSendStatus>

              break;
 800862c:	e006      	b.n	800863c <USBD_StdEPReq+0x104>

            default:
              USBD_CtlError(pdev, req);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	0011      	movs	r1, r2
 8008634:	0018      	movs	r0, r3
 8008636:	f000 fd1e 	bl	8009076 <USBD_CtlError>
              break;
 800863a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800863c:	e122      	b.n	8008884 <USBD_StdEPReq+0x34c>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	23a7      	movs	r3, #167	; 0xa7
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	5cd3      	ldrb	r3, [r2, r3]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d002      	beq.n	8008652 <USBD_StdEPReq+0x11a>
 800864c:	2b03      	cmp	r3, #3
 800864e:	d01e      	beq.n	800868e <USBD_StdEPReq+0x156>
 8008650:	e040      	b.n	80086d4 <USBD_StdEPReq+0x19c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008652:	220e      	movs	r2, #14
 8008654:	18bb      	adds	r3, r7, r2
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d011      	beq.n	8008680 <USBD_StdEPReq+0x148>
 800865c:	18bb      	adds	r3, r7, r2
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b80      	cmp	r3, #128	; 0x80
 8008662:	d00d      	beq.n	8008680 <USBD_StdEPReq+0x148>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008664:	18bb      	adds	r3, r7, r2
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	0011      	movs	r1, r2
 800866c:	0018      	movs	r0, r3
 800866e:	f001 fa3a 	bl	8009ae6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2180      	movs	r1, #128	; 0x80
 8008676:	0018      	movs	r0, r3
 8008678:	f001 fa35 	bl	8009ae6 <USBD_LL_StallEP>
 800867c:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800867e:	e031      	b.n	80086e4 <USBD_StdEPReq+0x1ac>
                USBD_CtlError(pdev, req);
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	0011      	movs	r1, r2
 8008686:	0018      	movs	r0, r3
 8008688:	f000 fcf5 	bl	8009076 <USBD_CtlError>
              break;
 800868c:	e02a      	b.n	80086e4 <USBD_StdEPReq+0x1ac>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d125      	bne.n	80086e2 <USBD_StdEPReq+0x1aa>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008696:	210e      	movs	r1, #14
 8008698:	187b      	adds	r3, r7, r1
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	227f      	movs	r2, #127	; 0x7f
 800869e:	4013      	ands	r3, r2
 80086a0:	d006      	beq.n	80086b0 <USBD_StdEPReq+0x178>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086a2:	187b      	adds	r3, r7, r1
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	0011      	movs	r1, r2
 80086aa:	0018      	movs	r0, r3
 80086ac:	f001 fa46 	bl	8009b3c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	0018      	movs	r0, r3
 80086b4:	f000 fdc5 	bl	8009242 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	23ae      	movs	r3, #174	; 0xae
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	58d3      	ldr	r3, [r2, r3]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	220f      	movs	r2, #15
 80086c4:	18bc      	adds	r4, r7, r2
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	0010      	movs	r0, r2
 80086cc:	4798      	blx	r3
 80086ce:	0003      	movs	r3, r0
 80086d0:	7023      	strb	r3, [r4, #0]
              }
              break;
 80086d2:	e006      	b.n	80086e2 <USBD_StdEPReq+0x1aa>

            default:
              USBD_CtlError(pdev, req);
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	0011      	movs	r1, r2
 80086da:	0018      	movs	r0, r3
 80086dc:	f000 fccb 	bl	8009076 <USBD_CtlError>
              break;
 80086e0:	e000      	b.n	80086e4 <USBD_StdEPReq+0x1ac>
              break;
 80086e2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80086e4:	e0ce      	b.n	8008884 <USBD_StdEPReq+0x34c>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	23a7      	movs	r3, #167	; 0xa7
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	5cd3      	ldrb	r3, [r2, r3]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d002      	beq.n	80086fa <USBD_StdEPReq+0x1c2>
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d03c      	beq.n	8008772 <USBD_StdEPReq+0x23a>
 80086f8:	e0b5      	b.n	8008866 <USBD_StdEPReq+0x32e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086fa:	220e      	movs	r2, #14
 80086fc:	18bb      	adds	r3, r7, r2
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00a      	beq.n	800871a <USBD_StdEPReq+0x1e2>
 8008704:	18bb      	adds	r3, r7, r2
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d006      	beq.n	800871a <USBD_StdEPReq+0x1e2>
              {
                USBD_CtlError(pdev, req);
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	0011      	movs	r1, r2
 8008712:	0018      	movs	r0, r3
 8008714:	f000 fcaf 	bl	8009076 <USBD_CtlError>
                break;
 8008718:	e0ac      	b.n	8008874 <USBD_StdEPReq+0x33c>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871a:	220e      	movs	r2, #14
 800871c:	18bb      	adds	r3, r7, r2
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b25b      	sxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	da0c      	bge.n	8008740 <USBD_StdEPReq+0x208>
 8008726:	18bb      	adds	r3, r7, r2
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	227f      	movs	r2, #127	; 0x7f
 800872c:	401a      	ands	r2, r3
 800872e:	0013      	movs	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	189b      	adds	r3, r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	3310      	adds	r3, #16
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	18d3      	adds	r3, r2, r3
 800873c:	3304      	adds	r3, #4
 800873e:	e00d      	b.n	800875c <USBD_StdEPReq+0x224>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008740:	230e      	movs	r3, #14
 8008742:	18fb      	adds	r3, r7, r3
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	227f      	movs	r2, #127	; 0x7f
 8008748:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874a:	0013      	movs	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	189b      	adds	r3, r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	3351      	adds	r3, #81	; 0x51
 8008754:	33ff      	adds	r3, #255	; 0xff
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	18d3      	adds	r3, r2, r3
 800875a:	3304      	adds	r3, #4
 800875c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2202      	movs	r2, #2
 800876a:	0018      	movs	r0, r3
 800876c:	f000 fd0b 	bl	8009186 <USBD_CtlSendData>
              break;
 8008770:	e080      	b.n	8008874 <USBD_StdEPReq+0x33c>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008772:	220e      	movs	r2, #14
 8008774:	18bb      	adds	r3, r7, r2
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	b25b      	sxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	da14      	bge.n	80087a8 <USBD_StdEPReq+0x270>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800877e:	18bb      	adds	r3, r7, r2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	220f      	movs	r2, #15
 8008784:	401a      	ands	r2, r3
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	0013      	movs	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	189b      	adds	r3, r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	18cb      	adds	r3, r1, r3
 8008792:	3324      	adds	r3, #36	; 0x24
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d11e      	bne.n	80087d8 <USBD_StdEPReq+0x2a0>
                {
                  USBD_CtlError(pdev, req);
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	0011      	movs	r1, r2
 80087a0:	0018      	movs	r0, r3
 80087a2:	f000 fc68 	bl	8009076 <USBD_CtlError>
                  break;
 80087a6:	e065      	b.n	8008874 <USBD_StdEPReq+0x33c>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087a8:	230e      	movs	r3, #14
 80087aa:	18fb      	adds	r3, r7, r3
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	220f      	movs	r2, #15
 80087b0:	401a      	ands	r2, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	23b2      	movs	r3, #178	; 0xb2
 80087b6:	0059      	lsls	r1, r3, #1
 80087b8:	0013      	movs	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	189b      	adds	r3, r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	18c3      	adds	r3, r0, r3
 80087c2:	185b      	adds	r3, r3, r1
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <USBD_StdEPReq+0x2a0>
                {
                  USBD_CtlError(pdev, req);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	0011      	movs	r1, r2
 80087d0:	0018      	movs	r0, r3
 80087d2:	f000 fc50 	bl	8009076 <USBD_CtlError>
                  break;
 80087d6:	e04d      	b.n	8008874 <USBD_StdEPReq+0x33c>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d8:	220e      	movs	r2, #14
 80087da:	18bb      	adds	r3, r7, r2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b25b      	sxtb	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da0c      	bge.n	80087fe <USBD_StdEPReq+0x2c6>
 80087e4:	18bb      	adds	r3, r7, r2
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	227f      	movs	r2, #127	; 0x7f
 80087ea:	401a      	ands	r2, r3
 80087ec:	0013      	movs	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	189b      	adds	r3, r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	3310      	adds	r3, #16
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	18d3      	adds	r3, r2, r3
 80087fa:	3304      	adds	r3, #4
 80087fc:	e00d      	b.n	800881a <USBD_StdEPReq+0x2e2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fe:	230e      	movs	r3, #14
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	227f      	movs	r2, #127	; 0x7f
 8008806:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008808:	0013      	movs	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	189b      	adds	r3, r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	3351      	adds	r3, #81	; 0x51
 8008812:	33ff      	adds	r3, #255	; 0xff
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	18d3      	adds	r3, r2, r3
 8008818:	3304      	adds	r3, #4
 800881a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800881c:	220e      	movs	r2, #14
 800881e:	18bb      	adds	r3, r7, r2
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <USBD_StdEPReq+0x2f6>
 8008826:	18bb      	adds	r3, r7, r2
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b80      	cmp	r3, #128	; 0x80
 800882c:	d103      	bne.n	8008836 <USBD_StdEPReq+0x2fe>
              {
                pep->status = 0x0000U;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e010      	b.n	8008858 <USBD_StdEPReq+0x320>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008836:	230e      	movs	r3, #14
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f001 f9a6 	bl	8009b92 <USBD_LL_IsStallEP>
 8008846:	1e03      	subs	r3, r0, #0
 8008848:	d003      	beq.n	8008852 <USBD_StdEPReq+0x31a>
              {
                pep->status = 0x0001U;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2201      	movs	r2, #1
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	e002      	b.n	8008858 <USBD_StdEPReq+0x320>
              }
              else
              {
                pep->status = 0x0000U;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	0018      	movs	r0, r3
 8008860:	f000 fc91 	bl	8009186 <USBD_CtlSendData>
              break;
 8008864:	e006      	b.n	8008874 <USBD_StdEPReq+0x33c>

            default:
              USBD_CtlError(pdev, req);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	0011      	movs	r1, r2
 800886c:	0018      	movs	r0, r3
 800886e:	f000 fc02 	bl	8009076 <USBD_CtlError>
              break;
 8008872:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008874:	e006      	b.n	8008884 <USBD_StdEPReq+0x34c>

        default:
          USBD_CtlError(pdev, req);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	0011      	movs	r1, r2
 800887c:	0018      	movs	r0, r3
 800887e:	f000 fbfa 	bl	8009076 <USBD_CtlError>
          break;
 8008882:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008884:	e006      	b.n	8008894 <USBD_StdEPReq+0x35c>

    default:
      USBD_CtlError(pdev, req);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	0011      	movs	r1, r2
 800888c:	0018      	movs	r0, r3
 800888e:	f000 fbf2 	bl	8009076 <USBD_CtlError>
      break;
 8008892:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008894:	230f      	movs	r3, #15
 8008896:	18fb      	adds	r3, r7, r3
 8008898:	781b      	ldrb	r3, [r3, #0]
}
 800889a:	0018      	movs	r0, r3
 800889c:	46bd      	mov	sp, r7
 800889e:	b005      	add	sp, #20
 80088a0:	bd90      	pop	{r4, r7, pc}
	...

080088a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ae:	2308      	movs	r3, #8
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	2200      	movs	r2, #0
 80088b4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088ba:	230b      	movs	r3, #11
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	0a1b      	lsrs	r3, r3, #8
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b0f      	cmp	r3, #15
 80088cc:	d900      	bls.n	80088d0 <USBD_GetDescriptor+0x2c>
 80088ce:	e17b      	b.n	8008bc8 <USBD_GetDescriptor+0x324>
 80088d0:	009a      	lsls	r2, r3, #2
 80088d2:	4bdd      	ldr	r3, [pc, #884]	; (8008c48 <USBD_GetDescriptor+0x3a4>)
 80088d4:	18d3      	adds	r3, r2, r3
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	23ad      	movs	r3, #173	; 0xad
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	58d3      	ldr	r3, [r2, r3]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	23ad      	movs	r3, #173	; 0xad
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	58d3      	ldr	r3, [r2, r3]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	7c12      	ldrb	r2, [r2, #16]
 80088f6:	2108      	movs	r1, #8
 80088f8:	1879      	adds	r1, r7, r1
 80088fa:	0010      	movs	r0, r2
 80088fc:	4798      	blx	r3
 80088fe:	0003      	movs	r3, r0
 8008900:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008902:	e16e      	b.n	8008be2 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	0011      	movs	r1, r2
 800890a:	0018      	movs	r0, r3
 800890c:	f000 fbb3 	bl	8009076 <USBD_CtlError>
        err++;
 8008910:	210b      	movs	r1, #11
 8008912:	187b      	adds	r3, r7, r1
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	187b      	adds	r3, r7, r1
 8008918:	3201      	adds	r2, #1
 800891a:	701a      	strb	r2, [r3, #0]
      break;
 800891c:	e161      	b.n	8008be2 <USBD_GetDescriptor+0x33e>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	23ad      	movs	r3, #173	; 0xad
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	58d3      	ldr	r3, [r2, r3]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	2108      	movs	r1, #8
 800892e:	1879      	adds	r1, r7, r1
 8008930:	0010      	movs	r0, r2
 8008932:	4798      	blx	r3
 8008934:	0003      	movs	r3, r0
 8008936:	60fb      	str	r3, [r7, #12]
      break;
 8008938:	e153      	b.n	8008be2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	7c1b      	ldrb	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <USBD_GetDescriptor+0xbe>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	23ae      	movs	r3, #174	; 0xae
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	58d3      	ldr	r3, [r2, r3]
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	2208      	movs	r2, #8
 800894e:	18ba      	adds	r2, r7, r2
 8008950:	0010      	movs	r0, r2
 8008952:	4798      	blx	r3
 8008954:	0003      	movs	r3, r0
 8008956:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3301      	adds	r3, #1
 800895c:	2202      	movs	r2, #2
 800895e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008960:	e13f      	b.n	8008be2 <USBD_GetDescriptor+0x33e>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	23ae      	movs	r3, #174	; 0xae
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	58d3      	ldr	r3, [r2, r3]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	2208      	movs	r2, #8
 800896e:	18ba      	adds	r2, r7, r2
 8008970:	0010      	movs	r0, r2
 8008972:	4798      	blx	r3
 8008974:	0003      	movs	r3, r0
 8008976:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	2202      	movs	r2, #2
 800897e:	701a      	strb	r2, [r3, #0]
      break;
 8008980:	e12f      	b.n	8008be2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	885b      	ldrh	r3, [r3, #2]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b05      	cmp	r3, #5
 800898a:	d900      	bls.n	800898e <USBD_GetDescriptor+0xea>
 800898c:	e0d0      	b.n	8008b30 <USBD_GetDescriptor+0x28c>
 800898e:	009a      	lsls	r2, r3, #2
 8008990:	4bae      	ldr	r3, [pc, #696]	; (8008c4c <USBD_GetDescriptor+0x3a8>)
 8008992:	18d3      	adds	r3, r2, r3
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	23ad      	movs	r3, #173	; 0xad
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	58d3      	ldr	r3, [r2, r3]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00d      	beq.n	80089c2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	23ad      	movs	r3, #173	; 0xad
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	58d3      	ldr	r3, [r2, r3]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	2108      	movs	r1, #8
 80089b6:	1879      	adds	r1, r7, r1
 80089b8:	0010      	movs	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	0003      	movs	r3, r0
 80089be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c0:	e0c3      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	0011      	movs	r1, r2
 80089c8:	0018      	movs	r0, r3
 80089ca:	f000 fb54 	bl	8009076 <USBD_CtlError>
            err++;
 80089ce:	210b      	movs	r1, #11
 80089d0:	187b      	adds	r3, r7, r1
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	187b      	adds	r3, r7, r1
 80089d6:	3201      	adds	r2, #1
 80089d8:	701a      	strb	r2, [r3, #0]
          break;
 80089da:	e0b6      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	23ad      	movs	r3, #173	; 0xad
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	58d3      	ldr	r3, [r2, r3]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	23ad      	movs	r3, #173	; 0xad
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	58d3      	ldr	r3, [r2, r3]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7c12      	ldrb	r2, [r2, #16]
 80089f8:	2108      	movs	r1, #8
 80089fa:	1879      	adds	r1, r7, r1
 80089fc:	0010      	movs	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	0003      	movs	r3, r0
 8008a02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a04:	e0a1      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	0011      	movs	r1, r2
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f000 fb32 	bl	8009076 <USBD_CtlError>
            err++;
 8008a12:	210b      	movs	r1, #11
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	187b      	adds	r3, r7, r1
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
          break;
 8008a1e:	e094      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	23ad      	movs	r3, #173	; 0xad
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	58d3      	ldr	r3, [r2, r3]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00d      	beq.n	8008a4a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	23ad      	movs	r3, #173	; 0xad
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	58d3      	ldr	r3, [r2, r3]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	7c12      	ldrb	r2, [r2, #16]
 8008a3c:	2108      	movs	r1, #8
 8008a3e:	1879      	adds	r1, r7, r1
 8008a40:	0010      	movs	r0, r2
 8008a42:	4798      	blx	r3
 8008a44:	0003      	movs	r3, r0
 8008a46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a48:	e07f      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	0011      	movs	r1, r2
 8008a50:	0018      	movs	r0, r3
 8008a52:	f000 fb10 	bl	8009076 <USBD_CtlError>
            err++;
 8008a56:	210b      	movs	r1, #11
 8008a58:	187b      	adds	r3, r7, r1
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	3201      	adds	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]
          break;
 8008a62:	e072      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	23ad      	movs	r3, #173	; 0xad
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	58d3      	ldr	r3, [r2, r3]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00d      	beq.n	8008a8e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	23ad      	movs	r3, #173	; 0xad
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	58d3      	ldr	r3, [r2, r3]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	7c12      	ldrb	r2, [r2, #16]
 8008a80:	2108      	movs	r1, #8
 8008a82:	1879      	adds	r1, r7, r1
 8008a84:	0010      	movs	r0, r2
 8008a86:	4798      	blx	r3
 8008a88:	0003      	movs	r3, r0
 8008a8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8c:	e05d      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	0011      	movs	r1, r2
 8008a94:	0018      	movs	r0, r3
 8008a96:	f000 faee 	bl	8009076 <USBD_CtlError>
            err++;
 8008a9a:	210b      	movs	r1, #11
 8008a9c:	187b      	adds	r3, r7, r1
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	187b      	adds	r3, r7, r1
 8008aa2:	3201      	adds	r2, #1
 8008aa4:	701a      	strb	r2, [r3, #0]
          break;
 8008aa6:	e050      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	23ad      	movs	r3, #173	; 0xad
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	58d3      	ldr	r3, [r2, r3]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	23ad      	movs	r3, #173	; 0xad
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	58d3      	ldr	r3, [r2, r3]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	7c12      	ldrb	r2, [r2, #16]
 8008ac4:	2108      	movs	r1, #8
 8008ac6:	1879      	adds	r1, r7, r1
 8008ac8:	0010      	movs	r0, r2
 8008aca:	4798      	blx	r3
 8008acc:	0003      	movs	r3, r0
 8008ace:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad0:	e03b      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f000 facc 	bl	8009076 <USBD_CtlError>
            err++;
 8008ade:	210b      	movs	r1, #11
 8008ae0:	187b      	adds	r3, r7, r1
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	187b      	adds	r3, r7, r1
 8008ae6:	3201      	adds	r2, #1
 8008ae8:	701a      	strb	r2, [r3, #0]
          break;
 8008aea:	e02e      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	23ad      	movs	r3, #173	; 0xad
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	58d3      	ldr	r3, [r2, r3]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00d      	beq.n	8008b16 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	23ad      	movs	r3, #173	; 0xad
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	58d3      	ldr	r3, [r2, r3]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	7c12      	ldrb	r2, [r2, #16]
 8008b08:	2108      	movs	r1, #8
 8008b0a:	1879      	adds	r1, r7, r1
 8008b0c:	0010      	movs	r0, r2
 8008b0e:	4798      	blx	r3
 8008b10:	0003      	movs	r3, r0
 8008b12:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b14:	e019      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	0011      	movs	r1, r2
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f000 faaa 	bl	8009076 <USBD_CtlError>
            err++;
 8008b22:	210b      	movs	r1, #11
 8008b24:	187b      	adds	r3, r7, r1
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
          break;
 8008b2e:	e00c      	b.n	8008b4a <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	0011      	movs	r1, r2
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 fa9d 	bl	8009076 <USBD_CtlError>
          err++;
 8008b3c:	210b      	movs	r1, #11
 8008b3e:	187b      	adds	r3, r7, r1
 8008b40:	781a      	ldrb	r2, [r3, #0]
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	3201      	adds	r2, #1
 8008b46:	701a      	strb	r2, [r3, #0]
#endif
          break;
 8008b48:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008b4a:	e04a      	b.n	8008be2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	7c1b      	ldrb	r3, [r3, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10b      	bne.n	8008b6c <USBD_GetDescriptor+0x2c8>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	23ae      	movs	r3, #174	; 0xae
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	58d3      	ldr	r3, [r2, r3]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	2208      	movs	r2, #8
 8008b60:	18ba      	adds	r2, r7, r2
 8008b62:	0010      	movs	r0, r2
 8008b64:	4798      	blx	r3
 8008b66:	0003      	movs	r3, r0
 8008b68:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b6a:	e03a      	b.n	8008be2 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f000 fa7f 	bl	8009076 <USBD_CtlError>
        err++;
 8008b78:	210b      	movs	r1, #11
 8008b7a:	187b      	adds	r3, r7, r1
 8008b7c:	781a      	ldrb	r2, [r3, #0]
 8008b7e:	187b      	adds	r3, r7, r1
 8008b80:	3201      	adds	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]
      break;
 8008b84:	e02d      	b.n	8008be2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	7c1b      	ldrb	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10f      	bne.n	8008bae <USBD_GetDescriptor+0x30a>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	23ae      	movs	r3, #174	; 0xae
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	58d3      	ldr	r3, [r2, r3]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	2208      	movs	r2, #8
 8008b9a:	18ba      	adds	r2, r7, r2
 8008b9c:	0010      	movs	r0, r2
 8008b9e:	4798      	blx	r3
 8008ba0:	0003      	movs	r3, r0
 8008ba2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	2207      	movs	r2, #7
 8008baa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bac:	e019      	b.n	8008be2 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	0011      	movs	r1, r2
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f000 fa5e 	bl	8009076 <USBD_CtlError>
        err++;
 8008bba:	210b      	movs	r1, #11
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	781a      	ldrb	r2, [r3, #0]
 8008bc0:	187b      	adds	r3, r7, r1
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
      break;
 8008bc6:	e00c      	b.n	8008be2 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	0011      	movs	r1, r2
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f000 fa51 	bl	8009076 <USBD_CtlError>
      err++;
 8008bd4:	210b      	movs	r1, #11
 8008bd6:	187b      	adds	r3, r7, r1
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	187b      	adds	r3, r7, r1
 8008bdc:	3201      	adds	r2, #1
 8008bde:	701a      	strb	r2, [r3, #0]
      break;
 8008be0:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008be2:	230b      	movs	r3, #11
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d131      	bne.n	8008c50 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	88db      	ldrh	r3, [r3, #6]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d023      	beq.n	8008c3c <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 8008bf4:	2108      	movs	r1, #8
 8008bf6:	187b      	adds	r3, r7, r1
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d017      	beq.n	8008c2e <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	88da      	ldrh	r2, [r3, #6]
 8008c02:	187b      	adds	r3, r7, r1
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	1c18      	adds	r0, r3, #0
 8008c08:	1c11      	adds	r1, r2, #0
 8008c0a:	b28a      	uxth	r2, r1
 8008c0c:	b283      	uxth	r3, r0
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d900      	bls.n	8008c14 <USBD_GetDescriptor+0x370>
 8008c12:	1c01      	adds	r1, r0, #0
 8008c14:	b28a      	uxth	r2, r1
 8008c16:	2108      	movs	r1, #8
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c1c:	187b      	adds	r3, r7, r1
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	001a      	movs	r2, r3
 8008c22:	68f9      	ldr	r1, [r7, #12]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	0018      	movs	r0, r3
 8008c28:	f000 faad 	bl	8009186 <USBD_CtlSendData>
 8008c2c:	e011      	b.n	8008c52 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	0011      	movs	r1, r2
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 fa1e 	bl	8009076 <USBD_CtlError>
 8008c3a:	e00a      	b.n	8008c52 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f000 faff 	bl	8009242 <USBD_CtlSendStatus>
 8008c44:	e005      	b.n	8008c52 <USBD_GetDescriptor+0x3ae>
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	0800a0ec 	.word	0x0800a0ec
 8008c4c:	0800a12c 	.word	0x0800a12c
    return;
 8008c50:	46c0      	nop			; (mov r8, r8)
  }
}
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b004      	add	sp, #16
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c58:	b590      	push	{r4, r7, lr}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	889b      	ldrh	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d13e      	bne.n	8008ce8 <USBD_SetAddress+0x90>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	88db      	ldrh	r3, [r3, #6]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d13a      	bne.n	8008ce8 <USBD_SetAddress+0x90>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	2b7f      	cmp	r3, #127	; 0x7f
 8008c78:	d836      	bhi.n	8008ce8 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	885b      	ldrh	r3, [r3, #2]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	230f      	movs	r3, #15
 8008c82:	18fb      	adds	r3, r7, r3
 8008c84:	217f      	movs	r1, #127	; 0x7f
 8008c86:	400a      	ands	r2, r1
 8008c88:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	23a7      	movs	r3, #167	; 0xa7
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	5cd3      	ldrb	r3, [r2, r3]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d106      	bne.n	8008ca6 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f000 f9e9 	bl	8009076 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca4:	e027      	b.n	8008cf6 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	240f      	movs	r4, #15
 8008caa:	193a      	adds	r2, r7, r4
 8008cac:	4914      	ldr	r1, [pc, #80]	; (8008d00 <USBD_SetAddress+0xa8>)
 8008cae:	7812      	ldrb	r2, [r2, #0]
 8008cb0:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cb2:	193b      	adds	r3, r7, r4
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	0011      	movs	r1, r2
 8008cba:	0018      	movs	r0, r3
 8008cbc:	f000 ff9a 	bl	8009bf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f000 fabd 	bl	8009242 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cc8:	193b      	adds	r3, r7, r4
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	23a7      	movs	r3, #167	; 0xa7
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	2102      	movs	r1, #2
 8008cd8:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cda:	e00c      	b.n	8008cf6 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	23a7      	movs	r3, #167	; 0xa7
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce6:	e006      	b.n	8008cf6 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0011      	movs	r1, r2
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f000 f9c1 	bl	8009076 <USBD_CtlError>
  }
}
 8008cf4:	46c0      	nop			; (mov r8, r8)
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	b005      	add	sp, #20
 8008cfc:	bd90      	pop	{r4, r7, pc}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	0000029e 	.word	0x0000029e

08008d04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b5b0      	push	{r4, r5, r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0e:	230f      	movs	r3, #15
 8008d10:	18fb      	adds	r3, r7, r3
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	4b5c      	ldr	r3, [pc, #368]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008d1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d20:	4b5b      	ldr	r3, [pc, #364]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d907      	bls.n	8008d38 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	0011      	movs	r1, r2
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f000 f9a1 	bl	8009076 <USBD_CtlError>
    return USBD_FAIL;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e0a7      	b.n	8008e88 <USBD_SetConfig+0x184>
  }

  switch (pdev->dev_state)
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	23a7      	movs	r3, #167	; 0xa7
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	5cd3      	ldrb	r3, [r2, r3]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d002      	beq.n	8008d4c <USBD_SetConfig+0x48>
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d02e      	beq.n	8008da8 <USBD_SetConfig+0xa4>
 8008d4a:	e088      	b.n	8008e5e <USBD_SetConfig+0x15a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d4c:	4b50      	ldr	r3, [pc, #320]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d024      	beq.n	8008d9e <USBD_SetConfig+0x9a>
      {
        pdev->dev_config = cfgidx;
 8008d54:	4b4e      	ldr	r3, [pc, #312]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	001a      	movs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d5e:	4b4c      	ldr	r3, [pc, #304]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008d60:	781a      	ldrb	r2, [r3, #0]
 8008d62:	250f      	movs	r5, #15
 8008d64:	197c      	adds	r4, r7, r5
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	0011      	movs	r1, r2
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff f859 	bl	8007e22 <USBD_SetClassConfig>
 8008d70:	0003      	movs	r3, r0
 8008d72:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8008d74:	197b      	adds	r3, r7, r5
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <USBD_SetConfig+0x86>
        {
          USBD_CtlError(pdev, req);
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	0011      	movs	r1, r2
 8008d82:	0018      	movs	r0, r3
 8008d84:	f000 f977 	bl	8009076 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d88:	e07b      	b.n	8008e82 <USBD_SetConfig+0x17e>
          (void)USBD_CtlSendStatus(pdev);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f000 fa58 	bl	8009242 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	23a7      	movs	r3, #167	; 0xa7
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	2103      	movs	r1, #3
 8008d9a:	54d1      	strb	r1, [r2, r3]
      break;
 8008d9c:	e071      	b.n	8008e82 <USBD_SetConfig+0x17e>
        (void)USBD_CtlSendStatus(pdev);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f000 fa4e 	bl	8009242 <USBD_CtlSendStatus>
      break;
 8008da6:	e06c      	b.n	8008e82 <USBD_SetConfig+0x17e>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008da8:	4b39      	ldr	r3, [pc, #228]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d115      	bne.n	8008ddc <USBD_SetConfig+0xd8>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	23a7      	movs	r3, #167	; 0xa7
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	2102      	movs	r1, #2
 8008db8:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8008dba:	4b35      	ldr	r3, [pc, #212]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dc4:	4b32      	ldr	r3, [pc, #200]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	0011      	movs	r1, r2
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7ff f84d 	bl	8007e6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 fa34 	bl	8009242 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008dda:	e052      	b.n	8008e82 <USBD_SetConfig+0x17e>
      else if (cfgidx != pdev->dev_config)
 8008ddc:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	001a      	movs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d034      	beq.n	8008e54 <USBD_SetConfig+0x150>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	0011      	movs	r1, r2
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7ff f839 	bl	8007e6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008dfa:	4b25      	ldr	r3, [pc, #148]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	001a      	movs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e04:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008e06:	781a      	ldrb	r2, [r3, #0]
 8008e08:	250f      	movs	r5, #15
 8008e0a:	197c      	adds	r4, r7, r5
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0011      	movs	r1, r2
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7ff f806 	bl	8007e22 <USBD_SetClassConfig>
 8008e16:	0003      	movs	r3, r0
 8008e18:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 8008e1a:	197b      	adds	r3, r7, r5
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d013      	beq.n	8008e4a <USBD_SetConfig+0x146>
          USBD_CtlError(pdev, req);
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	0011      	movs	r1, r2
 8008e28:	0018      	movs	r0, r3
 8008e2a:	f000 f924 	bl	8009076 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	0011      	movs	r1, r2
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f7ff f817 	bl	8007e6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	23a7      	movs	r3, #167	; 0xa7
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	2102      	movs	r1, #2
 8008e46:	54d1      	strb	r1, [r2, r3]
      break;
 8008e48:	e01b      	b.n	8008e82 <USBD_SetConfig+0x17e>
          (void)USBD_CtlSendStatus(pdev);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f000 f9f8 	bl	8009242 <USBD_CtlSendStatus>
      break;
 8008e52:	e016      	b.n	8008e82 <USBD_SetConfig+0x17e>
        (void)USBD_CtlSendStatus(pdev);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 f9f3 	bl	8009242 <USBD_CtlSendStatus>
      break;
 8008e5c:	e011      	b.n	8008e82 <USBD_SetConfig+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	0011      	movs	r1, r2
 8008e64:	0018      	movs	r0, r3
 8008e66:	f000 f906 	bl	8009076 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <USBD_SetConfig+0x18c>)
 8008e6c:	781a      	ldrb	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	0011      	movs	r1, r2
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7fe fffa 	bl	8007e6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e78:	230f      	movs	r3, #15
 8008e7a:	18fb      	adds	r3, r7, r3
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	701a      	strb	r2, [r3, #0]
      break;
 8008e80:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008e82:	230f      	movs	r3, #15
 8008e84:	18fb      	adds	r3, r7, r3
 8008e86:	781b      	ldrb	r3, [r3, #0]
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b004      	add	sp, #16
 8008e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e90:	20000224 	.word	0x20000224

08008e94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	88db      	ldrh	r3, [r3, #6]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d006      	beq.n	8008eb4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	0011      	movs	r1, r2
 8008eac:	0018      	movs	r0, r3
 8008eae:	f000 f8e2 	bl	8009076 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008eb2:	e027      	b.n	8008f04 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	23a7      	movs	r3, #167	; 0xa7
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	5cd3      	ldrb	r3, [r2, r3]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	dc02      	bgt.n	8008ec8 <USBD_GetConfig+0x34>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dc03      	bgt.n	8008ece <USBD_GetConfig+0x3a>
 8008ec6:	e016      	b.n	8008ef6 <USBD_GetConfig+0x62>
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d00c      	beq.n	8008ee6 <USBD_GetConfig+0x52>
 8008ecc:	e013      	b.n	8008ef6 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	0019      	movs	r1, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f000 f951 	bl	8009186 <USBD_CtlSendData>
        break;
 8008ee4:	e00e      	b.n	8008f04 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 f949 	bl	8009186 <USBD_CtlSendData>
        break;
 8008ef4:	e006      	b.n	8008f04 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	0011      	movs	r1, r2
 8008efc:	0018      	movs	r0, r3
 8008efe:	f000 f8ba 	bl	8009076 <USBD_CtlError>
        break;
 8008f02:	46c0      	nop			; (mov r8, r8)
}
 8008f04:	46c0      	nop			; (mov r8, r8)
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	23a7      	movs	r3, #167	; 0xa7
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	5cd3      	ldrb	r3, [r2, r3]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	3b01      	subs	r3, #1
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d822      	bhi.n	8008f6c <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	88db      	ldrh	r3, [r3, #6]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d006      	beq.n	8008f3c <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	0011      	movs	r1, r2
 8008f34:	0018      	movs	r0, r3
 8008f36:	f000 f89e 	bl	8009076 <USBD_CtlError>
        break;
 8008f3a:	e01e      	b.n	8008f7a <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	23a9      	movs	r3, #169	; 0xa9
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	58d3      	ldr	r3, [r2, r3]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	2202      	movs	r2, #2
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	0019      	movs	r1, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	0018      	movs	r0, r3
 8008f66:	f000 f90e 	bl	8009186 <USBD_CtlSendData>
      break;
 8008f6a:	e006      	b.n	8008f7a <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	0011      	movs	r1, r2
 8008f72:	0018      	movs	r0, r3
 8008f74:	f000 f87f 	bl	8009076 <USBD_CtlError>
      break;
 8008f78:	46c0      	nop			; (mov r8, r8)
  }
}
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b002      	add	sp, #8
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d108      	bne.n	8008fa6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	23a9      	movs	r3, #169	; 0xa9
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f000 f94e 	bl	8009242 <USBD_CtlSendStatus>
  }
}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b002      	add	sp, #8
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	23a7      	movs	r3, #167	; 0xa7
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	5cd3      	ldrb	r3, [r2, r3]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d80d      	bhi.n	8008fe4 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	885b      	ldrh	r3, [r3, #2]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d110      	bne.n	8008ff2 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	23a9      	movs	r3, #169	; 0xa9
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f000 f930 	bl	8009242 <USBD_CtlSendStatus>
      }
      break;
 8008fe2:	e006      	b.n	8008ff2 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	0011      	movs	r1, r2
 8008fea:	0018      	movs	r0, r3
 8008fec:	f000 f843 	bl	8009076 <USBD_CtlError>
      break;
 8008ff0:	e000      	b.n	8008ff4 <USBD_ClrFeature+0x46>
      break;
 8008ff2:	46c0      	nop			; (mov r8, r8)
  }
}
 8008ff4:	46c0      	nop			; (mov r8, r8)
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b002      	add	sp, #8
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	0018      	movs	r0, r3
 800902a:	f7ff f98c 	bl	8008346 <SWAPBYTE>
 800902e:	0003      	movs	r3, r0
 8009030:	001a      	movs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3301      	adds	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0018      	movs	r0, r3
 8009046:	f7ff f97e 	bl	8008346 <SWAPBYTE>
 800904a:	0003      	movs	r3, r0
 800904c:	001a      	movs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3301      	adds	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	0018      	movs	r0, r3
 8009062:	f7ff f970 	bl	8008346 <SWAPBYTE>
 8009066:	0003      	movs	r3, r0
 8009068:	001a      	movs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	80da      	strh	r2, [r3, #6]
}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	46bd      	mov	sp, r7
 8009072:	b004      	add	sp, #16
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	0018      	movs	r0, r3
 8009086:	f000 fd2e 	bl	8009ae6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2100      	movs	r1, #0
 800908e:	0018      	movs	r0, r3
 8009090:	f000 fd29 	bl	8009ae6 <USBD_LL_StallEP>
}
 8009094:	46c0      	nop			; (mov r8, r8)
 8009096:	46bd      	mov	sp, r7
 8009098:	b002      	add	sp, #8
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090a8:	2417      	movs	r4, #23
 80090aa:	193b      	adds	r3, r7, r4
 80090ac:	2200      	movs	r2, #0
 80090ae:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d044      	beq.n	8009140 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 f843 	bl	8009148 <USBD_GetLen>
 80090c2:	0003      	movs	r3, r0
 80090c4:	3301      	adds	r3, #1
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	18db      	adds	r3, r3, r3
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090d0:	193b      	adds	r3, r7, r4
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	18d3      	adds	r3, r2, r3
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	7812      	ldrb	r2, [r2, #0]
 80090dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80090de:	193b      	adds	r3, r7, r4
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	193b      	adds	r3, r7, r4
 80090e4:	3201      	adds	r2, #1
 80090e6:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80090e8:	193b      	adds	r3, r7, r4
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	18d3      	adds	r3, r2, r3
 80090f0:	2203      	movs	r2, #3
 80090f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80090f4:	193b      	adds	r3, r7, r4
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	193b      	adds	r3, r7, r4
 80090fa:	3201      	adds	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 80090fe:	e01a      	b.n	8009136 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8009100:	2117      	movs	r1, #23
 8009102:	187b      	adds	r3, r7, r1
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	18d3      	adds	r3, r2, r3
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	7812      	ldrb	r2, [r2, #0]
 800910e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	3301      	adds	r3, #1
 8009114:	613b      	str	r3, [r7, #16]
    idx++;
 8009116:	187b      	adds	r3, r7, r1
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	187b      	adds	r3, r7, r1
 800911c:	3201      	adds	r2, #1
 800911e:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8009120:	187b      	adds	r3, r7, r1
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	18d3      	adds	r3, r2, r3
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]
    idx++;
 800912c:	187b      	adds	r3, r7, r1
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	187b      	adds	r3, r7, r1
 8009132:	3201      	adds	r2, #1
 8009134:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e0      	bne.n	8009100 <USBD_GetString+0x64>
 800913e:	e000      	b.n	8009142 <USBD_GetString+0xa6>
    return;
 8009140:	46c0      	nop			; (mov r8, r8)
  }
}
 8009142:	46bd      	mov	sp, r7
 8009144:	b007      	add	sp, #28
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009150:	230f      	movs	r3, #15
 8009152:	18fb      	adds	r3, r7, r3
 8009154:	2200      	movs	r2, #0
 8009156:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800915c:	e008      	b.n	8009170 <USBD_GetLen+0x28>
  {
    len++;
 800915e:	210f      	movs	r1, #15
 8009160:	187b      	adds	r3, r7, r1
 8009162:	781a      	ldrb	r2, [r3, #0]
 8009164:	187b      	adds	r3, r7, r1
 8009166:	3201      	adds	r2, #1
 8009168:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	3301      	adds	r3, #1
 800916e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1f2      	bne.n	800915e <USBD_GetLen+0x16>
  }

  return len;
 8009178:	230f      	movs	r3, #15
 800917a:	18fb      	adds	r3, r7, r3
 800917c:	781b      	ldrb	r3, [r3, #0]
}
 800917e:	0018      	movs	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	b004      	add	sp, #16
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	23a5      	movs	r3, #165	; 0xa5
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	2102      	movs	r1, #2
 800919a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	2100      	movs	r1, #0
 80091b0:	f000 fd4b 	bl	8009c4a <USBD_LL_Transmit>

  return USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	0018      	movs	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	b004      	add	sp, #16
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	2100      	movs	r1, #0
 80091d2:	f000 fd3a 	bl	8009c4a <USBD_LL_Transmit>

  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	0018      	movs	r0, r3
 80091da:	46bd      	mov	sp, r7
 80091dc:	b004      	add	sp, #16
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	23a5      	movs	r3, #165	; 0xa5
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	2103      	movs	r1, #3
 80091f4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	23ac      	movs	r3, #172	; 0xac
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	23ae      	movs	r3, #174	; 0xae
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	50d1      	str	r1, [r2, r3]
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	2100      	movs	r1, #0
 8009212:	f000 fd4a 	bl	8009caa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b004      	add	sp, #16
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	2100      	movs	r1, #0
 8009234:	f000 fd39 	bl	8009caa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	0018      	movs	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	b004      	add	sp, #16
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	23a5      	movs	r3, #165	; 0xa5
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	2104      	movs	r1, #4
 8009252:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	2100      	movs	r1, #0
 800925c:	f000 fcf5 	bl	8009c4a <USBD_LL_Transmit>

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	0018      	movs	r0, r3
 8009264:	46bd      	mov	sp, r7
 8009266:	b002      	add	sp, #8
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	23a5      	movs	r3, #165	; 0xa5
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	2105      	movs	r1, #5
 800927a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	2300      	movs	r3, #0
 8009280:	2200      	movs	r2, #0
 8009282:	2100      	movs	r1, #0
 8009284:	f000 fd11 	bl	8009caa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	0018      	movs	r0, r3
 800928c:	46bd      	mov	sp, r7
 800928e:	b002      	add	sp, #8
 8009290:	bd80      	pop	{r7, pc}

08009292 <MX_USBPD_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* USBPD init function */
void MX_USBPD_Init(void)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	af00      	add	r7, sp, #0

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8009296:	f000 f80d 	bl	80092b4 <USBPD_DPM_InitCore>
 800929a:	1e03      	subs	r3, r0, #0
 800929c:	d000      	beq.n	80092a0 <MX_USBPD_Init+0xe>
  {
    while(1);
 800929e:	e7fe      	b.n	800929e <MX_USBPD_Init+0xc>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 80092a0:	f000 f842 	bl	8009328 <USBPD_DPM_InitOS>
 80092a4:	1e03      	subs	r3, r0, #0
 80092a6:	d000      	beq.n	80092aa <MX_USBPD_Init+0x18>
  {
    while(1);
 80092a8:	e7fe      	b.n	80092a8 <MX_USBPD_Init+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80092aa:	b662      	cpsie	i
}
 80092ac:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 80092ba:	1dfb      	adds	r3, r7, #7
 80092bc:	2200      	movs	r2, #0
 80092be:	701a      	strb	r2, [r3, #0]

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 80092c0:	4b16      	ldr	r3, [pc, #88]	; (800931c <USBPD_DPM_InitCore+0x68>)
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7f6 ffac 	bl	8000220 <USBPD_PE_CheckLIB>
 80092c8:	0003      	movs	r3, r0
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d001      	beq.n	80092d2 <USBPD_DPM_InitCore+0x1e>
  {
    return USBPD_ERROR;
 80092ce:	2302      	movs	r3, #2
 80092d0:	e01f      	b.n	8009312 <USBPD_DPM_InitCore+0x5e>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 80092d2:	f7f6 ffb3 	bl	800023c <USBPD_PE_GetMemoryConsumption>
 80092d6:	0003      	movs	r3, r0
 80092d8:	603b      	str	r3, [r7, #0]
#if defined(_TRACE) || defined(_GUI_INTERFACE)
  /* Initialise the TRACE */
  USBPD_TRACE_Init();
#endif /* _TRACE || _GUI_INTERFACE */

  DPM_Params[USBPD_PORT_0].PE_PowerRole     = DPM_Settings[USBPD_PORT_0].PE_DefaultRole;
 80092da:	4b11      	ldr	r3, [pc, #68]	; (8009320 <USBPD_DPM_InitCore+0x6c>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	07db      	lsls	r3, r3, #31
 80092e0:	0fdb      	lsrs	r3, r3, #31
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <USBPD_DPM_InitCore+0x70>)
 80092e6:	2101      	movs	r1, #1
 80092e8:	400a      	ands	r2, r1
 80092ea:	0090      	lsls	r0, r2, #2
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	2104      	movs	r1, #4
 80092f0:	438a      	bics	r2, r1
 80092f2:	1c11      	adds	r1, r2, #0
 80092f4:	1c02      	adds	r2, r0, #0
 80092f6:	430a      	orrs	r2, r1
 80092f8:	701a      	strb	r2, [r3, #0]

   /* Init CAD */
  CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_0, NULL, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0], &DPM_Params[USBPD_PORT_0]));
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <USBPD_DPM_InitCore+0x70>)
 80092fc:	4a08      	ldr	r2, [pc, #32]	; (8009320 <USBPD_DPM_InitCore+0x6c>)
 80092fe:	2100      	movs	r1, #0
 8009300:	2000      	movs	r0, #0
 8009302:	f7f6 feff 	bl	8000104 <USBPD_CAD_Init>
 8009306:	1e03      	subs	r3, r0, #0
 8009308:	d001      	beq.n	800930e <USBPD_DPM_InitCore+0x5a>
 800930a:	2302      	movs	r3, #2
 800930c:	e001      	b.n	8009312 <USBPD_DPM_InitCore+0x5e>

  return _retr;
 800930e:	1dfb      	adds	r3, r7, #7
 8009310:	781b      	ldrb	r3, [r3, #0]
}
 8009312:	0018      	movs	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	b002      	add	sp, #8
 8009318:	bd80      	pop	{r7, pc}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	00320100 	.word	0x00320100
 8009320:	20000228 	.word	0x20000228
 8009324:	20000520 	.word	0x20000520

08009328 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0

  return USBPD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	0018      	movs	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009338:	4914      	ldr	r1, [pc, #80]	; (800938c <MX_USB_Device_Init+0x58>)
 800933a:	4b15      	ldr	r3, [pc, #84]	; (8009390 <MX_USB_Device_Init+0x5c>)
 800933c:	2200      	movs	r2, #0
 800933e:	0018      	movs	r0, r3
 8009340:	f7fe fcf2 	bl	8007d28 <USBD_Init>
 8009344:	1e03      	subs	r3, r0, #0
 8009346:	d001      	beq.n	800934c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009348:	f7f7 fdee 	bl	8000f28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800934c:	4a11      	ldr	r2, [pc, #68]	; (8009394 <MX_USB_Device_Init+0x60>)
 800934e:	4b10      	ldr	r3, [pc, #64]	; (8009390 <MX_USB_Device_Init+0x5c>)
 8009350:	0011      	movs	r1, r2
 8009352:	0018      	movs	r0, r3
 8009354:	f7fe fd22 	bl	8007d9c <USBD_RegisterClass>
 8009358:	1e03      	subs	r3, r0, #0
 800935a:	d001      	beq.n	8009360 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800935c:	f7f7 fde4 	bl	8000f28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009360:	4a0d      	ldr	r2, [pc, #52]	; (8009398 <MX_USB_Device_Init+0x64>)
 8009362:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <MX_USB_Device_Init+0x5c>)
 8009364:	0011      	movs	r1, r2
 8009366:	0018      	movs	r0, r3
 8009368:	f7fe fc26 	bl	8007bb8 <USBD_CDC_RegisterInterface>
 800936c:	1e03      	subs	r3, r0, #0
 800936e:	d001      	beq.n	8009374 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8009370:	f7f7 fdda 	bl	8000f28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009374:	4b06      	ldr	r3, [pc, #24]	; (8009390 <MX_USB_Device_Init+0x5c>)
 8009376:	0018      	movs	r0, r3
 8009378:	f7fe fd3d 	bl	8007df6 <USBD_Start>
 800937c:	1e03      	subs	r3, r0, #0
 800937e:	d001      	beq.n	8009384 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8009380:	f7f7 fdd2 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009384:	46c0      	nop			; (mov r8, r8)
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	20000134 	.word	0x20000134
 8009390:	20000528 	.word	0x20000528
 8009394:	2000001c 	.word	0x2000001c
 8009398:	20000120 	.word	0x20000120

0800939c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093a0:	4907      	ldr	r1, [pc, #28]	; (80093c0 <CDC_Init_FS+0x24>)
 80093a2:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <CDC_Init_FS+0x28>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	0018      	movs	r0, r3
 80093a8:	f7fe fc1a 	bl	8007be0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093ac:	4a06      	ldr	r2, [pc, #24]	; (80093c8 <CDC_Init_FS+0x2c>)
 80093ae:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <CDC_Init_FS+0x28>)
 80093b0:	0011      	movs	r1, r2
 80093b2:	0018      	movs	r0, r3
 80093b4:	f7fe fc33 	bl	8007c1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093b8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093ba:	0018      	movs	r0, r3
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000ff8 	.word	0x20000ff8
 80093c4:	20000528 	.word	0x20000528
 80093c8:	200007f8 	.word	0x200007f8

080093cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093d2:	0018      	movs	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6039      	str	r1, [r7, #0]
 80093e0:	0011      	movs	r1, r2
 80093e2:	1dfb      	adds	r3, r7, #7
 80093e4:	1c02      	adds	r2, r0, #0
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	1d3b      	adds	r3, r7, #4
 80093ea:	1c0a      	adds	r2, r1, #0
 80093ec:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093ee:	1dfb      	adds	r3, r7, #7
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b23      	cmp	r3, #35	; 0x23
 80093f4:	d804      	bhi.n	8009400 <CDC_Control_FS+0x28>
 80093f6:	009a      	lsls	r2, r3, #2
 80093f8:	4b04      	ldr	r3, [pc, #16]	; (800940c <CDC_Control_FS+0x34>)
 80093fa:	18d3      	adds	r3, r2, r3
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009400:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8009402:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009404:	0018      	movs	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	b002      	add	sp, #8
 800940a:	bd80      	pop	{r7, pc}
 800940c:	0800a144 	.word	0x0800a144

08009410 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <CDC_Receive_FS+0x28>)
 800941e:	0011      	movs	r1, r2
 8009420:	0018      	movs	r0, r3
 8009422:	f7fe fbfc 	bl	8007c1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009426:	4b04      	ldr	r3, [pc, #16]	; (8009438 <CDC_Receive_FS+0x28>)
 8009428:	0018      	movs	r0, r3
 800942a:	f7fe fc4f 	bl	8007ccc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800942e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009430:	0018      	movs	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	b002      	add	sp, #8
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000528 	.word	0x20000528

0800943c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800943c:	b5b0      	push	{r4, r5, r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	000a      	movs	r2, r1
 8009446:	1cbb      	adds	r3, r7, #2
 8009448:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800944a:	230f      	movs	r3, #15
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	2200      	movs	r2, #0
 8009450:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009452:	4a11      	ldr	r2, [pc, #68]	; (8009498 <CDC_Transmit_FS+0x5c>)
 8009454:	23af      	movs	r3, #175	; 0xaf
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	58d3      	ldr	r3, [r2, r3]
 800945a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	2385      	movs	r3, #133	; 0x85
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	58d3      	ldr	r3, [r2, r3]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8009468:	2301      	movs	r3, #1
 800946a:	e010      	b.n	800948e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800946c:	1cbb      	adds	r3, r7, #2
 800946e:	881a      	ldrh	r2, [r3, #0]
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <CDC_Transmit_FS+0x5c>)
 8009474:	0018      	movs	r0, r3
 8009476:	f7fe fbb3 	bl	8007be0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800947a:	250f      	movs	r5, #15
 800947c:	197c      	adds	r4, r7, r5
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <CDC_Transmit_FS+0x5c>)
 8009480:	0018      	movs	r0, r3
 8009482:	f7fe fbe5 	bl	8007c50 <USBD_CDC_TransmitPacket>
 8009486:	0003      	movs	r3, r0
 8009488:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800948a:	197b      	adds	r3, r7, r5
 800948c:	781b      	ldrb	r3, [r3, #0]
}
 800948e:	0018      	movs	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	b004      	add	sp, #16
 8009494:	bdb0      	pop	{r4, r5, r7, pc}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	20000528 	.word	0x20000528

0800949c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	1dfb      	adds	r3, r7, #7
 80094a8:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80094aa:	2117      	movs	r1, #23
 80094ac:	187b      	adds	r3, r7, r1
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094b2:	187b      	adds	r3, r7, r1
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	b25b      	sxtb	r3, r3
}
 80094b8:	0018      	movs	r0, r3
 80094ba:	46bd      	mov	sp, r7
 80094bc:	b006      	add	sp, #24
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	0002      	movs	r2, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	1dfb      	adds	r3, r7, #7
 80094cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2212      	movs	r2, #18
 80094d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80094d4:	4b02      	ldr	r3, [pc, #8]	; (80094e0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80094d6:	0018      	movs	r0, r3
 80094d8:	46bd      	mov	sp, r7
 80094da:	b002      	add	sp, #8
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	20000154 	.word	0x20000154

080094e4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	0002      	movs	r2, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	1dfb      	adds	r3, r7, #7
 80094f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2204      	movs	r2, #4
 80094f6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094f8:	4b02      	ldr	r3, [pc, #8]	; (8009504 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80094fa:	0018      	movs	r0, r3
 80094fc:	46bd      	mov	sp, r7
 80094fe:	b002      	add	sp, #8
 8009500:	bd80      	pop	{r7, pc}
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	20000168 	.word	0x20000168

08009508 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	0002      	movs	r2, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	1dfb      	adds	r3, r7, #7
 8009514:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009516:	1dfb      	adds	r3, r7, #7
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d106      	bne.n	800952c <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4908      	ldr	r1, [pc, #32]	; (8009544 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8009522:	4b09      	ldr	r3, [pc, #36]	; (8009548 <USBD_CDC_ProductStrDescriptor+0x40>)
 8009524:	0018      	movs	r0, r3
 8009526:	f7ff fdb9 	bl	800909c <USBD_GetString>
 800952a:	e005      	b.n	8009538 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	4905      	ldr	r1, [pc, #20]	; (8009544 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <USBD_CDC_ProductStrDescriptor+0x40>)
 8009532:	0018      	movs	r0, r3
 8009534:	f7ff fdb2 	bl	800909c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009538:	4b02      	ldr	r3, [pc, #8]	; (8009544 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800953a:	0018      	movs	r0, r3
 800953c:	46bd      	mov	sp, r7
 800953e:	b002      	add	sp, #8
 8009540:	bd80      	pop	{r7, pc}
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	200017f8 	.word	0x200017f8
 8009548:	08009ffc 	.word	0x08009ffc

0800954c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	0002      	movs	r2, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	1dfb      	adds	r3, r7, #7
 8009558:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	4904      	ldr	r1, [pc, #16]	; (8009570 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8009560:	0018      	movs	r0, r3
 8009562:	f7ff fd9b 	bl	800909c <USBD_GetString>
  return USBD_StrDesc;
 8009566:	4b02      	ldr	r3, [pc, #8]	; (8009570 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8009568:	0018      	movs	r0, r3
 800956a:	46bd      	mov	sp, r7
 800956c:	b002      	add	sp, #8
 800956e:	bd80      	pop	{r7, pc}
 8009570:	200017f8 	.word	0x200017f8
 8009574:	0800a014 	.word	0x0800a014

08009578 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	0002      	movs	r2, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	1dfb      	adds	r3, r7, #7
 8009584:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	221a      	movs	r2, #26
 800958a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800958c:	f000 f84c 	bl	8009628 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_CDC_SerialStrDescriptor+0x24>)
}
 8009592:	0018      	movs	r0, r3
 8009594:	46bd      	mov	sp, r7
 8009596:	b002      	add	sp, #8
 8009598:	bd80      	pop	{r7, pc}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	2000016c 	.word	0x2000016c

080095a0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	0002      	movs	r2, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	1dfb      	adds	r3, r7, #7
 80095ac:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80095ae:	1dfb      	adds	r3, r7, #7
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d106      	bne.n	80095c4 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4908      	ldr	r1, [pc, #32]	; (80095dc <USBD_CDC_ConfigStrDescriptor+0x3c>)
 80095ba:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <USBD_CDC_ConfigStrDescriptor+0x40>)
 80095bc:	0018      	movs	r0, r3
 80095be:	f7ff fd6d 	bl	800909c <USBD_GetString>
 80095c2:	e005      	b.n	80095d0 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	4905      	ldr	r1, [pc, #20]	; (80095dc <USBD_CDC_ConfigStrDescriptor+0x3c>)
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <USBD_CDC_ConfigStrDescriptor+0x40>)
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7ff fd66 	bl	800909c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d0:	4b02      	ldr	r3, [pc, #8]	; (80095dc <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 80095d2:	0018      	movs	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	b002      	add	sp, #8
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	200017f8 	.word	0x200017f8
 80095e0:	0800a028 	.word	0x0800a028

080095e4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	0002      	movs	r2, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	1dfb      	adds	r3, r7, #7
 80095f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80095f2:	1dfb      	adds	r3, r7, #7
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4908      	ldr	r1, [pc, #32]	; (8009620 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 80095fe:	4b09      	ldr	r3, [pc, #36]	; (8009624 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8009600:	0018      	movs	r0, r3
 8009602:	f7ff fd4b 	bl	800909c <USBD_GetString>
 8009606:	e005      	b.n	8009614 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	4905      	ldr	r1, [pc, #20]	; (8009620 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800960c:	4b05      	ldr	r3, [pc, #20]	; (8009624 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800960e:	0018      	movs	r0, r3
 8009610:	f7ff fd44 	bl	800909c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009614:	4b02      	ldr	r3, [pc, #8]	; (8009620 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 8009616:	0018      	movs	r0, r3
 8009618:	46bd      	mov	sp, r7
 800961a:	b002      	add	sp, #8
 800961c:	bd80      	pop	{r7, pc}
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	200017f8 	.word	0x200017f8
 8009624:	0800a034 	.word	0x0800a034

08009628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800962e:	4b10      	ldr	r3, [pc, #64]	; (8009670 <Get_SerialNum+0x48>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <Get_SerialNum+0x4c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800963a:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <Get_SerialNum+0x50>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800964e:	490b      	ldr	r1, [pc, #44]	; (800967c <Get_SerialNum+0x54>)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2208      	movs	r2, #8
 8009654:	0018      	movs	r0, r3
 8009656:	f000 f815 	bl	8009684 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800965a:	4909      	ldr	r1, [pc, #36]	; (8009680 <Get_SerialNum+0x58>)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2204      	movs	r2, #4
 8009660:	0018      	movs	r0, r3
 8009662:	f000 f80f 	bl	8009684 <IntToUnicode>
  }
}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	46bd      	mov	sp, r7
 800966a:	b004      	add	sp, #16
 800966c:	bd80      	pop	{r7, pc}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	1fff7590 	.word	0x1fff7590
 8009674:	1fff7594 	.word	0x1fff7594
 8009678:	1fff7598 	.word	0x1fff7598
 800967c:	2000016e 	.word	0x2000016e
 8009680:	2000017e 	.word	0x2000017e

08009684 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	1dfb      	adds	r3, r7, #7
 8009690:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009692:	2117      	movs	r1, #23
 8009694:	187b      	adds	r3, r7, r1
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800969a:	187b      	adds	r3, r7, r1
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]
 80096a0:	e02f      	b.n	8009702 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	0f1b      	lsrs	r3, r3, #28
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	d80d      	bhi.n	80096c6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	0f1b      	lsrs	r3, r3, #28
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	2317      	movs	r3, #23
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	0019      	movs	r1, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	185b      	adds	r3, r3, r1
 80096be:	3230      	adds	r2, #48	; 0x30
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	e00c      	b.n	80096e0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	0f1b      	lsrs	r3, r3, #28
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	2317      	movs	r3, #23
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	0019      	movs	r1, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	185b      	adds	r3, r3, r1
 80096da:	3237      	adds	r2, #55	; 0x37
 80096dc:	b2d2      	uxtb	r2, r2
 80096de:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	011b      	lsls	r3, r3, #4
 80096e4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096e6:	2117      	movs	r1, #23
 80096e8:	187b      	adds	r3, r7, r1
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	3301      	adds	r3, #1
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	18d3      	adds	r3, r2, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096f8:	187b      	adds	r3, r7, r1
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	187b      	adds	r3, r7, r1
 80096fe:	3201      	adds	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	2317      	movs	r3, #23
 8009704:	18fa      	adds	r2, r7, r3
 8009706:	1dfb      	adds	r3, r7, #7
 8009708:	7812      	ldrb	r2, [r2, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d3c8      	bcc.n	80096a2 <IntToUnicode+0x1e>
  }
}
 8009710:	46c0      	nop			; (mov r8, r8)
 8009712:	46c0      	nop			; (mov r8, r8)
 8009714:	46bd      	mov	sp, r7
 8009716:	b006      	add	sp, #24
 8009718:	bd80      	pop	{r7, pc}
	...

0800971c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_DRD_FS)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a0e      	ldr	r2, [pc, #56]	; (8009764 <HAL_PCD_MspInit+0x48>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d115      	bne.n	800975a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_DRD_FS_MspInit 0 */

  /* USER CODE END USB_DRD_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <HAL_PCD_MspInit+0x4c>)
 8009730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009732:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <HAL_PCD_MspInit+0x4c>)
 8009734:	2180      	movs	r1, #128	; 0x80
 8009736:	0189      	lsls	r1, r1, #6
 8009738:	430a      	orrs	r2, r1
 800973a:	63da      	str	r2, [r3, #60]	; 0x3c
 800973c:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <HAL_PCD_MspInit+0x4c>)
 800973e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009740:	2380      	movs	r3, #128	; 0x80
 8009742:	019b      	lsls	r3, r3, #6
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	2008      	movs	r0, #8
 8009750:	f7f7 fe68 	bl	8001424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8009754:	2008      	movs	r0, #8
 8009756:	f7f7 fe7a 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	46bd      	mov	sp, r7
 800975e:	b004      	add	sp, #16
 8009760:	bd80      	pop	{r7, pc}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	40005c00 	.word	0x40005c00
 8009768:	40021000 	.word	0x40021000

0800976c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	23c0      	movs	r3, #192	; 0xc0
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	58d2      	ldr	r2, [r2, r3]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	21b0      	movs	r1, #176	; 0xb0
 8009780:	0089      	lsls	r1, r1, #2
 8009782:	468c      	mov	ip, r1
 8009784:	4463      	add	r3, ip
 8009786:	0019      	movs	r1, r3
 8009788:	0010      	movs	r0, r2
 800978a:	f7fe fb8b 	bl	8007ea4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	46bd      	mov	sp, r7
 8009792:	b002      	add	sp, #8
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009796:	b590      	push	{r4, r7, lr}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	000a      	movs	r2, r1
 80097a0:	1cfb      	adds	r3, r7, #3
 80097a2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	23c0      	movs	r3, #192	; 0xc0
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	58d4      	ldr	r4, [r2, r3]
 80097ac:	1cfb      	adds	r3, r7, #3
 80097ae:	781a      	ldrb	r2, [r3, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	23c6      	movs	r3, #198	; 0xc6
 80097b4:	0059      	lsls	r1, r3, #1
 80097b6:	0013      	movs	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	189b      	adds	r3, r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	18c3      	adds	r3, r0, r3
 80097c0:	185b      	adds	r3, r3, r1
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	1cfb      	adds	r3, r7, #3
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	0019      	movs	r1, r3
 80097ca:	0020      	movs	r0, r4
 80097cc:	f7fe fbd4 	bl	8007f78 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80097d0:	46c0      	nop			; (mov r8, r8)
 80097d2:	46bd      	mov	sp, r7
 80097d4:	b003      	add	sp, #12
 80097d6:	bd90      	pop	{r4, r7, pc}

080097d8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	000a      	movs	r2, r1
 80097e2:	1cfb      	adds	r3, r7, #3
 80097e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	23c0      	movs	r3, #192	; 0xc0
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	58d0      	ldr	r0, [r2, r3]
 80097ee:	1cfb      	adds	r3, r7, #3
 80097f0:	781a      	ldrb	r2, [r3, #0]
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	0013      	movs	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	189b      	adds	r3, r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	18cb      	adds	r3, r1, r3
 80097fe:	334c      	adds	r3, #76	; 0x4c
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	1cfb      	adds	r3, r7, #3
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	0019      	movs	r1, r3
 8009808:	f7fe fc2c 	bl	8008064 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	46bd      	mov	sp, r7
 8009810:	b002      	add	sp, #8
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	23c0      	movs	r3, #192	; 0xc0
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	58d3      	ldr	r3, [r2, r3]
 8009824:	0018      	movs	r0, r3
 8009826:	f7fe fd67 	bl	80082f8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	b002      	add	sp, #8
 8009830:	bd80      	pop	{r7, pc}

08009832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800983a:	230f      	movs	r3, #15
 800983c:	18fb      	adds	r3, r7, r3
 800983e:	2201      	movs	r2, #1
 8009840:	701a      	strb	r2, [r3, #0]
  if (( hpcd->Init.speed != USB_DRD_SPEED_FS) || (hpcd->Init.speed != USB_DRD_SPEED_LS))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d103      	bne.n	8009852 <HAL_PCD_ResetCallback+0x20>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d00a      	beq.n	8009868 <HAL_PCD_ResetCallback+0x36>

    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	23c0      	movs	r3, #192	; 0xc0
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	58d2      	ldr	r2, [r2, r3]
 800985a:	230f      	movs	r3, #15
 800985c:	18fb      	adds	r3, r7, r3
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	0019      	movs	r1, r3
 8009862:	0010      	movs	r0, r2
 8009864:	f7fe fd05 	bl	8008272 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	23c0      	movs	r3, #192	; 0xc0
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	58d3      	ldr	r3, [r2, r3]
 8009870:	0018      	movs	r0, r3
 8009872:	f7fe fca7 	bl	80081c4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	46bd      	mov	sp, r7
 800987a:	b004      	add	sp, #16
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	23c0      	movs	r3, #192	; 0xc0
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	58d3      	ldr	r3, [r2, r3]
 8009890:	0018      	movs	r0, r3
 8009892:	f7fe fcff 	bl	8008294 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800989e:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <HAL_PCD_SuspendCallback+0x34>)
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	4b04      	ldr	r3, [pc, #16]	; (80098b4 <HAL_PCD_SuspendCallback+0x34>)
 80098a4:	2106      	movs	r1, #6
 80098a6:	430a      	orrs	r2, r1
 80098a8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	46bd      	mov	sp, r7
 80098ae:	b002      	add	sp, #8
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	46c0      	nop			; (mov r8, r8)
 80098b4:	e000ed00 	.word	0xe000ed00

080098b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098c8:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <HAL_PCD_ResumeCallback+0x38>)
 80098ca:	691a      	ldr	r2, [r3, #16]
 80098cc:	4b08      	ldr	r3, [pc, #32]	; (80098f0 <HAL_PCD_ResumeCallback+0x38>)
 80098ce:	2106      	movs	r1, #6
 80098d0:	438a      	bics	r2, r1
 80098d2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80098d4:	f000 fa7e 	bl	8009dd4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	23c0      	movs	r3, #192	; 0xc0
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	58d3      	ldr	r3, [r2, r3]
 80098e0:	0018      	movs	r0, r3
 80098e2:	f7fe fcef 	bl	80082c4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	46bd      	mov	sp, r7
 80098ea:	b002      	add	sp, #8
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	e000ed00 	.word	0xe000ed00

080098f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 80098fc:	4a34      	ldr	r2, [pc, #208]	; (80099d0 <USBD_LL_Init+0xdc>)
 80098fe:	23c0      	movs	r3, #192	; 0xc0
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	23b1      	movs	r3, #177	; 0xb1
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4930      	ldr	r1, [pc, #192]	; (80099d0 <USBD_LL_Init+0xdc>)
 800990e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8009910:	4b2f      	ldr	r3, [pc, #188]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009912:	4a30      	ldr	r2, [pc, #192]	; (80099d4 <USBD_LL_Init+0xe0>)
 8009914:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8009916:	4b2e      	ldr	r3, [pc, #184]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009918:	2208      	movs	r2, #8
 800991a:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800991c:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <USBD_LL_Init+0xdc>)
 800991e:	2208      	movs	r2, #8
 8009920:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USB_DRD_SPEED_FS;
 8009922:	4b2b      	ldr	r3, [pc, #172]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009924:	2201      	movs	r2, #1
 8009926:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009928:	4b29      	ldr	r3, [pc, #164]	; (80099d0 <USBD_LL_Init+0xdc>)
 800992a:	2202      	movs	r2, #2
 800992c:	615a      	str	r2, [r3, #20]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800992e:	4b28      	ldr	r3, [pc, #160]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009930:	2200      	movs	r2, #0
 8009932:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8009934:	4b26      	ldr	r3, [pc, #152]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009936:	2200      	movs	r2, #0
 8009938:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800993a:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <USBD_LL_Init+0xdc>)
 800993c:	2200      	movs	r2, #0
 800993e:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8009940:	4b23      	ldr	r3, [pc, #140]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009942:	2200      	movs	r2, #0
 8009944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8009946:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009948:	2200      	movs	r2, #0
 800994a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800994c:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <USBD_LL_Init+0xdc>)
 800994e:	2200      	movs	r2, #0
 8009950:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8009952:	4b1f      	ldr	r3, [pc, #124]	; (80099d0 <USBD_LL_Init+0xdc>)
 8009954:	2200      	movs	r2, #0
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8009958:	4b1d      	ldr	r3, [pc, #116]	; (80099d0 <USBD_LL_Init+0xdc>)
 800995a:	0018      	movs	r0, r3
 800995c:	f7f7 ff1e 	bl	800179c <HAL_PCD_Init>
 8009960:	1e03      	subs	r3, r0, #0
 8009962:	d001      	beq.n	8009968 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8009964:	f7f7 fae0 	bl	8000f28 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	23b1      	movs	r3, #177	; 0xb1
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	58d0      	ldr	r0, [r2, r3]
 8009970:	2318      	movs	r3, #24
 8009972:	2200      	movs	r2, #0
 8009974:	2100      	movs	r1, #0
 8009976:	f7f9 fa69 	bl	8002e4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	23b1      	movs	r3, #177	; 0xb1
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	58d0      	ldr	r0, [r2, r3]
 8009982:	2358      	movs	r3, #88	; 0x58
 8009984:	2200      	movs	r2, #0
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	f7f9 fa60 	bl	8002e4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	23b1      	movs	r3, #177	; 0xb1
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	58d0      	ldr	r0, [r2, r3]
 8009994:	23c0      	movs	r3, #192	; 0xc0
 8009996:	2200      	movs	r2, #0
 8009998:	2181      	movs	r1, #129	; 0x81
 800999a:	f7f9 fa57 	bl	8002e4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	23b1      	movs	r3, #177	; 0xb1
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	58d0      	ldr	r0, [r2, r3]
 80099a6:	2388      	movs	r3, #136	; 0x88
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	2200      	movs	r2, #0
 80099ac:	2101      	movs	r1, #1
 80099ae:	f7f9 fa4d 	bl	8002e4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	23b1      	movs	r3, #177	; 0xb1
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	58d0      	ldr	r0, [r2, r3]
 80099ba:	2380      	movs	r3, #128	; 0x80
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	2200      	movs	r2, #0
 80099c0:	2182      	movs	r1, #130	; 0x82
 80099c2:	f7f9 fa43 	bl	8002e4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	0018      	movs	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b002      	add	sp, #8
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200019f8 	.word	0x200019f8
 80099d4:	40005c00 	.word	0x40005c00

080099d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e0:	210f      	movs	r1, #15
 80099e2:	187b      	adds	r3, r7, r1
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e8:	260e      	movs	r6, #14
 80099ea:	19bb      	adds	r3, r7, r6
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	23b1      	movs	r3, #177	; 0xb1
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	58d3      	ldr	r3, [r2, r3]
 80099f8:	000d      	movs	r5, r1
 80099fa:	187c      	adds	r4, r7, r1
 80099fc:	0018      	movs	r0, r3
 80099fe:	f7f7 ffe3 	bl	80019c8 <HAL_PCD_Start>
 8009a02:	0003      	movs	r3, r0
 8009a04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a06:	19bc      	adds	r4, r7, r6
 8009a08:	197b      	adds	r3, r7, r5
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f000 f9e8 	bl	8009de2 <USBD_Get_USB_Status>
 8009a12:	0003      	movs	r3, r0
 8009a14:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a16:	19bb      	adds	r3, r7, r6
 8009a18:	781b      	ldrb	r3, [r3, #0]
}
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	b005      	add	sp, #20
 8009a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	000c      	movs	r4, r1
 8009a2c:	0010      	movs	r0, r2
 8009a2e:	0019      	movs	r1, r3
 8009a30:	1cfb      	adds	r3, r7, #3
 8009a32:	1c22      	adds	r2, r4, #0
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	1cbb      	adds	r3, r7, #2
 8009a38:	1c02      	adds	r2, r0, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	003b      	movs	r3, r7
 8009a3e:	1c0a      	adds	r2, r1, #0
 8009a40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a42:	260f      	movs	r6, #15
 8009a44:	19bb      	adds	r3, r7, r6
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a4a:	250e      	movs	r5, #14
 8009a4c:	197b      	adds	r3, r7, r5
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	23b1      	movs	r3, #177	; 0xb1
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	58d0      	ldr	r0, [r2, r3]
 8009a5a:	19bc      	adds	r4, r7, r6
 8009a5c:	1cbb      	adds	r3, r7, #2
 8009a5e:	781d      	ldrb	r5, [r3, #0]
 8009a60:	003b      	movs	r3, r7
 8009a62:	881a      	ldrh	r2, [r3, #0]
 8009a64:	1cfb      	adds	r3, r7, #3
 8009a66:	7819      	ldrb	r1, [r3, #0]
 8009a68:	002b      	movs	r3, r5
 8009a6a:	f7f8 f942 	bl	8001cf2 <HAL_PCD_EP_Open>
 8009a6e:	0003      	movs	r3, r0
 8009a70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a72:	250e      	movs	r5, #14
 8009a74:	197c      	adds	r4, r7, r5
 8009a76:	19bb      	adds	r3, r7, r6
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f000 f9b1 	bl	8009de2 <USBD_Get_USB_Status>
 8009a80:	0003      	movs	r3, r0
 8009a82:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009a84:	197b      	adds	r3, r7, r5
 8009a86:	781b      	ldrb	r3, [r3, #0]
}
 8009a88:	0018      	movs	r0, r3
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	b005      	add	sp, #20
 8009a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a90 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	000a      	movs	r2, r1
 8009a9a:	1cfb      	adds	r3, r7, #3
 8009a9c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a9e:	210f      	movs	r1, #15
 8009aa0:	187b      	adds	r3, r7, r1
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa6:	260e      	movs	r6, #14
 8009aa8:	19bb      	adds	r3, r7, r6
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	23b1      	movs	r3, #177	; 0xb1
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	58d2      	ldr	r2, [r2, r3]
 8009ab6:	000d      	movs	r5, r1
 8009ab8:	187c      	adds	r4, r7, r1
 8009aba:	1cfb      	adds	r3, r7, #3
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	0019      	movs	r1, r3
 8009ac0:	0010      	movs	r0, r2
 8009ac2:	f7f8 f98e 	bl	8001de2 <HAL_PCD_EP_Close>
 8009ac6:	0003      	movs	r3, r0
 8009ac8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aca:	19bc      	adds	r4, r7, r6
 8009acc:	197b      	adds	r3, r7, r5
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f000 f986 	bl	8009de2 <USBD_Get_USB_Status>
 8009ad6:	0003      	movs	r3, r0
 8009ad8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009ada:	19bb      	adds	r3, r7, r6
 8009adc:	781b      	ldrb	r3, [r3, #0]
}
 8009ade:	0018      	movs	r0, r3
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b005      	add	sp, #20
 8009ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ae6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	000a      	movs	r2, r1
 8009af0:	1cfb      	adds	r3, r7, #3
 8009af2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af4:	210f      	movs	r1, #15
 8009af6:	187b      	adds	r3, r7, r1
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009afc:	260e      	movs	r6, #14
 8009afe:	19bb      	adds	r3, r7, r6
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	23b1      	movs	r3, #177	; 0xb1
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	58d2      	ldr	r2, [r2, r3]
 8009b0c:	000d      	movs	r5, r1
 8009b0e:	187c      	adds	r4, r7, r1
 8009b10:	1cfb      	adds	r3, r7, #3
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	0019      	movs	r1, r3
 8009b16:	0010      	movs	r0, r2
 8009b18:	f7f8 fa5a 	bl	8001fd0 <HAL_PCD_EP_SetStall>
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b20:	19bc      	adds	r4, r7, r6
 8009b22:	197b      	adds	r3, r7, r5
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	0018      	movs	r0, r3
 8009b28:	f000 f95b 	bl	8009de2 <USBD_Get_USB_Status>
 8009b2c:	0003      	movs	r3, r0
 8009b2e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b30:	19bb      	adds	r3, r7, r6
 8009b32:	781b      	ldrb	r3, [r3, #0]
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b005      	add	sp, #20
 8009b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	000a      	movs	r2, r1
 8009b46:	1cfb      	adds	r3, r7, #3
 8009b48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4a:	210f      	movs	r1, #15
 8009b4c:	187b      	adds	r3, r7, r1
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b52:	260e      	movs	r6, #14
 8009b54:	19bb      	adds	r3, r7, r6
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	23b1      	movs	r3, #177	; 0xb1
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	58d2      	ldr	r2, [r2, r3]
 8009b62:	000d      	movs	r5, r1
 8009b64:	187c      	adds	r4, r7, r1
 8009b66:	1cfb      	adds	r3, r7, #3
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	0019      	movs	r1, r3
 8009b6c:	0010      	movs	r0, r2
 8009b6e:	f7f8 fa8b 	bl	8002088 <HAL_PCD_EP_ClrStall>
 8009b72:	0003      	movs	r3, r0
 8009b74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b76:	19bc      	adds	r4, r7, r6
 8009b78:	197b      	adds	r3, r7, r5
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	f000 f930 	bl	8009de2 <USBD_Get_USB_Status>
 8009b82:	0003      	movs	r3, r0
 8009b84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009b86:	19bb      	adds	r3, r7, r6
 8009b88:	781b      	ldrb	r3, [r3, #0]
}
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	b005      	add	sp, #20
 8009b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b92 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	000a      	movs	r2, r1
 8009b9c:	1cfb      	adds	r3, r7, #3
 8009b9e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	23b1      	movs	r3, #177	; 0xb1
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	58d3      	ldr	r3, [r2, r3]
 8009ba8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009baa:	1cfb      	adds	r3, r7, #3
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	b25b      	sxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da0d      	bge.n	8009bd0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bb4:	1cfb      	adds	r3, r7, #3
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	227f      	movs	r2, #127	; 0x7f
 8009bba:	401a      	ands	r2, r3
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	203a      	movs	r0, #58	; 0x3a
 8009bc0:	0013      	movs	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	189b      	adds	r3, r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	18cb      	adds	r3, r1, r3
 8009bca:	181b      	adds	r3, r3, r0
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	e00d      	b.n	8009bec <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bd0:	1cfb      	adds	r3, r7, #3
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	227f      	movs	r2, #127	; 0x7f
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	23bd      	movs	r3, #189	; 0xbd
 8009bdc:	0059      	lsls	r1, r3, #1
 8009bde:	0013      	movs	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	189b      	adds	r3, r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	18c3      	adds	r3, r0, r3
 8009be8:	185b      	adds	r3, r3, r1
 8009bea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bec:	0018      	movs	r0, r3
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b004      	add	sp, #16
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	000a      	movs	r2, r1
 8009bfe:	1cfb      	adds	r3, r7, #3
 8009c00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c02:	210f      	movs	r1, #15
 8009c04:	187b      	adds	r3, r7, r1
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0a:	260e      	movs	r6, #14
 8009c0c:	19bb      	adds	r3, r7, r6
 8009c0e:	2200      	movs	r2, #0
 8009c10:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	23b1      	movs	r3, #177	; 0xb1
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	58d2      	ldr	r2, [r2, r3]
 8009c1a:	000d      	movs	r5, r1
 8009c1c:	187c      	adds	r4, r7, r1
 8009c1e:	1cfb      	adds	r3, r7, #3
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	0019      	movs	r1, r3
 8009c24:	0010      	movs	r0, r2
 8009c26:	f7f8 f839 	bl	8001c9c <HAL_PCD_SetAddress>
 8009c2a:	0003      	movs	r3, r0
 8009c2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2e:	19bc      	adds	r4, r7, r6
 8009c30:	197b      	adds	r3, r7, r5
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	0018      	movs	r0, r3
 8009c36:	f000 f8d4 	bl	8009de2 <USBD_Get_USB_Status>
 8009c3a:	0003      	movs	r3, r0
 8009c3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009c3e:	19bb      	adds	r3, r7, r6
 8009c40:	781b      	ldrb	r3, [r3, #0]
}
 8009c42:	0018      	movs	r0, r3
 8009c44:	46bd      	mov	sp, r7
 8009c46:	b005      	add	sp, #20
 8009c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4c:	b087      	sub	sp, #28
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
 8009c56:	230b      	movs	r3, #11
 8009c58:	18fb      	adds	r3, r7, r3
 8009c5a:	1c0a      	adds	r2, r1, #0
 8009c5c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5e:	2617      	movs	r6, #23
 8009c60:	19bb      	adds	r3, r7, r6
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c66:	2516      	movs	r5, #22
 8009c68:	197b      	adds	r3, r7, r5
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	23b1      	movs	r3, #177	; 0xb1
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	58d0      	ldr	r0, [r2, r3]
 8009c76:	19bc      	adds	r4, r7, r6
 8009c78:	683d      	ldr	r5, [r7, #0]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	230b      	movs	r3, #11
 8009c7e:	18fb      	adds	r3, r7, r3
 8009c80:	7819      	ldrb	r1, [r3, #0]
 8009c82:	002b      	movs	r3, r5
 8009c84:	f7f8 f95b 	bl	8001f3e <HAL_PCD_EP_Transmit>
 8009c88:	0003      	movs	r3, r0
 8009c8a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c8c:	2516      	movs	r5, #22
 8009c8e:	197c      	adds	r4, r7, r5
 8009c90:	19bb      	adds	r3, r7, r6
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	0018      	movs	r0, r3
 8009c96:	f000 f8a4 	bl	8009de2 <USBD_Get_USB_Status>
 8009c9a:	0003      	movs	r3, r0
 8009c9c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009c9e:	197b      	adds	r3, r7, r5
 8009ca0:	781b      	ldrb	r3, [r3, #0]
}
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	b007      	add	sp, #28
 8009ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009caa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cac:	b087      	sub	sp, #28
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
 8009cb6:	230b      	movs	r3, #11
 8009cb8:	18fb      	adds	r3, r7, r3
 8009cba:	1c0a      	adds	r2, r1, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbe:	2617      	movs	r6, #23
 8009cc0:	19bb      	adds	r3, r7, r6
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc6:	2516      	movs	r5, #22
 8009cc8:	197b      	adds	r3, r7, r5
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	23b1      	movs	r3, #177	; 0xb1
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	58d0      	ldr	r0, [r2, r3]
 8009cd6:	19bc      	adds	r4, r7, r6
 8009cd8:	683d      	ldr	r5, [r7, #0]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	230b      	movs	r3, #11
 8009cde:	18fb      	adds	r3, r7, r3
 8009ce0:	7819      	ldrb	r1, [r3, #0]
 8009ce2:	002b      	movs	r3, r5
 8009ce4:	f7f8 f8ce 	bl	8001e84 <HAL_PCD_EP_Receive>
 8009ce8:	0003      	movs	r3, r0
 8009cea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cec:	2516      	movs	r5, #22
 8009cee:	197c      	adds	r4, r7, r5
 8009cf0:	19bb      	adds	r3, r7, r6
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f000 f874 	bl	8009de2 <USBD_Get_USB_Status>
 8009cfa:	0003      	movs	r3, r0
 8009cfc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009cfe:	197b      	adds	r3, r7, r5
 8009d00:	781b      	ldrb	r3, [r3, #0]
}
 8009d02:	0018      	movs	r0, r3
 8009d04:	46bd      	mov	sp, r7
 8009d06:	b007      	add	sp, #28
 8009d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	000a      	movs	r2, r1
 8009d14:	1cfb      	adds	r3, r7, #3
 8009d16:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	23b1      	movs	r3, #177	; 0xb1
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	58d2      	ldr	r2, [r2, r3]
 8009d20:	1cfb      	adds	r3, r7, #3
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	0019      	movs	r1, r3
 8009d26:	0010      	movs	r0, r2
 8009d28:	f7f8 f8f0 	bl	8001f0c <HAL_PCD_EP_GetRxCount>
 8009d2c:	0003      	movs	r3, r0
}
 8009d2e:	0018      	movs	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b002      	add	sp, #8
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	000a      	movs	r2, r1
 8009d42:	1cfb      	adds	r3, r7, #3
 8009d44:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009d46:	1cfb      	adds	r3, r7, #3
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <HAL_PCDEx_LPM_Callback+0x1c>
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d014      	beq.n	8009d7c <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009d52:	e025      	b.n	8009da0 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d007      	beq.n	8009d6c <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 8009d5c:	f000 f83a 	bl	8009dd4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d60:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <HAL_PCDEx_LPM_Callback+0x70>)
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <HAL_PCDEx_LPM_Callback+0x70>)
 8009d66:	2106      	movs	r1, #6
 8009d68:	438a      	bics	r2, r1
 8009d6a:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	23c0      	movs	r3, #192	; 0xc0
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	58d3      	ldr	r3, [r2, r3]
 8009d74:	0018      	movs	r0, r3
 8009d76:	f7fe faa5 	bl	80082c4 <USBD_LL_Resume>
    break;
 8009d7a:	e011      	b.n	8009da0 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	23c0      	movs	r3, #192	; 0xc0
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	58d3      	ldr	r3, [r2, r3]
 8009d84:	0018      	movs	r0, r3
 8009d86:	f7fe fa85 	bl	8008294 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d005      	beq.n	8009d9e <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d92:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <HAL_PCDEx_LPM_Callback+0x70>)
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	4b04      	ldr	r3, [pc, #16]	; (8009da8 <HAL_PCDEx_LPM_Callback+0x70>)
 8009d98:	2106      	movs	r1, #6
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	611a      	str	r2, [r3, #16]
    break;
 8009d9e:	46c0      	nop			; (mov r8, r8)
}
 8009da0:	46c0      	nop			; (mov r8, r8)
 8009da2:	46bd      	mov	sp, r7
 8009da4:	b002      	add	sp, #8
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	e000ed00 	.word	0xe000ed00

08009dac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009db4:	4b02      	ldr	r3, [pc, #8]	; (8009dc0 <USBD_static_malloc+0x14>)
}
 8009db6:	0018      	movs	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	b002      	add	sp, #8
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	46c0      	nop			; (mov r8, r8)
 8009dc0:	2000022c 	.word	0x2000022c

08009dc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]

}
 8009dcc:	46c0      	nop			; (mov r8, r8)
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009dd8:	f7f6 feca 	bl	8000b70 <SystemClock_Config>
}
 8009ddc:	46c0      	nop			; (mov r8, r8)
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	0002      	movs	r2, r0
 8009dea:	1dfb      	adds	r3, r7, #7
 8009dec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dee:	230f      	movs	r3, #15
 8009df0:	18fb      	adds	r3, r7, r3
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009df6:	1dfb      	adds	r3, r7, #7
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d017      	beq.n	8009e2e <USBD_Get_USB_Status+0x4c>
 8009dfe:	dc1b      	bgt.n	8009e38 <USBD_Get_USB_Status+0x56>
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d00f      	beq.n	8009e24 <USBD_Get_USB_Status+0x42>
 8009e04:	dc18      	bgt.n	8009e38 <USBD_Get_USB_Status+0x56>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <USBD_Get_USB_Status+0x2e>
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d005      	beq.n	8009e1a <USBD_Get_USB_Status+0x38>
 8009e0e:	e013      	b.n	8009e38 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e10:	230f      	movs	r3, #15
 8009e12:	18fb      	adds	r3, r7, r3
 8009e14:	2200      	movs	r2, #0
 8009e16:	701a      	strb	r2, [r3, #0]
    break;
 8009e18:	e013      	b.n	8009e42 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e1a:	230f      	movs	r3, #15
 8009e1c:	18fb      	adds	r3, r7, r3
 8009e1e:	2203      	movs	r2, #3
 8009e20:	701a      	strb	r2, [r3, #0]
    break;
 8009e22:	e00e      	b.n	8009e42 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e24:	230f      	movs	r3, #15
 8009e26:	18fb      	adds	r3, r7, r3
 8009e28:	2201      	movs	r2, #1
 8009e2a:	701a      	strb	r2, [r3, #0]
    break;
 8009e2c:	e009      	b.n	8009e42 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e2e:	230f      	movs	r3, #15
 8009e30:	18fb      	adds	r3, r7, r3
 8009e32:	2203      	movs	r2, #3
 8009e34:	701a      	strb	r2, [r3, #0]
    break;
 8009e36:	e004      	b.n	8009e42 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009e38:	230f      	movs	r3, #15
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	2203      	movs	r2, #3
 8009e3e:	701a      	strb	r2, [r3, #0]
    break;
 8009e40:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009e42:	230f      	movs	r3, #15
 8009e44:	18fb      	adds	r3, r7, r3
 8009e46:	781b      	ldrb	r3, [r3, #0]
}
 8009e48:	0018      	movs	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b004      	add	sp, #16
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <__errno>:
 8009e50:	4b01      	ldr	r3, [pc, #4]	; (8009e58 <__errno+0x8>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	4770      	bx	lr
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	20000188 	.word	0x20000188

08009e5c <__libc_init_array>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	2600      	movs	r6, #0
 8009e60:	4d0c      	ldr	r5, [pc, #48]	; (8009e94 <__libc_init_array+0x38>)
 8009e62:	4c0d      	ldr	r4, [pc, #52]	; (8009e98 <__libc_init_array+0x3c>)
 8009e64:	1b64      	subs	r4, r4, r5
 8009e66:	10a4      	asrs	r4, r4, #2
 8009e68:	42a6      	cmp	r6, r4
 8009e6a:	d109      	bne.n	8009e80 <__libc_init_array+0x24>
 8009e6c:	2600      	movs	r6, #0
 8009e6e:	f000 f8ad 	bl	8009fcc <_init>
 8009e72:	4d0a      	ldr	r5, [pc, #40]	; (8009e9c <__libc_init_array+0x40>)
 8009e74:	4c0a      	ldr	r4, [pc, #40]	; (8009ea0 <__libc_init_array+0x44>)
 8009e76:	1b64      	subs	r4, r4, r5
 8009e78:	10a4      	asrs	r4, r4, #2
 8009e7a:	42a6      	cmp	r6, r4
 8009e7c:	d105      	bne.n	8009e8a <__libc_init_array+0x2e>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	00b3      	lsls	r3, r6, #2
 8009e82:	58eb      	ldr	r3, [r5, r3]
 8009e84:	4798      	blx	r3
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7ee      	b.n	8009e68 <__libc_init_array+0xc>
 8009e8a:	00b3      	lsls	r3, r6, #2
 8009e8c:	58eb      	ldr	r3, [r5, r3]
 8009e8e:	4798      	blx	r3
 8009e90:	3601      	adds	r6, #1
 8009e92:	e7f2      	b.n	8009e7a <__libc_init_array+0x1e>
 8009e94:	0800a1dc 	.word	0x0800a1dc
 8009e98:	0800a1dc 	.word	0x0800a1dc
 8009e9c:	0800a1dc 	.word	0x0800a1dc
 8009ea0:	0800a1e0 	.word	0x0800a1e0

08009ea4 <malloc>:
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	4b03      	ldr	r3, [pc, #12]	; (8009eb4 <malloc+0x10>)
 8009ea8:	0001      	movs	r1, r0
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	f000 f80c 	bl	8009ec8 <_malloc_r>
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	20000188 	.word	0x20000188

08009eb8 <memset>:
 8009eb8:	0003      	movs	r3, r0
 8009eba:	1882      	adds	r2, r0, r2
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d100      	bne.n	8009ec2 <memset+0xa>
 8009ec0:	4770      	bx	lr
 8009ec2:	7019      	strb	r1, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	e7f9      	b.n	8009ebc <memset+0x4>

08009ec8 <_malloc_r>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	2303      	movs	r3, #3
 8009ecc:	1ccd      	adds	r5, r1, #3
 8009ece:	439d      	bics	r5, r3
 8009ed0:	3508      	adds	r5, #8
 8009ed2:	0006      	movs	r6, r0
 8009ed4:	2d0c      	cmp	r5, #12
 8009ed6:	d21f      	bcs.n	8009f18 <_malloc_r+0x50>
 8009ed8:	250c      	movs	r5, #12
 8009eda:	42a9      	cmp	r1, r5
 8009edc:	d81e      	bhi.n	8009f1c <_malloc_r+0x54>
 8009ede:	0030      	movs	r0, r6
 8009ee0:	f000 f862 	bl	8009fa8 <__malloc_lock>
 8009ee4:	4925      	ldr	r1, [pc, #148]	; (8009f7c <_malloc_r+0xb4>)
 8009ee6:	680a      	ldr	r2, [r1, #0]
 8009ee8:	0014      	movs	r4, r2
 8009eea:	2c00      	cmp	r4, #0
 8009eec:	d11a      	bne.n	8009f24 <_malloc_r+0x5c>
 8009eee:	4f24      	ldr	r7, [pc, #144]	; (8009f80 <_malloc_r+0xb8>)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d104      	bne.n	8009f00 <_malloc_r+0x38>
 8009ef6:	0021      	movs	r1, r4
 8009ef8:	0030      	movs	r0, r6
 8009efa:	f000 f843 	bl	8009f84 <_sbrk_r>
 8009efe:	6038      	str	r0, [r7, #0]
 8009f00:	0029      	movs	r1, r5
 8009f02:	0030      	movs	r0, r6
 8009f04:	f000 f83e 	bl	8009f84 <_sbrk_r>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d12b      	bne.n	8009f64 <_malloc_r+0x9c>
 8009f0c:	230c      	movs	r3, #12
 8009f0e:	0030      	movs	r0, r6
 8009f10:	6033      	str	r3, [r6, #0]
 8009f12:	f000 f851 	bl	8009fb8 <__malloc_unlock>
 8009f16:	e003      	b.n	8009f20 <_malloc_r+0x58>
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	dade      	bge.n	8009eda <_malloc_r+0x12>
 8009f1c:	230c      	movs	r3, #12
 8009f1e:	6033      	str	r3, [r6, #0]
 8009f20:	2000      	movs	r0, #0
 8009f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	1b5b      	subs	r3, r3, r5
 8009f28:	d419      	bmi.n	8009f5e <_malloc_r+0x96>
 8009f2a:	2b0b      	cmp	r3, #11
 8009f2c:	d903      	bls.n	8009f36 <_malloc_r+0x6e>
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	18e4      	adds	r4, r4, r3
 8009f32:	6025      	str	r5, [r4, #0]
 8009f34:	e003      	b.n	8009f3e <_malloc_r+0x76>
 8009f36:	6863      	ldr	r3, [r4, #4]
 8009f38:	42a2      	cmp	r2, r4
 8009f3a:	d10e      	bne.n	8009f5a <_malloc_r+0x92>
 8009f3c:	600b      	str	r3, [r1, #0]
 8009f3e:	0030      	movs	r0, r6
 8009f40:	f000 f83a 	bl	8009fb8 <__malloc_unlock>
 8009f44:	0020      	movs	r0, r4
 8009f46:	2207      	movs	r2, #7
 8009f48:	300b      	adds	r0, #11
 8009f4a:	1d23      	adds	r3, r4, #4
 8009f4c:	4390      	bics	r0, r2
 8009f4e:	1ac2      	subs	r2, r0, r3
 8009f50:	4298      	cmp	r0, r3
 8009f52:	d0e6      	beq.n	8009f22 <_malloc_r+0x5a>
 8009f54:	1a1b      	subs	r3, r3, r0
 8009f56:	50a3      	str	r3, [r4, r2]
 8009f58:	e7e3      	b.n	8009f22 <_malloc_r+0x5a>
 8009f5a:	6053      	str	r3, [r2, #4]
 8009f5c:	e7ef      	b.n	8009f3e <_malloc_r+0x76>
 8009f5e:	0022      	movs	r2, r4
 8009f60:	6864      	ldr	r4, [r4, #4]
 8009f62:	e7c2      	b.n	8009eea <_malloc_r+0x22>
 8009f64:	2303      	movs	r3, #3
 8009f66:	1cc4      	adds	r4, r0, #3
 8009f68:	439c      	bics	r4, r3
 8009f6a:	42a0      	cmp	r0, r4
 8009f6c:	d0e1      	beq.n	8009f32 <_malloc_r+0x6a>
 8009f6e:	1a21      	subs	r1, r4, r0
 8009f70:	0030      	movs	r0, r6
 8009f72:	f000 f807 	bl	8009f84 <_sbrk_r>
 8009f76:	1c43      	adds	r3, r0, #1
 8009f78:	d1db      	bne.n	8009f32 <_malloc_r+0x6a>
 8009f7a:	e7c7      	b.n	8009f0c <_malloc_r+0x44>
 8009f7c:	2000044c 	.word	0x2000044c
 8009f80:	20000450 	.word	0x20000450

08009f84 <_sbrk_r>:
 8009f84:	2300      	movs	r3, #0
 8009f86:	b570      	push	{r4, r5, r6, lr}
 8009f88:	4d06      	ldr	r5, [pc, #24]	; (8009fa4 <_sbrk_r+0x20>)
 8009f8a:	0004      	movs	r4, r0
 8009f8c:	0008      	movs	r0, r1
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	f7f7 f870 	bl	8001074 <_sbrk>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d103      	bne.n	8009fa0 <_sbrk_r+0x1c>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d000      	beq.n	8009fa0 <_sbrk_r+0x1c>
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	20001cfc 	.word	0x20001cfc

08009fa8 <__malloc_lock>:
 8009fa8:	b510      	push	{r4, lr}
 8009faa:	4802      	ldr	r0, [pc, #8]	; (8009fb4 <__malloc_lock+0xc>)
 8009fac:	f000 f80c 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 8009fb0:	bd10      	pop	{r4, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	20001d04 	.word	0x20001d04

08009fb8 <__malloc_unlock>:
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	4802      	ldr	r0, [pc, #8]	; (8009fc4 <__malloc_unlock+0xc>)
 8009fbc:	f000 f805 	bl	8009fca <__retarget_lock_release_recursive>
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	20001d04 	.word	0x20001d04

08009fc8 <__retarget_lock_acquire_recursive>:
 8009fc8:	4770      	bx	lr

08009fca <__retarget_lock_release_recursive>:
 8009fca:	4770      	bx	lr

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	46c0      	nop			; (mov r8, r8)
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	46c0      	nop			; (mov r8, r8)
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
